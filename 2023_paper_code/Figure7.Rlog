##region Patchseq
library(Seurat)
RunRNAClustering <- function(counts,meta){
  obj <- CreateSeuratObject(counts = counts, assay = "RNA", meta.data = meta)
  obj <- NormalizeData(obj)
  obj <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)
  all.genes <- rownames(obj)
  obj <- ScaleData(obj, features = all.genes)
  obj <- RunPCA(obj, features = VariableFeatures(object = obj))
  obj <- FindNeighbors(obj, dims = 1:10)
  obj <- FindClusters(obj, resolution = 0.5)
  obj <- RunUMAP(obj, dims = 1:10)
  return(obj)
}

setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Patchseq/patchseq/data")
metadata <- read.table("patchclamp_wcryo_human.metadata.tab",sep='\t')
counts <- read.table("patchclamp_wcryo_human.counts.tab",sep='\t')
colnames(counts) <- gsub("X","",colnames(counts))
patch.obj <- RunRNAClustering(counts, metadata)
HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]>=1)]
HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]==0)]
HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.expr.cells.alpha <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="alpha")])
HNF1A.nonexpr.cells.alpha <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="alpha")])

Check_measurements <- function(patch.obj,gene,cellType="beta"){
  gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type==cellType)])
  gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type==cellType)])
  namestransfer <- data.frame(from=c("CellSize_pF", "FirstDepolarizationCapacitance_fF","NormalizedFirstDepolarizationCapacitance_fF.pF","NormalizedLateCalciumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","CapacitanceNormalizedtoCalcium_fF.pC",
    "NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","ReversalPotentialbyramp_mV","NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF"),
    to=c('Cell size','Total Exocitosis','Early exocytosis','Late exocytosis','Ca2+ entry','Exocytosis norm Ca2+','Early Ca2+ current','Late Ca2+ current','Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance'))
  namestransfer <- namestransfer[c(1,2,3,4,6,5,7,8,11,12),]
  picked <- c('Cell size', 'Total Exocitosis','Early exocytosis','Late exocytosis', 'Ca2+ entry','Exocytosis norm Ca2+', 'Early Ca2+ current','Late Ca2+ current', 'Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance')
  measurelis <- as.character(namestransfer[,1])
  pval_V <- c()
  measure_V <- c()
  par(mfrow=c(1,length(measurelis)))
  for(i in 1:length(measurelis)){
    datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
    cell_num <- lengths(datalis)
    if(length(datalis$pos)>1 && length(datalis$neg)>1){
        datalis$pos <- as.numeric(as.character(datalis$pos))
        datalis$neg <- as.numeric(as.character(datalis$neg))
        datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
        datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
        measure_V <- c(measure_V, measurelis[i])
        pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
        pval_V <- c(pval_V, pval)
        if(length(datalis$pos)>1 && length(datalis$neg)>1){
          boxplot(datalis,main=namestransfer$to[which(namestransfer$from==measurelis[i])],outline=F,las=2,names=c(paste(gene,"+"), paste(gene,"-")),col=c("gold","darkgreen"))
          legend("bottomright",legend=c(round(pval,digits=3)))
          legend("topright",legend=c(paste("+:",cell_num[1]), paste("-:",cell_num[2])),col=c("gold","darkgreen"),lwd=3)
        }
    }
  }
  measurelis.pval <- data.frame(measure=measure_V,pval=pval_V)
}

Check_measurements(patch.obj,"HNF1A",cellType="beta")
HNF1A.targets <- c("HNF1A","A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")
pdf("HNF1A_and_targets.alpha.pdf",20,3)
Check_measurements(patch.obj,"HNF1A",cellType="alpha")
for(gene in HNF1A.targets){
  Check_measurements(patch.obj,gene,cellType="alpha")
}
dev.off()


Check_measurements.distribute <- function(patch.obj,gene,cellType="beta"){
  gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type==cellType)])
  gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type==cellType)])
  namestransfer <- data.frame(from=c("CellSize_pF", "FirstDepolarizationCapacitance_fF","NormalizedFirstDepolarizationCapacitance_fF.pF","NormalizedLateCalciumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","CapacitanceNormalizedtoCalcium_fF.pC",
    "NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","ReversalPotentialbyramp_mV","NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF"),
    to=c('Cell size','Total Exocitosis','Early exocytosis','Late exocytosis','Ca2+ entry','Exocytosis norm Ca2+','Early Ca2+ current','Late Ca2+ current','Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance'))
  namestransfer <- namestransfer[c(1,2,3,4,6,5,7,8,11,12),]
  picked <- c('Cell size', 'Total Exocitosis','Early exocytosis','Late exocytosis', 'Ca2+ entry','Exocytosis norm Ca2+', 'Early Ca2+ current','Late Ca2+ current', 'Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance')
  measurelis <- as.character(namestransfer[,1])
  pval_V <- c()
  measure_V <- c()
  par(mfrow=c(1,length(measurelis)))
  for(i in 1:length(measurelis)){
    datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
    cell_num <- lengths(datalis)
    if(length(datalis$pos)>1 && length(datalis$neg)>1){
        datalis$pos <- as.numeric(as.character(datalis$pos))
        datalis$neg <- as.numeric(as.character(datalis$neg))
        datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
        datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
        measure_V <- c(measure_V, measurelis[i])
        pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
        pval_V <- c(pval_V, pval)
        if(length(datalis$pos)>1 && length(datalis$neg)>1){
          # boxplot(datalis,main=namestransfer$to[which(namestransfer$from==measurelis[i])],outline=F,las=2,names=c(paste(gene,"+"), paste(gene,"-")),col=c("gold","darkgreen"))
          # legend("bottomright",legend=c(round(pval,digits=3)))
          plot(density(datalis$pos),col='red',main=namestransfer$to[which(namestransfer$from==measurelis[i])],xlab=gene)
          lines(density(datalis$neg))
          legend("topright",legend=c(paste("+:",cell_num[1]), paste("-:",cell_num[2])),col=c("red","black"),lwd=3)
        }
    }
  }
  measurelis.pval <- data.frame(measure=measure_V,pval=pval_V)
}
pdf("HNF1A_and_targets.alpha.distribute.pdf",20,3)
Check_measurements.distribute(patch.obj,"HNF1A",cellType="alpha")
for(gene in HNF1A.targets){
  Check_measurements.distribute(patch.obj,gene,cellType="alpha")
}
dev.off()

pdf("HNF1A_and_targets.beta.distribute.pdf",20,3)
Check_measurements.distribute(patch.obj,"HNF1A",cellType="beta")
for(gene in HNF1A.targets){
  Check_measurements.distribute(patch.obj,gene,cellType="beta")
}
dev.off()

# measurelis <- colnames(patch.obj@meta.data)[20:51]
# measurelis <- setdiff(measurelis,c("CellTypeEstimatePatching"))
# pval_V <- c()
# measure_V <- c()
# for(i in 1:length(measurelis)){
#   datalis <- list(HNF1A_pos=as.character(patch.obj@meta.data[HNF1A.expr.cells.beta,measurelis[i]]), HNF1A_neg=as.character(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,measurelis[i]]))
#   datalis$HNF1A_pos <- datalis$HNF1A_pos[-which(is.na(datalis$HNF1A_pos))]
#   datalis$HNF1A_neg <- datalis$HNF1A_neg[-which(is.na(datalis$HNF1A_neg))]
#   if(length(datalis$HNF1A_pos)>0){
#     if(length(datalis$HNF1A_neg)>0){
#       datalis$HNF1A_pos <- as.numeric(as.character(datalis$HNF1A_pos))
#       datalis$HNF1A_neg <- as.numeric(as.character(datalis$HNF1A_neg))
#       measure_V <- c(measure_V, measurelis[i])
#       pval_V <- c(pval_V, wilcox.test(datalis$HNF1A_pos, datalis$HNF1A_neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value)
#     }
#   }
#   # boxplot(datalis,main=measurelis[i],outline=F,las=2)
#   # legend("bottomright",legend=c(wilcox.test(datalis$HNF1A_pos, datalis$HNF1A_neg)$p.value))
# }
# measurelis.pval <- data.frame(measure=measure_V,pval=pval_V)
# subset(measurelis.pval,pval<=0.1)
# table(patch.obj@meta.data[HNF1A.expr.cells,"cell_type"])
#          acinar   alpha    beta   delta fail_qc   gamma   other
#      48       9     233      33       6      50      19       1
# table(patch.obj@meta.data[HNF1A.nonexpr.cells,"cell_type"])
#
#          acinar   alpha    beta   delta fail_qc   gamma   other
#     416      54     715     325      18     285      34       8
#
# table(patch.obj@meta.data[HNF1A.expr.cells.beta,"DiabetesStatus"])
#
# table(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,"DiabetesStatus"])
#


measurelis <- as.character(namestransfer[,1])
pval_V <- c()
measure_V <- c()
for(i in 1:length(measurelis)){
  datalis <- list(HNF1A_pos=as.character(patch.obj@meta.data[HNF1A.expr.cells.beta,measurelis[i]]), HNF1A_neg=as.character(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,measurelis[i]]))
  datalis$HNF1A_pos <- datalis$HNF1A_pos[-which(is.na(datalis$HNF1A_pos))]
  datalis$HNF1A_neg <- datalis$HNF1A_neg[-which(is.na(datalis$HNF1A_neg))]
  if(length(datalis$HNF1A_pos)>0){
    if(length(datalis$HNF1A_neg)>0){
      datalis$HNF1A_pos <- as.numeric(as.character(datalis$HNF1A_pos))
      datalis$HNF1A_neg <- as.numeric(as.character(datalis$HNF1A_neg))
      measure_V <- c(measure_V, measurelis[i])
      pval_V <- c(pval_V, wilcox.test(datalis$HNF1A_pos, datalis$HNF1A_neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value)
    }
  }
}
measurelis.pval <- data.frame(measure=measure_V,pval=pval_V)
# subset(measurelis.pval,pval<=0.1)

pdf("HNF1A.comb.boxplot.pdf",20,6)
measurelis.pval.merge <- unique(merge(measurelis.pval,namestransfer,by.x="measure",by.y="from",all.x=TRUE))
measurelis.pval.merge <- measurelis.pval.merge[c(3,4,6,7,2,1,5,8,9),]
par(mfrow=c(2,nrow(measurelis.pval.merge)))
for(i in 1:nrow(measurelis.pval.merge)){
  datalis <- list(HNF1A_pos=as.numeric(as.character(patch.obj@meta.data[HNF1A.expr.cells.beta,as.character(measurelis.pval.merge$measure)[i]])), HNF1A_neg=as.numeric(as.character(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,as.character(measurelis.pval.merge$measure)[i]])))
  if(length(which(is.na(datalis$HNF1A_pos)))>0){
    datalis$HNF1A_pos <- datalis$HNF1A_pos[-which(is.na(datalis$HNF1A_pos))]
  }
  if(length(which(is.na(datalis$HNF1A_neg)))>0){
    datalis$HNF1A_neg <- datalis$HNF1A_neg[-which(is.na(datalis$HNF1A_neg))]
  }
  boxplot(datalis,main=measurelis.pval.merge$to[i],outline=F,las=2,names=c("HNF1A +", "HNF1A -"),col=c("pink","darkgreen"))
  legend("bottomright",legend=c(round(wilcox.test(datalis$HNF1A_pos, datalis$HNF1A_neg)$p.value,digits=3)))
}
for(i in 1:nrow(measurelis.pval.merge)){
  datalis <- list(HNF1A_pos=as.numeric(as.character(patch.obj@meta.data[HNF1A.expr.cells.Hbeta,as.character(measurelis.pval.merge$measure)[i]])), HNF1A_neg=as.numeric(as.character(patch.obj@meta.data[HNF1A.nonexpr.cells.Hbeta,as.character(measurelis.pval.merge$measure)[i]])))
  if(length(which(is.na(datalis$HNF1A_pos)))>0){
    datalis$HNF1A_pos <- datalis$HNF1A_pos[-which(is.na(datalis$HNF1A_pos))]
  }
  if(length(which(is.na(datalis$HNF1A_neg)))>0){
    datalis$HNF1A_neg <- datalis$HNF1A_neg[-which(is.na(datalis$HNF1A_neg))]
  }
  boxplot(datalis,main=measurelis.pval.merge$to[i],outline=F,las=2,names=c("HNF1A +", "HNF1A -"),col=c("pink","darkgreen"))
  legend("bottomright",legend=c(round(wilcox.test(datalis$HNF1A_pos, datalis$HNF1A_neg)$p.value,digits=3)))
}

HNF1A.targets <- c("A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")
patch.obj@assays$RNA@scale.data[HNF1A.targets,HNF1A.expr.cells.Hbeta]
patch.obj@assays$RNA@scale.data[HNF1A.targets,HNF1A.nonexpr.cells.Hbeta]
target.scaled.lis <- list()
pval.lis <- c()
for(gene in HNF1A.targets){
  target.scaled.lis[[paste(gene,"HNF1A+")]] <- patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.Hbeta]
  target.scaled.lis[[paste(gene,"HNF1A-")]] <- patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.Hbeta]
  pval.lis <- c(pval.lis, round(wilcox.test(target.scaled.lis[[paste(gene,"HNF1A+")]], target.scaled.lis[[paste(gene,"HNF1A-")]])$p.value,digits=3))
}
par(mfrow=c(1,1))
par(mar=c(15,5,5,5))
boxplot(target.scaled.lis,las=2,col=rep(c("pink","darkgreen"),20),outline=F, xaxt = "n",  xlab = "",ylab="Normalized transcripts")
star_lis <- rep("",length(HNF1A.targets))
star_lis[which(pval.lis<=0.05)] <- "*"
text(seq(1.5,39.5,2),3,star_lis)
text(x = seq(1.5,39.5,2), y = par("usr")[3] - 0.5, srt = 90, adj = 1, labels = HNF1A.targets, xpd = TRUE)
legend("topright",legend=c("HNF1A +","HNF1A -"),col=c("pink","darkgreen"),lwd=4)
dev.off()


HNF1A.targets <- c("HNF1A","SLC20A2", "SLC17A1","A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")


target.scaled.lis.targetGene <- list()
target.scaled.lis.targetGene.allbeta <- list()
pval.lis.targetGene <- c()
pval.lis.targetGene.allbeta <- c()
for(gene in HNF1A.targets){
  HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.expr.cells.Hbeta <- intersect(HNF1A.expr.cells.beta, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" &  patch.obj@meta.data$DiabetesStatus=="healthy")])
  HNF1A.nonexpr.cells.Hbeta <- intersect(HNF1A.nonexpr.cells.beta, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" & patch.obj@meta.data$DiabetesStatus=="healthy")])
  target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.expr.cells.Hbeta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"]
  target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.nonexpr.cells.Hbeta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"]
  pval.lis.targetGene <- c(pval.lis.targetGene, round(wilcox.test(target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]], target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]])$p.value,digits=3))
  target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]] <- abs(patch.obj@meta.data[HNF1A.expr.cells.beta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"])
  target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]] <- abs(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"])
  pval.lis.targetGene.allbeta <- c(pval.lis.targetGene.allbeta, round(wilcox.test(target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]], target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]],alternative='less')$p.value,digits=3))

}
pdf("HNF1A.targetGene.PeakSodiumCurrent.boxplot.pdf",15,8)
par(mfrow=c(1,1))
par(mar=c(15,5,5,5))
boxplot(target.scaled.lis.targetGene.allbeta,las=2,col=rep(c("gold","darkgreen"),20),outline=F, ylab="Peak Na+ Current")
star_lis <- rep("",length(HNF1A.targets))
star_lis[which(pval.lis.targetGene.allbeta<=0.05)] <- "*"
text(seq(1.5,39.5,2),30,star_lis)
# text(x = seq(1.5,39.5,2), y = par("usr")[3] - 0.5, srt = 90, adj = 1, labels = HNF1A.targets, xpd = TRUE)
legend("topright",legend=c("HNF1A +","HNF1A -"),col=c("gold","darkgreen"),lwd=4)
dev.off()

sodium.gene <- c("HNF1A","SLC20A2","SCN1A","SCN2A","SCN3A","SCN4A","SCN5A","SCN6A","SCN7A","SCN8A","SCN9A","SCN10A", "SCN11A", "SCN1B", "SCN2B","SCN3B","SCN4B")
sodium.gene <- c("FXYD2","A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")

sodium.gene <- sodium.gene[which(sodium.gene %in% rownames(patch.obj@assays$RNA@counts))]
target.scaled.lis.targetGene <- list()
target.scaled.lis.targetGene.allbeta <- list()
pval.lis.targetGene <- c()
pval.lis.targetGene.allbeta <- c()
for(gene in sodium.gene){
  betacells <- rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")]
  HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.expr.cells.Hbeta <- intersect(HNF1A.expr.cells.beta, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" &  patch.obj@meta.data$DiabetesStatus=="healthy")])
  HNF1A.nonexpr.cells.Hbeta <- intersect(HNF1A.nonexpr.cells.beta, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" & patch.obj@meta.data$DiabetesStatus=="healthy")])
  if(length(HNF1A.expr.cells.beta)>179){
    HNF1A.expr.cells.beta <- names(sort(patch.obj@assays$RNA@counts[gene,betacells],decreasing=T))[1:179]
    HNF1A.nonexpr.cells.beta <- setdiff(betacells,HNF1A.expr.cells.beta)
  }
  target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.expr.cells.Hbeta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"]
  target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.nonexpr.cells.Hbeta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"]
  pval.lis.targetGene <- c(pval.lis.targetGene, round(wilcox.test(target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]], target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]])$p.value,digits=3))
  target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]] <- abs(patch.obj@meta.data[HNF1A.expr.cells.beta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"])
  target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]] <- abs(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"])
  pval.lis.targetGene.allbeta <- c(pval.lis.targetGene.allbeta, round(wilcox.test(target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]], target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]],alternative='less')$p.value,digits=3))

}
par(mfrow=c(1,1))
par(mar=c(8,5,5,5))
boxplot(target.scaled.lis.targetGene.allbeta,las=2,col=rep(c("gold","darkgreen"),20),outline=F, ylab="Peak Na+ Current",ylim=c(0,50))
stripchart(target.scaled.lis.targetGene.allbeta, method = "jitter", vertical = TRUE, add = TRUE,pch=16,cex=0.5)
star_lis <- rep("",length(sodium.gene))
star_lis[which(pval.lis.targetGene.allbeta<0.05 & pval.lis.targetGene.allbeta>=0.01)] <- "*"
star_lis[which(pval.lis.targetGene.allbeta<0.01 & pval.lis.targetGene.allbeta>=0.001)] <- "**"
star_lis[which(pval.lis.targetGene.allbeta<=0.001)] <- "***"
text(seq(1.5,39.5,2),45,star_lis,col='red')
legend("topright",legend=c("+","-"),col=c("gold","darkgreen"),lwd=4)


# SLC20A2
HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]>=1)]
HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]==0)]
HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
sodium.gene.expr.lis <- list()
pval.lis <- c()
for(gene in sodium.gene){
  sodium.gene.expr.lis[[paste(gene,".HNF1A+",sep='')]] <- patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta]
  sodium.gene.expr.lis[[paste(gene,".HNF1A-",sep='')]] <- patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta]
  pval.lis <- c(pval.lis, round(t.test(sodium.gene.expr.lis[[paste(gene,".HNF1A+",sep='')]], sodium.gene.expr.lis[[paste(gene,".HNF1A-",sep='')]],alternative="greater")$p.value,digits=3))
}
boxplot(sodium.gene.expr.lis,outline=F,col=rep(c("gold","darkgreen")),las=2,ylab='expression')
star_lis <- rep("",length(sodium.gene))
star_lis[which(pval.lis<=0.05)] <- "*"
text(seq(1.5,6.5,2),2,star_lis)
legend("topright",legend=c("HNF1A +","HNF1A -"),col=c("gold","darkgreen"),lwd=4)

ionChanel.geneLis <- read.table("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ionChanel.HGNC.download.txt",header=T,stringsAsFactors=F,sep='\t')
ionChanel.geneLis.sub <- subset(ionChanel.geneLis, Approved.symbol %in%unique(ionChanel.geneLis$Approved.symbol[which(ionChanel.geneLis$Approved.symbol %in% rownames(patch.obj@assays$RNA@counts))]))
# HNF1A.corGene <- read.csv("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/HNF1A.corr.genes.csv",header=T)
# HNF1A.peak.annot <- read.delim("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/tmp.HNF1A.peak.annot",header=T)
# peak.annot <- read.delim("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/Islet12.ALL.totalPeak.TOP32K.noBlack.bed.annot",header=T)
# HNF1A.corGene.ionChanel <- subset(HNF1A.corGene, gene %in% unique(ionChanel.geneLis$Approved.symbol))
beta.HNF1A.annot <- read.delim("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/beta.all.motif.ind.HNF1A.peak.annot",header=T)
Islet12.scRNA.seurat3.filtered<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/Islet12.scRNA.seurat3.filtered")
thisStudy.HNF1A.expr.cells <- colnames(Islet12.scRNA.seurat3.filtered@assays$RNA@counts)[which(Islet12.scRNA.seurat3.filtered@assays$RNA@counts["HNF1A",]>=1)]
thisStudy.HNF1A.nonexpr.cells <- colnames(Islet12.scRNA.seurat3.filtered@assays$RNA@counts)[which(Islet12.scRNA.seurat3.filtered@assays$RNA@counts["HNF1A",]==0)]
thisStudy.HNF1A.expr.cells.beta <- intersect(thisStudy.HNF1A.expr.cells, rownames(Islet12.scRNA.seurat3.filtered@meta.data)[which(Islet12.scRNA.seurat3.filtered@meta.data$Cell_type=="Beta")])
thisStudy.HNF1A.nonexpr.cells.beta <- intersect(thisStudy.HNF1A.nonexpr.cells, rownames(Islet12.scRNA.seurat3.filtered@meta.data)[which(Islet12.scRNA.seurat3.filtered@meta.data$Cell_type=="Beta")])

geneLis <- list()
for(file in list.files("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ionChanel.HGNC")){
  name <- gsub(".HGNC.download.txt","",file)
  data <- read.table(paste("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ionChanel.HGNC/",file,sep=''),header=T,stringsAsFactors=F,sep='\t')
  gene <- unique(as.character(intersect(data$Approved.symbol, rownames(patch.obj@assays$RNA@counts))))
  geneLis[[name]] <- intersect(unique(intersect(gene, beta.HNF1A.annot$Gene.Name)),rownames(patch.obj@assays$RNA@counts))
}
lengths(geneLis)
HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]>=1)]
HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]==0)]
HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])

namestransfer <- data.frame(from=c("CellSize_pF", "FirstDepolarizationCapacitance_fF","NormalizedFirstDepolarizationCapacitance_fF.pF","NormalizedLateCalciumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","CapacitanceNormalizedtoCalcium_fF.pC",
  "NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","ReversalPotentialbyramp_mV","NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF"),
  to=c('Cell size','Total Exocitosis','Early exocytosis','Late exocytosis','Ca2+ entry','Exocytosis norm Ca2+','Early Ca2+ current','Late Ca2+ current','Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance'))
namestransfer <- namestransfer[c(1,2,3,4,6,5,7,8,11,12),]
picked <- c('Cell size', 'Total Exocitosis','Early exocytosis','Late exocytosis', 'Ca2+ entry','Exocytosis norm Ca2+', 'Early Ca2+ current','Late Ca2+ current', 'Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance')

result.Lis <- list()
for(gene in unlist(geneLis)){
  if(gene %in% rownames(Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data)){
    thisStudy.expr.FC <- mean(Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data[gene,thisStudy.HNF1A.expr.cells.beta])/mean(Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data[gene,thisStudy.HNF1A.nonexpr.cells.beta])
    thisStudy.expr.pval <- wilcox.test(Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data[gene,thisStudy.HNF1A.expr.cells.beta],Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data[gene,thisStudy.HNF1A.nonexpr.cells.beta])$p.value
  }else{
    thisStudy.expr.FC <- 0
    thisStudy.expr.pval <- 1
  }
  expr.FC <- mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta])/mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])
  expr.pval <- wilcox.test(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta],patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])$p.value
  measurelis <- as.character(namestransfer[,1])
  pval_V <- c()
  measure_V <- c()
  FC_V <- c()
  gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  if(length(gene.expr.cells.cellType)>1 & length(gene.nonexpr.cells.cellType)>1){
    for(i in 1:length(measurelis)){
      datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
      cell_num <- lengths(datalis)
    # if(length(datalis$pos)>1 && length(datalis$neg)>1){
      datalis$pos <- as.numeric(as.character(datalis$pos))
      datalis$neg <- as.numeric(as.character(datalis$neg))
      datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
      datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
      measure_V <- c(measure_V, measurelis[i])
      if(length(datalis$pos)>1){
        pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
      }else{
        pval <- 1
      }
      FC_V <- c(FC_V, mean(datalis$pos)/mean(datalis$neg))
      pval_V <- c(pval_V, pval)
    }
    print(gene)
    result <- data.frame(gene=gene,measure=measure_V,FC=FC_V,pval=pval_V)
    result <- rbind(result, c(gene,"patchseq.expr",expr.FC,expr.pval))
    result <- rbind(result, c(gene,"thisStudy.expr",thisStudy.expr.FC,thisStudy.expr.pval))
    result.Lis[[gene]] <- result
  }
}
library(rlist)
library(plyr)
result.df <- list.rbind(result.Lis)
result.df$measure <- mapvalues(result.df$measure,from=namestransfer$from, to=namestransfer$to)
geneLis.df <- as.data.frame(lengths(geneLis))
group <- c()
for(i in 1:nrow(geneLis.df)){
  group <- c(group,rep(rownames(geneLis.df)[i], geneLis.df[i,1]))
}
gene.group <- data.frame(gene=unlist(geneLis),group=group)
result.df$pval <- as.numeric(result.df$pval)
result.df$FC <- as.numeric(result.df$FC)
toPlot <- merge(result.df, gene.group,by="gene") %>% .[complete.cases(.),]
toPlot$gene <- factor(toPlot$gene, levels=unique(as.character(gene.group$gene)))
toPlot$group <- factor(toPlot$group,levels=unique(gene.group$group))
toPlot$log2FC <- log2(toPlot$FC)
toPlot <- toPlot[complete.cases(toPlot),]
toPlot.1 <- subset(toPlot, measure %in% c("patchseq.expr","thisStudy.expr"))
toPlot.2 <- subset(toPlot, !measure %in% c("patchseq.expr","thisStudy.expr"))
p1 <- ggplot(toPlot.1) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-2,2),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(group), cols = vars(measure), scales = "free", space = "free_y")
toPlot.2$measure <- factor(toPlot.2$measure, levels=c("Cell size","Total Exocitosis","Early exocytosis","Late exocytosis","Exocytosis norm Ca2+","Ca2+ entry","Early Ca2+ current","Late Ca2+ current","Peak Na+ current","Na+ conductance"))
p3 <- ggplot(toPlot.2) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-2,2),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(group), cols = vars(measure), scales = "free", space = "free_y")
toPlot.2$pval[which(toPlot.2$pval>0.05)] <- NA
p2 <- ggplot(toPlot.2) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-2,2),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(group), cols = vars(measure), scales = "free", space = "free_y")

pdf("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ionChanel.HGNC/test.heatmap.pdf",10,15)
print(p3)
print(p2)
dev.off()

pdf("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ionChanel.HGNC/test.heatmap.V2.pdf",16,7)
ggplot(toPlot.2) + aes(gene,measure,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(measure), cols = vars(group), scales = "free", space = "free_y")
ggplot(toPlot) + aes(gene,measure,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(measure), cols = vars(group), scales = "free", space = "free_y")
dev.off()

# select ion-channel genes from GSEA terms
namestransfer <- data.frame(from=c("CellSize_pF", "FirstDepolarizationCapacitance_fF","NormalizedFirstDepolarizationCapacitance_fF.pF","NormalizedLateCalciumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","CapacitanceNormalizedtoCalcium_fF.pC",
  "NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","ReversalPotentialbyramp_mV","NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF"),
  to=c('Cell size','Total Exocitosis','Early exocytosis','Late exocytosis','Ca2+ entry','Exocytosis norm Ca2+','Early Ca2+ current','Late Ca2+ current','Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance'))
namestransfer <- namestransfer[c(1,2,3,4,6,5,7,8,11,12),]
picked <- c('Cell size', 'Total Exocitosis','Early exocytosis','Late exocytosis', 'Ca2+ entry','Exocytosis norm Ca2+', 'Early Ca2+ current','Late Ca2+ current', 'Late Ca2+ Conductance','Reversal potential','Peak Na+ current','Na+ conductance')
library(EZsinglecell)
library(rlist)
library(ggplot2)
data(msig.db)
select.GSEA.terms.lis <- list(sodium=names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("SODIUM_",names(msig.db)))],
                      calcium=names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("CALCIUM_",names(msig.db)))],
                      potassium=setdiff(names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("POTASSIUM_",names(msig.db)))],c("GO_SODIUM_POTASSIUM_EXCHANGING_ATPASE_COMPLEX","GO_CALCIUM_ACTIVATED_POTASSIUM_CHANNEL_ACTIVITY","GO_VOLTAGE_GATED_POTASSIUM_CHANNEL_ACTIVITY")),
                      voltage=names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("VOLTAGE",names(msig.db)))])
select.GSEA.terms.lis[[4]] <- setdiff(select.GSEA.terms.lis[[4]],c(select.GSEA.terms.lis[[1]],select.GSEA.terms.lis[[2]],select.GSEA.terms.lis[[3]]))
gene.big.group <- list()
for(i in 1:length(select.GSEA.terms.lis)){
  gene.big.group[[i]] <- data.frame(group=names(select.GSEA.terms.lis)[i], term=select.GSEA.terms.lis[[i]])
}
gene.big.group.df <- unique(list.rbind(gene.big.group))

select.GSEA.terms <- unique(c(names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("SODIUM_",names(msig.db)))],
                      names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("CALCIUM_",names(msig.db)))],
                      names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("POTASSIUM_",names(msig.db)))],
                      names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("VOLTAGE",names(msig.db)))]))
select.GSEA.terms.gene <- unique(unlist(msig.db[select.GSEA.terms]))
gene.group <- list()
for(i in 1:length(select.GSEA.terms)){
  bigGroup <- gene.big.group.df[which(gene.big.group.df[,2]==select.GSEA.terms[i]),1]
  gene.group[[i]] <- data.frame(gene=msig.db[[select.GSEA.terms[i]]], group=select.GSEA.terms[i], biggroup=bigGroup)
}
gene.group.df <- unique(list.rbind(gene.group))

tmp <- as.matrix(patch.obj@assays$RNA@counts[,rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")]])
tmp[which(tmp>1)] <- 1
select.GSEA.terms.gene.expr <- intersect(rownames(tmp)[which(rowSums(tmp)>=5)], select.GSEA.terms.gene)
beta.all.motif.ind<-read.table("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/Beta.SVM.KNN.filteredFinal.HOCOMOCOv11_full.individual.merge")
beta.all.motif.ind.sig<-subset(beta.all.motif.ind,V7<1e-5)
beta.all.motif.ind.sig.HNF1A <- read.delim("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/beta.all.motif.ind.HNF1A.peak.annot")
select.GSEA.terms.gene.expr.betaPeak.HNF1A <- intersect(unique(subset(beta.all.motif.ind.sig.HNF1A,(Distance.to.TSS)<=5000)$Gene.Name), select.GSEA.terms.gene.expr)
ALL.Beta.ATAC.peaks.sub.annot <- read.delim("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ALL.Beta.ATAC.peaks.sub.annot")
select.GSEA.terms.gene.expr.betaPeak <- sort(intersect(subset(ALL.Beta.ATAC.peaks.sub.annot, abs(Distance.to.TSS)<=2500)$Gene.Name, select.GSEA.terms.gene.expr))

result.Lis <- list()
for(gene in unlist(select.GSEA.terms.gene.expr.betaPeak)){
  expr.FC <- mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta])/mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])
  expr.pval <- wilcox.test(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta],patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])$p.value
  measurelis <- as.character(namestransfer[,1])
  pval_V <- c()
  measure_V <- c()
  FC_V <- c()
  gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  if(length(gene.expr.cells.cellType)>1 & length(gene.nonexpr.cells.cellType)>1){
    for(i in 1:length(measurelis)){
      datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
      cell_num <- lengths(datalis)
    # if(length(datalis$pos)>1 && length(datalis$neg)>1){
      datalis$pos <- as.numeric(as.character(datalis$pos))
      datalis$neg <- as.numeric(as.character(datalis$neg))
      datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
      datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
      measure_V <- c(measure_V, measurelis[i])
      if(length(datalis$pos)>1){
        pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
      }else{
        pval <- 1
      }
      FC_V <- c(FC_V, mean(datalis$pos)/mean(datalis$neg))
      pval_V <- c(pval_V, pval)
    }
    print(gene)
    result <- data.frame(gene=gene,measure=measure_V,FC=FC_V,pval=pval_V)
    result <- rbind(result, c(gene,"patchseq.expr",expr.FC,expr.pval))
    # result <- rbind(result, c(gene,"thisStudy.expr",thisStudy.expr.FC,thisStudy.expr.pval))
    result.Lis[[gene]] <- result
  }
}

pdf("HNF1A.boxplot_points.pdf",15,5)
par(mfrow=c(2,9))
gene <- "HNF1A"
expr.FC <- mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta])/mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])
expr.pval <- wilcox.test(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta],patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])$p.value
measurelis <- c("NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","NormalizedFirstDepolarizationCapacitance_fF.pF","LateDepolarizationCapacitance","FirstDepolarizationCapacitance_fF")
pval_V <- c()
measure_V <- c()
FC_V <- c()
gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
for(i in 1:length(measurelis)){
  datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
  cell_num <- lengths(datalis)
# if(length(datalis$pos)>1 && length(datalis$neg)>1){
  datalis$pos <- as.numeric(as.character(datalis$pos))
  datalis$neg <- as.numeric(as.character(datalis$neg))
  datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
  datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
  measure_V <- c(measure_V, measurelis[i])
  if(length(datalis$pos)>1){
    pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
  }else{
    pval <- 1
  }
  FC_V <- c(FC_V, mean(datalis$pos)/mean(datalis$neg))
  pval_V <- c(pval_V, pval)
  tmpLis <- datalis
  tmpLis$pos <- abs(as.numeric(tmpLis$pos))
  tmpLis$neg <- abs(as.numeric(tmpLis$neg))
  boxplot(tmpLis, outline=F,ylab=measurelis[i],col=c("gold","darkgreen"))
  stripchart(tmpLis, method = "jitter", vertical = TRUE, add = TRUE,pch=16)
  if(median(tmpLis$pos)>median(tmpLis$neg)){
    legend("topright",legend=wilcox.test(tmpLis$pos, tmpLis$neg,alternative='greater')$p.value)
  }else{
    legend("topright",legend=wilcox.test(tmpLis$pos, tmpLis$neg,alternative='less')$p.value)
  }
}

gene <- "FXYD2"
expr.FC <- mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta])/mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])
expr.pval <- wilcox.test(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta],patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])$p.value
measurelis <- c("NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","NormalizedFirstDepolarizationCapacitance_fF.pF","LateDepolarizationCapacitance","FirstDepolarizationCapacitance_fF")
pval_V <- c()
measure_V <- c()
FC_V <- c()
gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
for(i in 1:length(measurelis)){
  datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
  cell_num <- lengths(datalis)
# if(length(datalis$pos)>1 && length(datalis$neg)>1){
  datalis$pos <- as.numeric(as.character(datalis$pos))
  datalis$neg <- as.numeric(as.character(datalis$neg))
  datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
  datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
  measure_V <- c(measure_V, measurelis[i])
  if(length(datalis$pos)>1){
    pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
  }else{
    pval <- 1
  }
  FC_V <- c(FC_V, mean(datalis$pos)/mean(datalis$neg))
  pval_V <- c(pval_V, pval)
  tmpLis <- datalis
  tmpLis$pos <- abs(as.numeric(tmpLis$pos))
  tmpLis$neg <- abs(as.numeric(tmpLis$neg))
  boxplot(tmpLis, outline=F,ylab=measurelis[i],col=c("gold","darkgreen"))
  stripchart(tmpLis, method = "jitter", vertical = TRUE, add = TRUE,pch=16)
  if(median(tmpLis$pos)>median(tmpLis$neg)){
    legend("topright",legend=wilcox.test(tmpLis$pos, tmpLis$neg,alternative='greater')$p.value)
  }else{
    legend("topright",legend=wilcox.test(tmpLis$pos, tmpLis$neg,alternative='less')$p.value)
  }
}

HNF1A.expr.cells.beta <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]>=1)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.nonexpr.cells.beta <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]==0)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])

targetGene <- c("FXYD2","A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")
cell.percent <- c()
targetGene.data <- list()
for(gene in targetGene){
  gene_HNF1A.pos.cells <- intersect(HNF1A.expr.cells.beta, colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)])
  gene_HNF1A.neg.cells <- intersect(HNF1A.nonexpr.cells.beta, colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)])
  cell.percent <- c(cell.percent, length(gene_HNF1A.pos.cells)/length(HNF1A.expr.cells.beta))
  cell.percent <- c(cell.percent, length(gene_HNF1A.neg.cells)/length(HNF1A.nonexpr.cells.beta))
  targetGene.data[[paste(gene,"+",sep='')]] <-  patch.obj@assays$RNA@scale.data[gene, HNF1A.expr.cells.beta]
  targetGene.data[[paste(gene,"-",sep='')]] <-  patch.obj@assays$RNA@scale.data[gene, HNF1A.nonexpr.cells.beta]
}
par(mfrow=c(2,1))
boxplot(targetGene.data,outline=F,las=2,col=rep(c("gold","darkgreen"),length(targetGene)))
  stripchart(tmpLis, method = "jitter", vertical = TRUE, add = TRUE,pch=16)

barplot(cell.percent,las=2,col=rep(c("gold","darkgreen"),length(targetGene)))


sodium.gene.expr.lis <- list()
pval.lis <- c()
for(gene in sodium.gene){
  sodium.gene.expr.lis[[paste(gene,".HNF1A+",sep='')]] <- patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta]
  sodium.gene.expr.lis[[paste(gene,".HNF1A-",sep='')]] <- patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta]
  pval.lis <- c(pval.lis, round(t.test(sodium.gene.expr.lis[[paste(gene,".HNF1A+",sep='')]], sodium.gene.expr.lis[[paste(gene,".HNF1A-",sep='')]],alternative="greater")$p.value,digits=3))
}
boxplot(sodium.gene.expr.lis,outline=F,col=rep(c("gold","darkgreen")),las=2,ylab='expression')
star_lis <- rep("",length(sodium.gene))
star_lis[which(pval.lis<=0.05)] <- "*"
text(seq(1.5,6.5,2),2,star_lis)
legend("topright",legend=c("HNF1A +","HNF1A -"),col=c("gold","darkgreen"),lwd=4)


print(gene)
result <- data.frame(gene=gene,measure=measure_V,FC=FC_V,pval=pval_V)
result <- rbind(result, c(gene,"patchseq.expr",expr.FC,expr.pval))
result$measure <- mapvalues(result$measure,from=namestransfer$from, to=namestransfer$to)
result$gene <- factor(result$gene, levels=sort(select.GSEA.terms.gene.expr.betaPeak))
result$pval <- as.numeric(result$pval)
result$FC <- as.numeric(result$FC)
result$log2FC <- log2(result$FC)
M <- dcast(result,gene~measure)
M <- M[,-1]
M <- M[,-9]
rownames(M) <- "HNF1A"
M.HNF1A <- M

library(rlist)
library(plyr)
library(dplyr)
result.df <- list.rbind(result.Lis)
result.df$measure <- mapvalues(result.df$measure,from=namestransfer$from, to=namestransfer$to)
result.df$gene <- factor(result.df$gene, levels=sort(select.GSEA.terms.gene.expr.betaPeak))
result.df$pval <- as.numeric(result.df$pval)
result.df$FC <- as.numeric(result.df$FC)
result.df$log2FC <- log2(result.df$FC)
M <- dcast(result.df,gene~measure)
M <- M[which(!is.na(M[,1])),]
rownames(M) <- M[,1]
M <- M[,-1]
M <- M[,-9]
measurement.similar2HNF1A <- cor(t(M),t(M.HNF1A)) %>% .[order(.[,1],decreasing=T),]
measurement.similar2HNF1A.06 <- names(measurement.similar2HNF1A)[which(measurement.similar2HNF1A>=0.6)]
annot <- c()
for(gene in sort(select.GSEA.terms.gene.expr.betaPeak)){
  tmp <- paste(unique(gene.group.df[which(gene.group.df[,2]==gene),1]),collapse=',')
  annot <- c(annot,tmp)
}
toPlot <- merge(result.df,gene.group.df,by='gene')
toPlot <- toPlot[complete.cases(toPlot),]
toPlot$biggroup <- factor(toPlot$biggroup, levels=c("sodium","calcium","potassium","voltage"))
toPlot$measure <- factor(toPlot$measure, levels=(c("patchseq.expr","Peak Na+ current","Na+ conductance","Early Ca2+ current","Late Ca2+ current","Ca2+ entry","Exocytosis norm Ca2+","Early exocytosis","Late exocytosis","Total Exocitosis","Cell size")))
sigMeasure.geens <- unique(subset(toPlot,pval<=0.05)$gene)
sigMeasure.HNF1A.geens <- intersect(select.GSEA.terms.gene.expr.betaPeak.HNF1A, sigMeasure.geens)
sigMeasure.HNF1A.cor06.geens <- intersect(measurement.similar2HNF1A.06, sigMeasure.HNF1A.geens)

# HNF1A+ FXYD2+ -> less Na+ activity ? less NA+ current inside cells -> more excitable -> more ins secretion

# HNF1A- FXYD2- -> more Na+ activity ? more Na+ current inside cells -> less excitable -> less ins secretion


pdf("ion_channel.isletpeakGene.pdf",8,120)
ggplot(toPlot) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(biggroup),scales = 'free', space='free')
dev.off()
pdf("ion_channel.isletpeakGene.significant.pdf",8,60)
rbind(subset(toPlot,pval<=0.05 & measure!="patchseq.expr"), subset(toPlot,measure=="patchseq.expr" & gene %in% sigMeasure.geens)) %>% ggplot(.) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(biggroup), scales = "free", space='free')
dev.off()

pdf("ion_channel.isletpeakGene.HNF1Amotif.pdf",8,30)
rbind(subset(toPlot,gene %in% sigMeasure.HNF1A.geens & measure!="patchseq.expr"), subset(toPlot,measure=="patchseq.expr" & gene %in% sigMeasure.HNF1A.geens)) %>% ggplot(.) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(biggroup), scales = "free", space='free')
dev.off()
pdf("ion_channel.isletpeakGene.HNF1Amotif.significant.pdf",8,20)
rbind(subset(toPlot,pval<=0.05 & gene %in% sigMeasure.HNF1A.geens & measure!="patchseq.expr"), subset(toPlot,measure=="patchseq.expr" & gene %in% sigMeasure.HNF1A.geens)) %>% ggplot(.) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(biggroup), scales = "free", space='free')
dev.off()

pdf("ion_channel.isletpeakGene.HNF1Amotif.cor06.pdf",8,10)
rbind(subset(toPlot,gene %in% sigMeasure.HNF1A.cor06.geens & measure!="patchseq.expr"), subset(toPlot,measure=="patchseq.expr" & gene %in% sigMeasure.HNF1A.cor06.geens)) %>% ggplot(.) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(biggroup), scales = "free", space='free')
dev.off()
pdf("ion_channel.isletpeakGene.HNF1Amotif.significant.cor06.pdf",8,10)
rbind(subset(toPlot,pval<=0.05 & gene %in% sigMeasure.HNF1A.cor06.geens & measure!="patchseq.expr"), subset(toPlot,measure=="patchseq.expr" & gene %in% sigMeasure.HNF1A.cor06.geens)) %>% ggplot(.) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-1,1),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+facet_grid(rows = vars(biggroup), scales = "free", space='free')
dev.off()

# toPlot <- merge(result.df, gene.group,by="gene") %>% .[complete.cases(.),]
toPlot$gene <- factor(toPlot$gene, levels=unique(as.character(gene.group$gene)))
toPlot$group <- factor(toPlot$group,levels=unique(gene.group$group))
toPlot$log2FC <- log2(toPlot$FC)


p.lis <- list()
group.V <- unique(gene.group$group)
for(i in 1:length(group.V)){
  p.lis[[i]] <- subset(toPlot, group==group.V[i]) %>% ggplot(.) + aes(measure,gene,color=log2FC,size=-log10(pval))+geom_point()+scale_color_gradient2(low="steelblue",mid='white',high="red",limits=c(-2,2),oob=scales::squish)+theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+ggtitle(group.V[i])
}
grid.arrange(grobs=p.lis,ncol=4)

term.lis <- c()
ATPase.FXYD2.term.geneLis <- list()
for(term in names(msig.db)[which(grepl("GO_",names(msig.db)) & grepl("ATPASE",names(msig.db)))]){
  if(length(which(msig.db[[term]]=="FXYD2"))>0){
    term.lis <- c(term.lis, term)
    ATPase.FXYD2.term.geneLis[[term]] <- data.frame(term=term, gene=msig.db[[term]])
  }
}
ATPase.gene <- sort(rowSums(patch.obj@assays$RNA@counts[intersect(rownames(patch.obj@assays$RNA@counts), as.character(unique(list.rbind(ATPase.FXYD2.term.geneLis)$gene))),]),decreasing=T)
sort(table(subset(list.rbind(ATPase.FXYD2.term.geneLis), gene %in% names(ATPase.gene)[1:65])$gene))
patchseq.gene.df <- data.frame(gene=c("SCN1B","SCN2A","SCN3A","SCNM1","SCN3B","SCN9A","KCNJ8","KCNJ11","ABCC8","ABCC9","CACNA1A","CACNA1C","CACNA1D","CACNA1H","CACNA2D1","CACNA2D2","CACNB2","FXYD2","ATP1B3","ATP1B1","ATP1A1"),
                               group=c(rep("Na+ channels",6), rep("ATP-sensitive K+ channel",4),rep("Ca+ channels", 7),rep("ATPase",4)))

patchseq.gene.sub <- c("SCN3A","KCNJ8","ABCC9","CACNA1A","FXYD2","ATP1A1")
library(edgeR)
patch.obj.cpm <- cpm(patch.obj@assays$RNA@counts)
HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]>=1)]
HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]==0)]
HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
cell.percent <- c()
targetGene.data <- list()
pval <- c()
star <- rep("",length(patchseq.gene.df$gene)+1)
names(star) <- patchseq.gene.df$gene
for(gene in c(patchseq.gene.df$gene,"RBP4")){
  gene_HNF1A.pos.cells <- intersect(HNF1A.expr.cells.beta, colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)])
  gene_HNF1A.neg.cells <- intersect(HNF1A.nonexpr.cells.beta, colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)])
  cell.percent <- c(cell.percent, length(gene_HNF1A.pos.cells)/length(HNF1A.expr.cells.beta))
  cell.percent <- c(cell.percent, length(gene_HNF1A.neg.cells)/length(HNF1A.nonexpr.cells.beta))
  # targetGene.data[[paste(gene,"+",sep='')]] <-  patch.obj@assays$RNA@scale.data[gene, HNF1A.expr.cells.beta]
  # targetGene.data[[paste(gene,"-",sep='')]] <-  patch.obj@assays$RNA@scale.data[gene, HNF1A.nonexpr.cells.beta]
  tmp.pos <- log2(patch.obj.cpm[gene, HNF1A.expr.cells.beta]+1)
  tmp.neg <- log2(patch.obj.cpm[gene, HNF1A.nonexpr.cells.beta]+1)
  targetGene.data[[paste(gene,"+",sep='')]] <-  tmp.pos[which(tmp.pos!=0)]
  targetGene.data[[paste(gene,"-",sep='')]] <-  tmp.neg[which(tmp.neg!=0)]
  if(median(targetGene.data[[paste(gene,"+",sep='')]])>median(targetGene.data[[paste(gene,"-",sep='')]])){
    cur.pval <-wilcox.test(targetGene.data[[paste(gene,"+",sep='')]], targetGene.data[[paste(gene,"-",sep='')]],alternative='greater')$p.value
  }else{
    cur.pval <-wilcox.test(targetGene.data[[paste(gene,"+",sep='')]], targetGene.data[[paste(gene,"-",sep='')]],alternative='less')$p.value
  }
  pval <- c(pval,cur.pval)
  if(cur.pval<=0.05){star[gene]<-"*"}
}
pdf("selectgene.manual.HNF1A_expr.pdf",12,6)
par(mfrow=c(2,1))
boxplot(targetGene.data,las=2,outline=F,col=rep(c("gold","darkgreen"),nrow(patchseq.gene.df)),ylab='log2(CPM+1)',names=paste(names(targetGene.data),lengths(targetGene.data)))
text(seq(1.5,length(targetGene.data),2), 12,label=star)
barplot(cell.percent,las=2,col=rep(c("gold","darkgreen"), nrow(patchseq.gene.df)),ylab='fraction of HNF1A beta cells')
dev.off()

targetGene <- c("FXYD2","A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")
HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]>=1)]
HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts["HNF1A",]==0)]
HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
cell.percent <- c()
targetGene.data <- list()
pval <- c()
star <- rep("",length(targetGene))
names(star) <- targetGene
for(gene in targetGene){
  gene_HNF1A.pos.cells <- intersect(HNF1A.expr.cells.beta, colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)])
  gene_HNF1A.neg.cells <- intersect(HNF1A.nonexpr.cells.beta, colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)])
  cell.percent <- c(cell.percent, length(gene_HNF1A.pos.cells)/length(HNF1A.expr.cells.beta))
  cell.percent <- c(cell.percent, length(gene_HNF1A.neg.cells)/length(HNF1A.nonexpr.cells.beta))
  targetGene.data[[paste(gene,"+",sep='')]] <-  patch.obj@assays$RNA@scale.data[gene, HNF1A.expr.cells.beta]
  targetGene.data[[paste(gene,"-",sep='')]] <-  patch.obj@assays$RNA@scale.data[gene, HNF1A.nonexpr.cells.beta]
  # tmp.pos <- log2(patch.obj.cpm[gene, HNF1A.expr.cells.beta]+1)
  # tmp.neg <- log2(patch.obj.cpm[gene, HNF1A.nonexpr.cells.beta]+1)
  # targetGene.data[[paste(gene,"+",sep='')]] <-  tmp.pos[which(tmp.pos!=0)]
  # targetGene.data[[paste(gene,"-",sep='')]] <-  tmp.neg[which(tmp.neg!=0)]
  if(median(targetGene.data[[paste(gene,"+",sep='')]])>median(targetGene.data[[paste(gene,"-",sep='')]])){
    cur.pval <-wilcox.test(targetGene.data[[paste(gene,"+",sep='')]], targetGene.data[[paste(gene,"-",sep='')]],alternative='greater')$p.value
  }else{
    cur.pval <-wilcox.test(targetGene.data[[paste(gene,"+",sep='')]], targetGene.data[[paste(gene,"-",sep='')]],alternative='less')$p.value
  }
  pval <- c(pval,cur.pval)
  if(cur.pval<=0.05 & cur.pval>0.01){star[gene]<-"*"}
  if(cur.pval<=0.01 & cur.pval>0.001){star[gene]<-"**"}
  if(cur.pval<=0.001){star[gene]<-"***"}
}
pdf("HNF1A.targetGene.expr_peakNa.pdf",15,8)
par(mfrow=c(2,1))
boxplot(targetGene.data,las=2,outline=F,col=rep(c("gold","darkgreen"),length(targetGene)),ylab='normalized transcripts',names=paste(names(targetGene.data),lengths(targetGene.data)),ylim=c(-2,6))
stripchart(targetGene.data, method = "jitter", vertical = TRUE, add = TRUE,pch=16,cex=0.5)
text(seq(1.5,length(targetGene.data),2), 5.5,label=star,col='red')
# barplot(cell.percent,las=2,col=rep(c("gold","darkgreen"), nrow(patchseq.gene.df)),ylab='fraction of HNF1A beta cells')
# ∗∗∗p < 0.001, ∗∗p < 0.01, ∗p < 0.05 (Mann-Whitney U test with BH correction).

target.scaled.lis.targetGene <- list()
target.scaled.lis.targetGene.allbeta <- list()
pval.lis.targetGene <- c()
pval.lis.targetGene.allbeta <- c()
for(gene in targetGene){
  betacells <- rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")]
  HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.expr.cells.Hbeta <- intersect(HNF1A.expr.cells.beta, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" &  patch.obj@meta.data$DiabetesStatus=="healthy")])
  HNF1A.nonexpr.cells.Hbeta <- intersect(HNF1A.nonexpr.cells.beta, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" & patch.obj@meta.data$DiabetesStatus=="healthy")])
  if(length(HNF1A.expr.cells.beta)>179){
    HNF1A.expr.cells.beta <- names(sort(patch.obj@assays$RNA@counts[gene,betacells],decreasing=T))[1:179]
    HNF1A.nonexpr.cells.beta <- setdiff(betacells,HNF1A.expr.cells.beta)
  }
  target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.expr.cells.Hbeta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"]
  target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.nonexpr.cells.Hbeta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"]
  pval.lis.targetGene <- c(pval.lis.targetGene, round(wilcox.test(target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]], target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]])$p.value,digits=3))
  target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]] <- abs(patch.obj@meta.data[HNF1A.expr.cells.beta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"])
  target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]] <- abs(patch.obj@meta.data[HNF1A.nonexpr.cells.beta,"NormalizedPeakSodiumCurrentAmplitude_pA.pF"])
  pval.lis.targetGene.allbeta <- c(pval.lis.targetGene.allbeta, round(wilcox.test(target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]], target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]],alternative='less')$p.value,digits=3))

}
boxplot(target.scaled.lis.targetGene.allbeta,las=2,col=rep(c("steelblue","grey"),20),outline=F, ylab="Peak Na+ Current",ylim=c(0,50))
stripchart(target.scaled.lis.targetGene.allbeta, method = "jitter", vertical = TRUE, add = TRUE,pch=16,cex=0.5)
star_lis <- rep("",length(sodium.gene))
star_lis[which(pval.lis.targetGene.allbeta<0.05 & pval.lis.targetGene.allbeta>=0.01)] <- "*"
star_lis[which(pval.lis.targetGene.allbeta<0.01 & pval.lis.targetGene.allbeta>=0.001)] <- "**"
star_lis[which(pval.lis.targetGene.allbeta<=0.001)] <- "***"
text(seq(1.5,39.5,2),49,star_lis,col='red')
legend("topright",legend=c("+","-"),col=c("gold","darkgreen"),lwd=4)
dev.off()


pdf("selectgene.manual.pdf",16,3)
par(mfrow=c(1,9))
for(gene in patchseq.gene.sub){
  expr.FC <- mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta])/mean(patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])
  expr.pval <- wilcox.test(patch.obj@assays$RNA@scale.data[gene,HNF1A.expr.cells.beta],patch.obj@assays$RNA@scale.data[gene,HNF1A.nonexpr.cells.beta])$p.value
  measurelis <- c("NormalizedPeakSodiumCurrentAmplitude_pA.pF","NormalizedSodiumChannelConductance_pS.pF","CalciumIntegralNormalizedtoCellSize_pC.pF","NormalizedEarlyPeakCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumCurrentAmplitude_pA.pF","NormalizedLateCalciumChannelConductance_pS.pF","NormalizedFirstDepolarizationCapacitance_fF.pF","LateDepolarizationCapacitance","FirstDepolarizationCapacitance_fF")
  pval_V <- c()
  measure_V <- c()
  FC_V <- c()
  gene.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  gene.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  gene.expr.cells.cellType <- intersect(gene.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  gene.nonexpr.cells.cellType <- intersect(gene.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  betacells <- rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")]
  if(length(gene.expr.cells.cellType)>179){
    gene.expr.cells.cellType <- names(sort(patch.obj@assays$RNA@counts[gene, betacells],decreasing=T))[1:179]
    gene.nonexpr.cells.cellType <- setdiff(betacells,gene.expr.cells.cellType)
  }
  for(i in 1:length(measurelis)){
    datalis <- list(pos=as.character(patch.obj@meta.data[gene.expr.cells.cellType,measurelis[i]]), neg=as.character(patch.obj@meta.data[gene.nonexpr.cells.cellType,measurelis[i]]))
    cell_num <- lengths(datalis)
  # if(length(datalis$pos)>1 && length(datalis$neg)>1){
    datalis$pos <- as.numeric(as.character(datalis$pos))
    datalis$neg <- as.numeric(as.character(datalis$neg))
    datalis$pos <- datalis$pos[complete.cases(datalis$pos)]
    datalis$neg <- datalis$neg[complete.cases(datalis$neg)]
    measure_V <- c(measure_V, measurelis[i])
    if(length(datalis$pos)>1){
      pval <- wilcox.test(datalis$pos, datalis$neg,na.rm=TRUE, paired=FALSE, exact=FALSE, conf.int=TRUE)$p.value
    }else{
      pval <- 1
    }
    FC_V <- c(FC_V, mean(datalis$pos)/mean(datalis$neg))
    pval_V <- c(pval_V, pval)
    tmpLis <- datalis
    tmpLis$pos <- abs(as.numeric(tmpLis$pos))
    tmpLis$neg <- abs(as.numeric(tmpLis$neg))
    boxplot(tmpLis, outline=F,ylab=measurelis[i],col=c("gold","darkgreen"),main=gene,names=c(lengths(tmpLis)))
    stripchart(tmpLis, method = "jitter", vertical = TRUE, add = TRUE,pch=16)
    if(median(tmpLis$pos)>median(tmpLis$neg)){
      cur.pval <- round(wilcox.test(tmpLis$pos, tmpLis$neg,alternative='greater')$p.value,digits=3)
      if(cur.pval<=0.05){legend("topright",legend=cur.pval,col='red')}
    }else{
      cur.pval <- round(wilcox.test(tmpLis$pos, tmpLis$neg,alternative='less')$p.value,digits=3)
      if(cur.pval<=0.05){legend("topright",legend=cur.pval,col='red')}
    }
  }
}
dev.off()
library(reshape2)
Aggregate.7celltype.RNA.rpkm <- readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/Aggregate.7celltype.RNA.rpkm")
datatoPlot.scale <- t(apply(Aggregate.7celltype.RNA.rpkm[patchseq.gene.df$gene,],1,scale))
colnames(datatoPlot.scale) <- colnames(Aggregate.7celltype.RNA.rpkm)
datatoPlot.scale <- melt(datatoPlot.scale)
datatoPlot.scale$ID <- paste(datatoPlot.scale$Var1, datatoPlot.scale$Var2,sep=',')
datatoPlot <- melt(Aggregate.7celltype.RNA.rpkm[patchseq.gene.df$gene,])
datatoPlot$ID <- paste(datatoPlot$Var1, datatoPlot$Var2,sep=',')
datatoPlot.merge <- merge(datatoPlot,datatoPlot.scale,by='ID')
datatoPlot.merge$Var2.x <- factor(datatoPlot.merge$Var2.x,levels=rev(as.character(unique(datatoPlot$Var2))))
datatoPlot.merge$Var1.x <- factor(datatoPlot.merge$Var1.x,levels=as.character(patchseq.gene.df$gene))
colnames(datatoPlot.merge)[4] <- "RPKM"
colnames(datatoPlot.merge)[7] <- "scaled_expr"
pdf("selectgene.manual.bubble.expr.pdf",5,7)
ggplot(datatoPlot.merge)+aes(Var2.x,Var1.x,size=log2(RPKM+1),color=scaled_expr)+geom_point()+scale_color_gradientn(colours = c("white","red"))+theme_bw()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size=10))
dev.off()
pdf("selectgene.manual.bubble.expr.rotate.pdf",7,4)
ggplot(datatoPlot.merge)+aes(Var1.x,Var2.x,,size=log2(RPKM+1),color=scaled_expr)+geom_point()+scale_color_gradientn(colours = c("steelblue","white","red"))+theme_bw()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size=10))
dev.off()



gsub(".HGNC.download.txt","",list.files("/mnt/rstor/genetics/JinLab/ssz20/genetics01/tmp_download/ionChanel.HGNC"))

png("HNF1A.targetGene.PeakSodiumCurrent.boxplot.allbeta.png",1200,600)
par(mfrow=c(1,1))
par(mar=c(15,5,5,5))
boxplot(target.scaled.lis.targetGene.allbeta,las=2,col=rep(c("pink","darkgreen"),20),outline=F, ylab="Peak Na+ Current")
star_lis <- rep("",length(HNF1A.targets))
star_lis[which(pval.lis.targetGene.allbeta<=0.05)] <- "*"
text(seq(1.5,39.5,2),-30,star_lis)
dev.off()


"CellSize_pF"
target.scaled.lis.targetGene <- list()
target.scaled.lis.targetGene.allbeta <- list()
pval.lis.targetGene <- c()
pval.lis.targetGene.allbeta <- c()
for(gene in HNF1A.targets){
  HNF1A.expr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]>=1)]
  HNF1A.nonexpr.cells <- colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[gene,]==0)]
  HNF1A.expr.cells.beta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.nonexpr.cells.beta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  HNF1A.expr.cells.Hbeta <- intersect(HNF1A.expr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" &  patch.obj@meta.data$DiabetesStatus=="healthy")])
  HNF1A.nonexpr.cells.Hbeta <- intersect(HNF1A.nonexpr.cells, rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta" & patch.obj@meta.data$DiabetesStatus=="healthy")])
  target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.expr.cells.Hbeta,"CellSize_pF"]
  target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]] <- patch.obj@meta.data[HNF1A.nonexpr.cells.Hbeta,"CellSize_pF"]
  pval.lis.targetGene <- c(pval.lis.targetGene, round(wilcox.test(target.scaled.lis.targetGene[[paste(gene,"+",length(HNF1A.expr.cells.Hbeta))]], target.scaled.lis.targetGene[[paste(gene,"-",length(HNF1A.nonexpr.cells.Hbeta))]])$p.value,digits=3))
  target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]] <- patch.obj@meta.data[HNF1A.expr.cells.beta,"CellSize_pF"]
  target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]] <- patch.obj@meta.data[HNF1A.nonexpr.cells.beta,"CellSize_pF"]
  pval.lis.targetGene.allbeta <- c(pval.lis.targetGene.allbeta, round(wilcox.test(target.scaled.lis.targetGene.allbeta[[paste(gene,"+",length(HNF1A.expr.cells.beta))]], target.scaled.lis.targetGene.allbeta[[paste(gene,"-",length(HNF1A.nonexpr.cells.beta))]])$p.value,digits=3))

}
png("HNF1A.targetGene.CellSize_pF.boxplot.png",800,400)
par(mfrow=c(1,1))
par(mar=c(15,5,5,5))
boxplot(target.scaled.lis.targetGene,las=2,col=rep(c("pink","darkgreen"),20),outline=F, ylab="Peak Na+ Current")
star_lis <- rep("",length(HNF1A.targets))
star_lis[which(pval.lis.targetGene<=0.05)] <- "*"
text(seq(1.5,39.5,2),8,star_lis)
# text(x = seq(1.5,39.5,2), y = par("usr")[3] - 0.5, srt = 90, adj = 1, labels = HNF1A.targets, xpd = TRUE)
# legend("topright",legend=c("HNF1A +","HNF1A -"),col=c("pink","darkgreen"),lwd=4)
dev.off()

png("HNF1A.targetGene.CellSize_pF.boxplot.allbeta.png",800,400)
par(mfrow=c(1,1))
par(mar=c(15,5,5,5))
boxplot(target.scaled.lis.targetGene.allbeta,las=2,col=rep(c("pink","darkgreen"),20),outline=F, ylab="Peak Na+ Current")
star_lis <- rep("",length(HNF1A.targets))
star_lis[which(pval.lis.targetGene.allbeta<=0.05)] <- "*"
text(seq(1.5,39.5,2),8,star_lis)
dev.off()

## separate cells by network regulators and compare target gene expression between + and - cells
library(EZsinglecell)
library(dplyr)
library(reshape2)
# setwd("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track")
KeyVariableTFs<-rev(c("HNF1A","HNF1B","RFX6","ZBTB7A","MBD2","TCF4","CEBPD","STAT3","PPARD","NFIA","NFIC","NFYA","NFYC","TP53","MAFA","ISL1","OLIG3","NEUROD1"))
Links.all<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/Links.all")
Nodes.all<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/Nodes.all")
UP.credible<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/UP.credible")
DN.credible<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/DN.credible")
DN.toRemove<-row.names(subset(Nodes.all,cat=="DN"))[row.names(subset(Nodes.all,cat=="DN")) %in% row.names(subset(UP.credible,(X1-X2)>=0))]
DN.toRemove.2<-row.names(subset(Nodes.all,slope>=0))
UP.toRemove<-c(row.names(subset(Nodes.all,cat=="UP"))[row.names(subset(Nodes.all,cat=="UP")) %in% row.names(subset(DN.credible,(X1-X2)<=0))],"RFX6")
UP.toRemove.2<-row.names(subset(Nodes.all,slope<0))
UP.toRemove.3<-subset(Nodes.all,slope>0) %>% subset(!Nodes %in% KeyVariableTFs) %>% subset(.,qvalue>0.0001) %>% row.names

DN.d <- subset(Links.all,cat=="DN" & !Regulatee %in% DN.toRemove.2)
UP.d <- subset(Links.all,cat=="UP" & !Regulatee %in% c(UP.toRemove.2,UP.toRemove.3))
DN.d<- subset(Links.all,cat=="DN" & !Regulatee %in% DN.toRemove.2 & cat=="DN" & !Regulatee %in% DN.toRemove.2)
UP.d<- subset(Links.all,cat=="UP" & !Regulatee %in% c(UP.toRemove.2,UP.toRemove.3) & cat=="UP" & !Regulatee %in% c(UP.toRemove.2,UP.toRemove.3))
DN.regulators <- as.character(unique(DN.d$Regulator))
UP.regulators <- as.character(unique(UP.d$Regulator))

HNF1A.targets <- c("A1CF","TMED6","S100A10","PKIB","TTR","PPP1R1A","SGK2","SPRY1","KIFC3","SPON2","SMPDL3A","BHLHE41","SMIM6","RPS9","DNAJC12","FAM107B","HOPX","NEUROD1","NKX2-2","SIX3")
regulator <- "HNF1A"
targets <- HNF1A.targets
expr.cells <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[regulator,]>=1)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
nonexpr.cells <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[regulator,]==0)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
regulator.lis <- list()
pval.lis <- c()
for(gene in targets){
  if(gene %in% rownames(patch.obj@assays$RNA@scale.data)){
    regulator.lis[[paste(gene,"+")]] <- patch.obj@assays$RNA@scale.data[gene, expr.cells]
    regulator.lis[[paste(gene,"-")]] <- patch.obj@assays$RNA@scale.data[gene, nonexpr.cells]
    # pval.lis <- c(pval.lis, round(wilcox.test(regulator.lis[[paste(gene,"+")]], regulator.lis[[paste(gene,"-")]])$p.value,digits=3))
    pval.lis <- c(pval.lis, round(t.test(regulator.lis[[paste(gene,"+")]], regulator.lis[[paste(gene,"-")]],alternative='greater')$p.value,digits=3))

  }
}
HNF1A.regulators.lis <- list()
HNF1A.regulators.pval <- list()
HNF1A.regulators.lis[[regulator]] <- regulator.lis
HNF1A.regulators.pval[[regulator]] <- pval.lis
pdf("~/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Patchseq/patchseq/data/network.HNF1A.boxplot.pdf",15,6)
for(i in 1:length(HNF1A.regulators.lis)){
  par(mar=c(15,5,5,5))
  boxplot(HNF1A.regulators.lis[[i]],col=rep(c("gold","darkgreen"),length(HNF1A.regulators.pval[[i]])),outline=FALSE,las=2,main=paste(names(HNF1A.regulators.lis)[i],":",length(which(HNF1A.regulators.pval[[i]]<=0.05)),"sig/",length(HNF1A.regulators.pval[[i]]),"all",sep=''),ylab="Normalized transcripts")
  star_lis <- rep("",length(HNF1A.regulators.pval[[i]]))
  star_lis[which(HNF1A.regulators.pval[[i]]<=0.05)] <- "*"
  text(x = seq(1.5,length(HNF1A.regulators.lis[[i]])-0.5,2), y = quantile(unlist(HNF1A.regulators.lis[[i]]),prob=0.9), labels = star_lis)
  legend("topright",legend=c(paste("+:",lengths(HNF1A.regulators.lis[[i]])[1]),paste("-:",lengths(HNF1A.regulators.lis[[i]])[2])),col=c("gold","darkgreen"),lwd=4)
}
dev.off()


DN.regulators.lis <- list()
DN.regulators.pval <- c()
for(regulator in DN.regulators){
  targets <- as.character(DN.d$Regulatee[which(DN.d$Regulator==regulator)])
  expr.cells <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[regulator,]>=1)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  nonexpr.cells <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[regulator,]==0)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  regulator.lis <- list()
  pval.lis <- c()
  # pval.lis <- rep(1,length(targets))
  # names(pval.lis) <- targets
  for(gene in targets){
    if(gene %in% rownames(patch.obj@assays$RNA@scale.data)){
      regulator.lis[[paste(gene,"+")]] <- patch.obj@assays$RNA@scale.data[gene, expr.cells]
      regulator.lis[[paste(gene,"-")]] <- patch.obj@assays$RNA@scale.data[gene, nonexpr.cells]
      # pval.lis <- c(pval.lis, round(wilcox.test(regulator.lis[[paste(gene,"+")]], regulator.lis[[paste(gene,"-")]])$p.value,digits=3))
      pval.lis <- c(pval.lis, round(t.test(regulator.lis[[paste(gene,"+")]], regulator.lis[[paste(gene,"-")]],alternative='greater')$p.value,digits=3))

    }
  }
  DN.regulators.lis[[regulator]] <- regulator.lis
  DN.regulators.pval[[regulator]] <- pval.lis
}


UP.regulators.lis <- list()
UP.regulators.pval <- c()
for(regulator in UP.regulators){
  targets <- as.character(UP.d$Regulatee[which(UP.d$Regulator==regulator)])
  expr.cells <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[regulator,]>=1)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  nonexpr.cells <- intersect(colnames(patch.obj@assays$RNA@counts)[which(patch.obj@assays$RNA@counts[regulator,]==0)], rownames(patch.obj@meta.data)[which(patch.obj@meta.data$cell_type=="beta")])
  regulator.lis <- list()
  pval.lis <- c()
  # pval.lis <- rep(1,length(targets))
  # names(pval.lis) <- targets
  for(gene in targets){
    if(gene %in% rownames(patch.obj@assays$RNA@scale.data)){
      regulator.lis[[paste(gene,"+")]] <- patch.obj@assays$RNA@scale.data[gene, expr.cells]
      regulator.lis[[paste(gene,"-")]] <- patch.obj@assays$RNA@scale.data[gene, nonexpr.cells]
      # pval.lis <- c(pval.lis, round(wilcox.test(regulator.lis[[paste(gene,"+")]], regulator.lis[[paste(gene,"-")]])$p.value,digits=3))
      pval.lis <- c(pval.lis, round(t.test(regulator.lis[[paste(gene,"+")]], regulator.lis[[paste(gene,"-")]],alternative='greater')$p.value,digits=3))
    }
  }
  UP.regulators.lis[[regulator]] <- regulator.lis
  UP.regulators.pval[[regulator]] <- pval.lis
}

# plot
pdf("~/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Patchseq/patchseq/data/network.UP.boxplot.pdf",15,6)
for(i in 1:length(UP.regulators.lis)){
  par(mar=c(15,5,5,5))
  boxplot(UP.regulators.lis[[i]],col=rep(c("gold","darkgreen"),length(UP.regulators.pval[[i]])),outline=FALSE,las=2,main=paste(names(UP.regulators.lis)[i],":",length(which(UP.regulators.pval[[i]]<=0.05)),"sig/",length(UP.regulators.pval[[i]]),"all",sep=''),ylab="Normalized transcripts")
  star_lis <- rep("",length(UP.regulators.pval[[i]]))
  star_lis[which(UP.regulators.pval[[i]]<=0.05)] <- "*"
  text(x = seq(1.5,length(UP.regulators.lis[[i]])-0.5,2), y = quantile(unlist(UP.regulators.lis[[i]]),prob=0.9), labels = star_lis)
  legend("topright",legend=c(paste("+:",lengths(UP.regulators.lis[[i]])[1]),paste("-:",lengths(UP.regulators.lis[[i]])[2])),col=c("gold","darkgreen"),lwd=4)
}
dev.off()


pdf("~/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Patchseq/patchseq/data/network.DN.boxplot.pdf",15,6)
for(i in 1:length(DN.regulators.lis)){
  par(mar=c(15,5,5,5))
  boxplot(DN.regulators.lis[[i]],col=rep(c("gold","darkgreen"),length(DN.regulators.pval[[i]])),outline=FALSE,las=2,main=paste(names(DN.regulators.lis)[i],":",length(which(DN.regulators.pval[[i]]<=0.05)),"sig/",length(DN.regulators.pval[[i]]),"all",sep=''),ylab="Normalized transcripts")
  star_lis <- rep("",length(DN.regulators.pval[[i]]))
  star_lis[which(DN.regulators.pval[[i]]<=0.05)] <- "*"
  text(x = seq(1.5,length(DN.regulators.lis[[i]])-0.5,2), y = quantile(unlist(DN.regulators.lis[[i]]),prob=0.9), labels = star_lis)
  legend("topright",legend=c(paste("+:",lengths(DN.regulators.lis[[i]])[1]),paste("-:",lengths(DN.regulators.lis[[i]])[2])),col=c("gold","darkgreen"),lwd=4)
}
dev.off()

dat <- data.frame(
  "Healthy" = c(26, 190),
  "T2D" = c(6, 90),
  row.names = c("HNF1A+", "HNF1A-"),
  stringsAsFactors = FALSE
)
colnames(dat) <- c("Healthy", "T2D")
test <- fisher.test(dat)
test
p-value = 0.1569


peakAnchorLis.merge <- list()
peakAnchorLis.merge[["H3K4me3"]] <- peakAnchorLis[["EndoC_H3K4me3_SE"]]
peakAnchorLis.merge[["H3K27ac"]] <- peakAnchorLis[["EndoC_H3K27ac_SE"]]
peakAnchorLis.merge[["H3K4me1"]] <- peakAnchorLis[["EndoC_H3K4me1_PE"]]
peakAnchorLis.merge[["H3K27me3"]] <- peakAnchorLis[["EndoC_H3K27me3_PE"]]
peakAnchorLis.merge[["H3K9me3"]] <- peakAnchorLis[["EndoC_H3K9me3_PE"]]
peakAnchorLis.merge[["H3K9ac"]] <- peakAnchorLis[["EndoCrinePancreas.H3K9ac.46years"]]
peakAnchorLis.merge[["H3K79me2"]] <- peakAnchorLis[["EndoC_H3K79me2_PE"]]
peakAnchorLis.merge[["CTCF"]] <- peakAnchorLis[["InVitroBeta.GSM5331181"]]
peakAnchorLis.merge[["ATAC"]] <- peakAnchorLis[["IsletBeta.ATAC"]]

for(name in c("H3K4me3","H3K27ac","H3K4me1","H3K27me3","H3K9me3","H3K9ac","H3K79me2","CTCF")){
        peakAnchorLis.merge[[name]] <- unique(unlist(peakAnchorLis[names(peakAnchorLis)[which(grepl(name,names(peakAnchorLis)))]]))
}
peakAnchorLis.merge[["ATAC"]] <- unique(unlist(peakAnchorLis[c("IsletAlpha.ATAC","IsletBeta.ATAC")]))

selectName <- c("EndoC_H3K4me3_SE", "EndoC_H3K27ac_SE", "EndoC_H3K4me1_PE", "EndoC_H3K36me3_PE_peaks.narrowPeak", "EndoC_H3K27me3_PE", "EndoC_H3K9me3_PE", "EndoCrinePancreas.H3K9ac.46years", "EndoC_H3K79me2_PE", "InVitroBeta.GSM5331181", "IsletBeta.ATAC", "IsletAlpha.ATAC")
Loop.sumary.df <- subset(Loop.sumary.df, name1 %in% selectName & name2 %in% selectName)

peakName <- names(peakAnchorLis.merge)
Loop.sumary <- list()
for(name1 in peakName){
        for(name2 in peakName){
                Loop.sumary[[paste(name1,name2,sep=',')]] <- data.frame(name1=name1, name2=name2,Conserve=nrow(subset(ConservedLoop, A1 %in% peakAnchorLis.merge[[name1]] | A2 %in% peakAnchorLis.merge[[name2]])), NonConserveTwoSide=nrow(subset(NonConservedLoop, A1 %in% peakAnchorLis.merge[[name1]] | A2 %in% peakAnchorLis.merge[[name2]])))
        }
}

Loop.sumary.df <- list.rbind(Loop.sumary)
Loop.sumary.df <- subset(Loop.sumary.df, name1!="EndoC_CTCF_SE" & name2!="EndoC_CTCF_SE")
Loop.sumary.df[,3] <- Loop.sumary.df[,3]/nrow(ConservedLoop)
Loop.sumary.df[,4] <- Loop.sumary.df[,4]/nrow(NonConservedLoop)
Loop.sumary.df$Conserve_NonConserve <- Loop.sumary.df[,3]/Loop.sumary.df[,4]
Loop.sumary.df$NonConserve_Conserve <- Loop.sumary.df[,4]/Loop.sumary.df[,3]
run_fisherExact <- function(V){
  V <- as.numeric(as.character(V))
  dat <- data.frame("withPeak" = c(V[1], V[2]),"NOPeak" = c(V[3], V[4]), row.names = c("conserve", "Non-conserve"), stringsAsFactors = FALSE)
  colnames(dat) <- c("withPeak", "NOPeak")
  test <- fisher.test(dat)
  return(test$p.value)
}
tmp <- data.frame(nrow(ConservedLoop)*Loop.sumary.df$Conserve, nrow(NonConservedLoop)*Loop.sumary.df$NonConserveTwoSide, nrow(ConservedLoop)*(1-Loop.sumary.df$Conserve), nrow(NonConservedLoop)*(1-Loop.sumary.df$NonConserveTwoSide),stringsAsFactors=F)
Loop.sumary.df$pval <- apply(tmp,1,run_fisherExact)
star <- rep("",nrow(Loop.sumary.df))
star[which(Loop.sumary.df$pval<=0.01)] <- "*"
Loop.sumary.df$star <- star

library(reshape2)
ConserveEnrichM <- dcast(Loop.sumary.df,name1 ~ name2, value.var="Conserve_NonConserve")
rownames(ConserveEnrichM) <- ConserveEnrichM[,1]
ConserveEnrichM <- as.matrix(ConserveEnrichM[,-1])
peak.order <- rownames(ConserveEnrichM)[hclust(dist(as.matrix(ConserveEnrichM)))$order]
Loop.sumary.df$name1 <- factor(Loop.sumary.df$name1,levels=peak.order)
Loop.sumary.df$name2 <- factor(Loop.sumary.df$name2,levels=peak.order)
library(ggplot2)
ggplot(Loop.sumary.df)+aes(name1,name2,fill=log2(Conserve_NonConserve))+geom_tile()+scale_fill_gradient2(low="blue",mid="white",high="red",oob = scales::squish,limits=c(-0.5,0.5))+theme_bw()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(Loop.sumary.df)+aes(name1,name2,fill=log2(Conserve_NonConserve),label=star)+geom_tile()+scale_fill_gradient2(low="blue",mid="white",high="red")+theme_bw()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+geom_text()



# Vertical box plot
pdf("HNF1A.donor.fraction.boxplot.pdf")
boxplot(mylist,outline=F,ylim=c(0,100),ylab='Fraction of HNF1A+ beta cells (%)',main=paste("oneside t.test pval:",t.test(mylist[[1]], mylist[[2]],alternative='greater')$p.value))

stripchart(mylist,  method = "jitter", # Random noise
                      pch = 19,          # Pch symbols
                      col = "red",           # Color of the symbol
                      vertical = TRUE,   # Vertical mode
                      add = TRUE)        # Add it over
dev.off()

##endregion Patchseq

##region flowcytometry
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")
points_colorByDensity<-function(x1,x2,pch=20,cex=2){
        df <- data.frame(x1,x2)
        x <- densCols(x1,x2, colramp=colorRampPalette(c("darkblue","green",colorRampPalette(c("orange","red"))(1))))
        points(x1,x2,pch=pch,cex=cex,col=x,xlab='',ylab='')
}
plot_blank <- function(data="tmp"){
  plot(1:10,1:10,col='white',xaxt="n",yaxt="n",xlab="",ylab="")
}

plot_islet_fun <- function(filename,xlab,ylab,norm=FALSE,heat=FALSE,normCol){
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep='\t')
  if(norm=="FALSE"){
    plot(log10(data$B576.A+1), log10(data$R660.A+1),cex=2,pch='.',xlab=xlab,ylab=ylab,main='Islet')
    abline(lm(log10(data$R660.A+1)~log10(data$B576.A+1)+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10(data$B576.A+1), log10(data$R660.A+1),cex=2,pch='.')
    }
  }else{
    plot(log10((data$B576.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.',xlab=paste(xlab, '/',normCol,sep=''),ylab=paste(ylab, '/',normCol,sep=''),main='Islet')
    abline(lm(log10((data$R660.A+1)/(data[,normCol]+1))~log10((data$B576.A+1)/(data[,normCol]+1))+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10((data$B576.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.')
    }
  }
}

plot_EndoC_fun <- function(filename,xlab,ylab,norm=FALSE,heat=FALSE,normCol){
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep=',')
  if(norm=="FALSE"){
    plot(log10((data$YG582+1)), log10(data$R660.A+1),cex=2,pch='.',xlab=xlab,ylab=ylab,main='EndoC')
    abline(lm(log10(data$R660.A+1)~log10(data$YG582+1)+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10(data$YG582+1), log10(data$R660.A+1),cex=2,pch='.')
    }
  }else{
    plot(log10((data$YG582+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.',xlab=paste(xlab, '/',normCol,sep=''),ylab=paste(ylab, '/',normCol,sep=''),main='EndoC')
    abline(lm(log10((data$R660.A+1)/(data[,normCol]+1))~log10((data$YG582+1)/(data[,normCol]+1))+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10((data$YG582+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.')
    }
  }
}

filelis <- c("export_2021-08-19_HNF1A_islet_Cpep,2f,TTR_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A,2f,Cpep_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,Ipp1_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv"
)

file1 <- "export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv"
file2 <- "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv"
name <- "TTR"
## TTR
par(mfrow=c(2,6))
plot_EndoC_fun(file1, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")

plot_islet_fun(file2, "HNF1A",name,norm=FALSE,heat=TRUE,"V450.A")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"V450.A")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")



pdf("scatterplot.pdf",11,5)
nf <- layout(matrix(c(1:12),2,6,byrow=FALSE), widths=c(rep(4,6)), heights=c(rep(4,2), TRUE))
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv", "HNF1A","TTR",norm=FALSE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv", "HNF1A","TTR",norm=FALSE,heat=TRUE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv", "HNF1A","S100A10",norm=FALSE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv", "HNF1A","S100A10",norm=FALSE,heat=TRUE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv", "HNF1A","SIX3",norm=FALSE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv", "HNF1A","SIX3",norm=FALSE,heat=TRUE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv", "HNF1A","NEUROD1",norm=FALSE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv", "HNF1A","NEUROD1",norm=FALSE,heat=TRUE,normCol)
plot_blank()
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv", "HNF1A","NEUROD1_high",norm=FALSE,heat=TRUE,normCol)
plot_blank()
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,Ipp1_Single Cells-1_Cpep+.csv", "HNF1A","IPP1",norm=FALSE,heat=TRUE,normCol)

normCol1 <- "SSC.H"
normCol <- "SSC.H"
#"V450.A"
#"V440.A"
#FSC.A FSC.H   SSC.A SSC.H
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv", "HNF1A","TTR",norm=TRUE,heat=FALSE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv", "HNF1A","TTR",norm=TRUE,heat=FALSE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv", "HNF1A","S100A10",norm=TRUE,heat=FALSE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv", "HNF1A","S100A10",norm=TRUE,heat=FALSE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv", "HNF1A","SIX3",norm=TRUE,heat=FALSE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv", "HNF1A","SIX3",norm=TRUE,heat=FALSE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv", "HNF1A","NEUROD1",norm=TRUE,heat=FALSE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv", "HNF1A","NEUROD1",norm=TRUE,heat=FALSE,normCol)
plot_blank()
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv", "HNF1A","NEUROD1_high",norm=TRUE,heat=FALSE,normCol)
plot_blank()
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,Ipp1_Single Cells-1_Cpep+.csv", "HNF1A","IPP1",norm=TRUE,heat=FALSE,normCol)

plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv", "HNF1A","TTR",norm=TRUE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv", "HNF1A","TTR",norm=TRUE,heat=TRUE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv", "HNF1A","S100A10",norm=TRUE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv", "HNF1A","S100A10",norm=TRUE,heat=TRUE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv", "HNF1A","SIX3",norm=TRUE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv", "HNF1A","SIX3",norm=TRUE,heat=TRUE,normCol)
plot_islet_fun("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv", "HNF1A","NEUROD1",norm=TRUE,heat=TRUE,normCol1)
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv", "HNF1A","NEUROD1",norm=TRUE,heat=TRUE,normCol)
plot_blank()
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv", "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,normCol)
plot_blank()
plot_EndoC_fun("export_HNF1Atest_HNF1A,2f,Cpep,2f,Ipp1_Single Cells-1_Cpep+.csv", "HNF1A","IPP1",norm=TRUE,heat=TRUE,normCol)

dev.off()



ylab.lis <- c("TTR","None","NEUROD1","SIX3","S100A10","TTR")
xlab.lis <- c("None","HNF1A","HNF1A","HNF1A","HNF1A","HNF1A")
pdf("scatterplot.pdf",10,8)
par(mfrow=c(3,4))
for(i in 1:6){
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T)
  plot(data$B576.A, data$R660.A,cex=2,pch='.',xlab=xlab.lis[i],ylab=ylab.lis[i])
  points_colorByDensity(data$B576.A, data$R660.A,cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var(data$B576.A),digits=1)), paste("ylab var:", round(var(data$R660.A),digits=1))))
  plot(data$B576.A/data$V450.A, data$R660.A/data$V450.A,cex=2,pch='.',xlab=paste(xlab.lis[i], '/C-peptide',sep=''),ylab=paste(ylab.lis[i], '/C-peptide',sep=''))
  points_colorByDensity(data$B576.A/data$V450.A, data$R660.A/data$V450.A,cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var(data$B576.A/data$V450.A),digits=1)), paste("ylab var:", round(var(data$R660.A/data$V450.A),digits=1))))
}
for(i in 1:6){
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T)
  plot(data$B576.A, data$R660.A,cex=2,pch='.',xlab=xlab.lis[i],ylab=ylab.lis[i])
  points_colorByDensity(data$B576.A, data$R660.A,cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var(data$B576.A),digits=1)), paste("ylab var:", round(var(data$R660.A),digits=1))))
  plot(data$B576.A/data$V450.A, data$R660.A/data$V450.A,cex=2,pch='.',xlab=paste(xlab.lis[i], '/C-peptide',sep=''),ylab=paste(ylab.lis[i], '/C-peptide',sep=''),xlim=c(0,30),ylim=c(0,30))
  points_colorByDensity(data$B576.A/data$V450.A, data$R660.A/data$V450.A,cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var(data$B576.A/data$V450.A),digits=1)), paste("ylab var:", round(var(data$R660.A/data$V450.A),digits=1))))
}
for(i in 1:6){
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T)
  plot(log10((1+data$B576.A)), log10((1+data$R660.A)),cex=2,pch='.',xlab=xlab.lis[i],ylab=ylab.lis[i])
  points_colorByDensity(log10(data$B576.A), log10(data$R660.A),cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var((1+data$B576.A)),digits=1)), paste("ylab var:", round(var((1+data$R660.A)),digits=1))))
  plot(log10((data$B576.A+1)/(data$V450.A+1)), log10((1+data$R660.A)/(1+data$V450.A)),cex=2,pch='.',xlab=paste(xlab.lis[i], '/C-peptide',sep=''),ylab=paste(ylab.lis[i], '/C-peptide',sep=''))
  points_colorByDensity(log10((1+data$B576.A)/(1+data$V450.A)), log10((1+data$R660.A)/(1+data$V450.A)),cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var((1+data$B576.A)/(1+data$V450.A)),digits=1)), paste("ylab var:", round(var((1+data$R660.A)/(1+data$V450.A)),digits=1))))
}
for(i in 1:6){
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T)
  plot(log10((1+data$B576.A)), log10((1+data$R660.A)),cex=2,pch='.',xlab=xlab.lis[i],ylab=ylab.lis[i])
  points_colorByDensity(log10(data$B576.A), log10(data$R660.A),cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var((1+data$B576.A)),digits=1)), paste("ylab var:", round(var((1+data$R660.A)),digits=1))))
  abline(h=-2,lty='dashed',col='grey')
  abline(v=-2,lty='dashed',col='grey')
  plot(log10((data$B576.A+1)/(data$V450.A+1)), log10((1+data$R660.A)/(1+data$V450.A)),cex=2,pch='.',xlab=paste(xlab.lis[i], '/C-peptide',sep=''),ylab=paste(ylab.lis[i], '/C-peptide',sep=''),xlim=c(-8,4),ylim=c(-8,4))
  points_colorByDensity(log10((1+data$B576.A)/(1+data$V450.A)), log10((1+data$R660.A)/(1+data$V450.A)),cex=2,pch='.')
  legend("topright",legend=c(paste("xlab var:", round(var((1+data$B576.A)/(1+data$V450.A)),digits=1)), paste("ylab var:", round(var((1+data$R660.A)/(1+data$V450.A)),digits=1))))
  abline(h=-2,lty='dashed',col='grey')
  abline(v=-2,lty='dashed',col='grey')
}

dev.off()

# 0730
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")
plotScatter <- function(filename, xlab,ylab,normCol,type,separator="\t"){
  if(type=="EndoC"){
    name <- gsub(".csv","",gsub("export_HNF1Atest_HNF1A,2f,Cpep,2f,","",filename))
  }else{
    name <- gsub(".csv","",gsub("export_2021-08-19_HNF1A_islet_","",filename))
  }
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep=separator)
  plot(log10((1+data[,xlab])), log10((1+data[,ylab])),cex=2,pch='.',main=name)
  points_colorByDensity(log10((1+data[,xlab])), log10((1+data[,ylab])),cex=2,pch='.')

}
filelis <- c("export_2021-08-19_HNF1A_islet_Cpep,2f,TTR_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A,2f,Cpep_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv",
"export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,Ipp1_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv"
)
# 0928 data
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/0928")
# R660-A is the targe
# V-440A is Cpep
# YG582 is HNF1A
filelis <- list.files(pattern="*csv")
pdf("../0928.pdf",10,10)
par(mfrow=c(3,3))
for(i in 1:9){
  name <- gsub(".csv","",gsub("export_HNF1Atest_","",filelis[i]))
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T,sep=',')
  plot(log10((1+data$YG582.A)), log10((1+data$R660.A)),cex=2,pch='.',main=name)
  points_colorByDensity(log10(data$YG582.A), log10(data$R660.A),cex=2,pch='.')
}
# V440.A
par(mfrow=c(3,3))
for(i in 1:9){
  name <- gsub(".csv","",gsub("export_HNF1Atest_","",filelis[i]))
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T,sep=',')
  plot(log10((data$YG582.A+1)/(data$V440.A+1)), log10((1+data$R660.A)/(1+data$V440.A)),cex=2,pch='.',main=name)
  points_colorByDensity(log10((1+data$YG582.A)/(1+data$V440.A)), log10((1+data$R660.A)/(1+data$V440.A)),cex=2,pch='.')
}
# FSC.A
par(mfrow=c(3,3))
for(i in 1:9){
  name <- gsub(".csv","",gsub("export_HNF1Atest_","",filelis[i]))
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T,sep=',')
  plot(log10((data$YG582.A+1)/(data$FSC.A+1)), log10((1+data$R660.A)/(1+data$FSC.A)),cex=2,pch='.',main=name)
  points_colorByDensity(log10((1+data$YG582.A)/(1+data$FSC.A)), log10((1+data$R660.A)/(1+data$FSC.A)),cex=2,pch='.')
}
# FSC.H
par(mfrow=c(3,3))
for(i in 1:9){
  name <- gsub(".csv","",gsub("export_HNF1Atest_","",filelis[i]))
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T,sep=',')
  plot(log10((data$YG582.A+1)/(data$FSC.H+1)), log10((1+data$R660.A)/(1+data$FSC.H)),cex=2,pch='.',main=name)
  points_colorByDensity(log10((1+data$YG582.A)/(1+data$FSC.H)), log10((1+data$R660.A)/(1+data$FSC.H)),cex=2,pch='.')
}
# SSC.A
par(mfrow=c(3,3))
for(i in 1:9){
  name <- gsub(".csv","",gsub("export_HNF1Atest_","",filelis[i]))
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T,sep=',')
  plot(log10((data$YG582.A+1)/(data$SSC.A+1)), log10((1+data$R660.A)/(1+data$SSC.A)),cex=2,pch='.',main=name)
  points_colorByDensity(log10((1+data$YG582.A)/(1+data$SSC.A)), log10((1+data$R660.A)/(1+data$SSC.A)),cex=2,pch='.')
}
# SSC.H
par(mfrow=c(3,3))
for(i in 1:9){
  name <- gsub(".csv","",gsub("export_HNF1Atest_","",filelis[i]))
  data <- read.table(filelis[i],stringsAsFactors=FALSE,header=T,sep=',')
  plot(log10((data$YG582.A+1)/(data$SSC.H+1)), log10((1+data$R660.A)/(1+data$SSC.H)),cex=2,pch='.',main=name)
  points_colorByDensity(log10((1+data$YG582.A)/(1+data$SSC.H)), log10((1+data$R660.A)/(1+data$SSC.H)),cex=2,pch='.')
}
dev.off()

##region gene wise display
plot_newEndoC_fun <- function(filename,xlab,ylab,norm=FALSE,heat=FALSE,normCol){
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep=',')
  if(norm=="FALSE"){
    plot(log10((data$YG582.A+1)), log10(data$R660.A+1),cex=2,pch='.',xlab=xlab,ylab=ylab,main='EndoC')
    abline(lm(log10(data$R660.A+1)~log10(data$YG582.A+1)+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10(data$YG582.A+1), log10(data$R660.A+1),cex=2,pch='.')
    }
  }else{
    plot(log10((data$YG582.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.',xlab=paste(xlab, '/',normCol,sep=''),ylab=paste(ylab, '/',normCol,sep=''),main='EndoC')
    abline(lm(log10((data$R660.A+1)/(data[,normCol]+1))~log10((data$YG582.A+1)/(data[,normCol]+1))))
    if(heat=="TRUE"){
      points_colorByDensity(log10((data$YG582.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.')
    }
  }
}

plot_comb <- function(file1, file2,name){
  par(mfrow=c(2,6))
  plot_EndoC_fun(file1, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")

  plot_islet_fun(file2, "HNF1A",name,norm=FALSE,heat=TRUE,"V450.A")
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"V450.A")
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")

}
pdf("geneWise.scatter.TTR.pdf",12,5)
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv","TTR")
dev.off()
pdf("geneWise.scatter.S100A10.pdf",12,5)
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv","S100A10")
dev.off()
pdf("geneWise.scatter.SIX3.pdf",12,5)
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv","SIX3")
dev.off()
pdf("geneWise.scatter.S100A10.pdf",12,5)
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv","S100A10")
dev.off()
pdf("geneWise.scatter.IPP1.pdf",10,2)
file1 <- "export_HNF1Atest_HNF1A,2f,Cpep,2f,Ipp1_Single Cells-1_Cpep+.csv"
name <- "IPP1"
par(mfrow=c(1,6))
plot_EndoC_fun(file1, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
dev.off()

filelis <- c("export_HNF1Atest_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv","export_HNF1Atest_HNF1A,2f,Cpep,2f,MAFA_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,NGN3_Cpep+.csv", "export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv","export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX61_Cpep+.csv",
"export_HNF1Atest_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv")
namelis <- c("A1CF","MAFA","NGN3","NKX2-2","NKX61","PKIB")
for(i in 1:6){
  pdf(paste("geneWise.scatter.",namelis[i],".pdf",sep=''),10,2)
  file <- paste("0928/",filelis[i],sep='')
  name <- namelis[i]
  par(mfrow=c(1,6))
  plot_newEndoC_fun(file, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
  dev.off()
}

pdf("geneWise.scatter.NeuroD1.pdf",12,12)
par(mfrow=c(5,6))
file1 <- "export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv"
file2 <- "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv"
name <- "NEUROD1"
plot_islet_fun(file2, "HNF1A",name,norm=FALSE,heat=TRUE,"V450.A")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"V450.A")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
file <- "export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv"
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=FALSE,heat=TRUE,"V440.A")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"V440.A")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"SSC.H")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"SSC.A")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"FSC.H")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"FSC.A")
file <- "0928/export_HNF1Atest_Cpep_BV421,2f,NeuroD1_APC_Cpep+.csv"
plot_newEndoC_fun(file, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
file <- "0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv"
plot_newEndoC_fun(file, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
dev.off()

##endregion gene wise display

##region 1025
library(dplyr)
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/1025")
filelis <- list.files("Mygating/")
namelis <- gsub("export_HNF1Atest_HNF1A,2f,Cpep,2f,","",filelis) %>% strsplit(., split=' ') %>% sapply(.,function(x){x[1]}) %>% unique
pdf("geneWise.scatter.NeuroD1.pdf",12,5)
par(mfrow=c(2,6))
for(i in 1:11){
  file <- filelis[i]
  name <- namelis[i]
  for(dir in c("Mygating/","CpepQ6_gating/")){
    plot_newEndoC_fun(paste(dir,file,sep=''), "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A")
    plot_newEndoC_fun(paste(dir,file,sep=''), "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A")
    plot_newEndoC_fun(paste(dir,file,sep=''), "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H")
    plot_newEndoC_fun(paste(dir,file,sep=''), "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A")
    plot_newEndoC_fun(paste(dir,file,sep=''), "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H")
    plot_newEndoC_fun(paste(dir,file,sep=''), "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A")
  }
}
dev.off()
##endregion 1025

##region combine 0928 and 1025
plot_comb <- function(file1, file2,name,main){
  plot_EndoC_fun(file1, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A",paste(main,"EndoC"))
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A",paste(main,"EndoC"))
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H",paste(main,"EndoC"))
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A",paste(main,"EndoC"))
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H",paste(main,"EndoC"))
  plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A",paste(main,"EndoC"))

  plot_islet_fun(file2, "HNF1A",name,norm=FALSE,heat=TRUE,"V450.A",paste(main,"Islet"))
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"V450.A",paste(main,"Islet"))
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H",paste(main,"Islet"))
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A",paste(main,"Islet"))
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H",paste(main,"Islet"))
  plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A",paste(main,"Islet"))
}
points_colorByDensity<-function(x1,x2,pch=20,cex=2){
        df <- data.frame(x1,x2)
        x <- densCols(x1,x2, colramp=colorRampPalette(c("darkblue","green",colorRampPalette(c("orange","red"))(1))))
        points(x1,x2,pch=pch,cex=cex,col=x,xlab='',ylab='')
}
plot_islet_fun <- function(filename,xlab,ylab,norm=FALSE,heat=FALSE,normCol,main){
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep='\t')
  if(norm=="FALSE"){
    plot(log10(data$B576.A+1), log10(data$R660.A+1),cex=2,pch='.',xlab=xlab,ylab=ylab,main=main)
    abline(lm(log10(data$R660.A+1)~log10(data$B576.A+1)+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10(data$B576.A+1), log10(data$R660.A+1),cex=2,pch='.')
    }
  }else{
    plot(log10((data$B576.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.',xlab=paste(xlab, '/',normCol,sep=''),ylab=paste(ylab, '/',normCol,sep=''),main=main)
    abline(lm(log10((data$R660.A+1)/(data[,normCol]+1))~log10((data$B576.A+1)/(data[,normCol]+1))+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10((data$B576.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.')
    }
  }
}
plot_EndoC_fun <- function(filename,xlab,ylab,norm=FALSE,heat=FALSE,normCol,main){
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep=',')
  if(norm=="FALSE"){
    plot(log10((data$YG582+1)), log10(data$R660.A+1),cex=2,pch='.',xlab=xlab,ylab=ylab,main=main)
    abline(lm(log10(data$R660.A+1)~log10(data$YG582+1)+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10(data$YG582+1), log10(data$R660.A+1),cex=2,pch='.')
    }
  }else{
    plot(log10((data$YG582+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.',xlab=paste(xlab, '/',normCol,sep=''),ylab=paste(ylab, '/',normCol,sep=''),main=main)
    abline(lm(log10((data$R660.A+1)/(data[,normCol]+1))~log10((data$YG582+1)/(data[,normCol]+1))+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10((data$YG582+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.')
    }
  }
}
plot_newEndoC_fun <- function(filename,xlab,ylab,norm=FALSE,heat=FALSE,normCol,main){
  data <- read.table(filename,stringsAsFactors=FALSE,header=T,sep=',')
  if(norm=="FALSE"){
    plot(log10((data$YG582.A+1)), log10(data$R660.A+1),cex=2,pch='.',xlab=xlab,ylab=ylab,main=main)
    abline(lm(log10(data$R660.A+1)~log10(data$YG582.A+1)+0))
    if(heat=="TRUE"){
      points_colorByDensity(log10(data$YG582.A+1), log10(data$R660.A+1),cex=2,pch='.')
    }
  }else{
    plot(log10((data$YG582.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.',xlab=paste(xlab, '/',normCol,sep=''),ylab=paste(ylab, '/',normCol,sep=''),main=main)
    abline(lm(log10((data$R660.A+1)/(data[,normCol]+1))~log10((data$YG582.A+1)/(data[,normCol]+1))))
    if(heat=="TRUE"){
      points_colorByDensity(log10((data$YG582.A+1)/(data[,normCol]+1)), log10((data$R660.A+1)/(data[,normCol]+1)),cex=2,pch='.')
    }
  }
}
plot1025 <-function(file,name,main){
  plot_newEndoC_fun(file, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A",main)
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A",main)
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H",main)
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A",main)
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H",main)
  plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A",main)
}

setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")

pdf("1025/geneWise.scatter.TTR.pdf",12,9)
par(mfrow=c(4,6))
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,TTr_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv","TTR","0730")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,TTR_HNF1A+.csv","TTR","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,TTR_Q6 Comp-V440-A+ , Comp-R660-A+.csv","TTR","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.S100A10.pdf",12,9)
par(mfrow=c(4,6))
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv","S100A10","0730")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_HNF1A+.csv","S100A10","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,S100A10_Q6 Comp-V440-A+ , Comp-R660-A+.csv","S100A10","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.SIX3.pdf",12,9)
par(mfrow=c(4,6))
plot_comb("export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Single Cells-1_Cpep+.csv", "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv","SIX3","0730")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","SIX3","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,Six3_Q6 Comp-V440-A+ , Comp-R660-A+.csv","SIX3","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.A1CF.pdf",12,7)
par(mfrow=c(3,6))
plot1025("0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv","A1CF","0928")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,A1CF_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","A1CF","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,A1CF_Q6 Comp-V440-A+ , Comp-R660-A+.csv","A1CF","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.NGN3.pdf",12,7)
par(mfrow=c(3,6))
plot1025("0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,NGN3_Cpep+.csv","NGN3","0928")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NGN3_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","NGN3","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NGN3_Q6 Comp-V440-A+ , Comp-R660-A+.csv","NGN3","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.NKX61.pdf",12,7)
par(mfrow=c(3,6))
plot1025("0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX61_Cpep+.csv","NKX61","0928")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX61_HNF1A+.csv","NKX61","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX61_Q6 Comp-V440-A+ , Comp-R660-A+.csv","NKX61","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.NKX2-2.pdf",12,7)
par(mfrow=c(3,6))
plot1025("0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv","NKX2-2","0928")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX2-2_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","NKX2-2","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NKX2-2_Q6 Comp-V440-A+ , Comp-R660-A+.csv","NKX2-2","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.PKIB.pdf",12,7)
par(mfrow=c(3,6))
plot1025("0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv","PKIB","0928")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,PKIB_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","PKIB","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,PKIB_Q6 Comp-V440-A+ , Comp-R660-A+.csv","PKIB","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.MAFA.pdf",12,5)
par(mfrow=c(2,6))
plot1025("0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,MAFA_Cpep+.csv","MAFA","0928")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,MAFA_Q6 Comp-V440-A+ , Comp-R660-A+.csv","MAFA","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.PDX1.pdf",12,5)
par(mfrow=c(2,6))
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,PDX1_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","PDX1","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,PDX1_Q6 Comp-V440-A+ , Comp-R660-A+.csv","PDX1","1025 CpepQ6_gating")
dev.off()

pdf("1025/geneWise.scatter.TMED6.pdf",12,5)
par(mfrow=c(2,6))
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv","TMED6","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,TMED6_Q6 Comp-V440-A+ , Comp-R660-A+.csv","TMED6","1025 CpepQ6_gating")
dev.off()


pdf("1025/geneWise.scatter.NeuroD1.pdf",12,17)
par(mfrow=c(7,6))
file1 <- "export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Single Cells-1_Cpep+.csv"
file2 <- "export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv"
name <- "NEUROD1"
plot_islet_fun(file2, "HNF1A",name,norm=FALSE,heat=TRUE,"V450.A","0730 Islet")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"V450.A","0730 Islet")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H","0730 Islet")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A","0730 Islet")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H","0730 Islet")
plot_islet_fun(file2, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A","0730 Islet")
plot_EndoC_fun(file1, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A","0730 EndoC")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A","0730 EndoC")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H","0730 EndoC")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A","0730 EndoC")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H","0730 EndoC")
plot_EndoC_fun(file1, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A","0730 EndoC")
file <- "export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1,2f,APChigh_Single Cells-1_Cpep+.csv"
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=FALSE,heat=TRUE,"V440.A","0730 EndoC")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"V440.A","0730 EndoC")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"SSC.H","0730 EndoC")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"SSC.A","0730 EndoC")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"FSC.H","0730 EndoC")
plot_EndoC_fun(file, "HNF1A","NEUROD1_high",norm=TRUE,heat=TRUE,"FSC.A","0730 EndoC")
file <- "0928/export_HNF1Atest_Cpep_BV421,2f,NeuroD1_APC_Cpep+.csv"
plot_newEndoC_fun(file, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A","0928 EndoC")
file <- "0928/export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv"
plot_newEndoC_fun(file, "HNF1A",name,norm=FALSE,heat=TRUE,"V440.A","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"V440.A","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.H","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"SSC.A","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.H","0928 EndoC")
plot_newEndoC_fun(file, "HNF1A",name,norm=TRUE,heat=TRUE,"FSC.A","0928 EndoC")
plot1025("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Q2 Comp-YG582-A+ , Comp-R660-A+.csv","NEUROD1","1025 Mygating")
plot1025("1025/CpepQ6_gating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Q6 Comp-V440-A+ , Comp-R660-A+.csv","NEUROD1","1025 CpepQ6_gating")
dev.off()
##endregion combine 0928 and 1025

# 1109 replot
# V450.A is Cpep; B576.A is HNF1A, R660.A is target
plot_bin_lm <- function(data, targetName, binN, Cpep.col, HNF1A.col, target.col, size.col, binMethod="lm"){
  require(ggplot2)
  require(gridExtra)
  require(viridis)
  colorbin <- 50
  data$HNF1A.log10 <- log10(data[,HNF1A.col])
  data$Cpep.log10 <- log10(data[,Cpep.col])
  data$target.log10 <- log10(data[,target.col])
  data$HNF1A.norm <- log10((data[,HNF1A.col]+1)/(data[,size.col]+1))
  data$Cpep.norm <- log10((data[,Cpep.col]+1)/(data[,size.col]+1))
  data$target.norm <- log10((data[,target.col]+1)/(data[,size.col]+1))
  if(binMethod=="lm"){
    data$resid <- lm(data$Cpep.log10~data$HNF1A.log10)$residuals
    data$resid.norm <- lm(data$Cpep.norm~data$HNF1A.norm)$residuals
    # plot(data$HNF1A.log10, data$Cpep.log10, pch='.',cex=2)
    # points_colorByDensity(data$HNF1A.log10, data$Cpep.log10, pch='.',cex=2)
    # abline(lm(data$Cpep.log10~data$HNF1A.log10))
    # plot(data$HNF1A.norm, data$Cpep.norm, pch='.',cex=2)
    # points_colorByDensity(data$HNF1A.norm, data$Cpep.norm, pch='.',cex=2)
    # abline(lm(data$Cpep.norm~data$HNF1A.norm))
  }
  if(binMethod=="lm-zero"){
    data$resid <- lm(data$Cpep.log10~0+data$HNF1A.log10)$residuals
    data$resid.norm <- lm(data$Cpep.norm~0+data$HNF1A.norm)$residuals
    # plot(data$HNF1A.log10, data$Cpep.log10, pch='.',cex=2)
    # points_colorByDensity(data$HNF1A.log10, data$Cpep.log10, pch='.',cex=2)
    # abline(lm(data$Cpep.log10~0+data$HNF1A.log10))
    # plot(data$HNF1A.norm, data$Cpep.norm, pch='.',cex=2)
    # points_colorByDensity(data$HNF1A.norm, data$Cpep.norm, pch='.',cex=2)
    # abline(lm(data$Cpep.norm~0+data$HNF1A.norm))
  }
  data <- data[order(data$resid,decreasing=T),]
  data$group <- as.character(rep(c(1:binN),each=ceiling(nrow(data)/binN))[1:nrow(data)])
  data <- data[order(data$resid.norm,decreasing=T),]
  data$group.norm <- as.character(rep(c(1:binN),each=ceiling(nrow(data)/binN))[1:nrow(data)])

  p1 <- ggplot(data,aes(HNF1A.log10, Cpep.log10,color=group)) + geom_point(size=0.5)+ theme_classic()+ xlab("HNF1A") + ylab("Cpep")
  p2 <- ggplot(data,aes(HNF1A.log10, Cpep.log10)) + geom_point(size=0.5)+ theme_classic()+ xlab("HNF1A") + ylab("Cpep")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p3 <- ggplot(data,aes(Cpep.log10, target.log10)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~group) + xlab("Cpep") + ylab(targetName)+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")

  p4 <- ggplot(data,aes(HNF1A.norm, Cpep.norm,color=group.norm)) + geom_point(size=0.5)+ theme_classic()+ xlab("HNF1A") + ylab("Cpep")
  p5 <- ggplot(data,aes(HNF1A.norm, Cpep.norm)) + geom_point(size=0.5)+ theme_classic()+ xlab("HNF1A") + ylab("Cpep")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p6 <- ggplot(data,aes(Cpep.norm, target.norm)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~group.norm) + xlab("Cpep") + ylab(targetName)+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  # grid.arrange(p1,p2,p3,p4,p5,p6,ncol=3,widths=c(2,2,5))
  return(list(p1,p2,p3,p4,p5,p6))
}

plot_bin <- function(data, targetName, binN, Cpep.col, HNF1A.col, target.col, size.col, binMethod="seq"){
  require(ggplot2)
  require(gridExtra)
  require(viridis)
  data$HNF1A.log10 <- log10(data[,HNF1A.col])
  data$Cpep.log10 <- log10(data[,Cpep.col])
  data$target.log10 <- log10(data[,target.col])
  data$HNF1A.norm <- log10((data[,HNF1A.col]+1)/(data[,size.col]+1))
  data$Cpep.norm <- log10((data[,Cpep.col]+1)/(data[,size.col]+1))
  data$target.norm <- log10((data[,target.col]+1)/(data[,size.col]+1))
  if(binMethod=="seq"){
    Cpep.lim <- seq(min(data$Cpep.log10),max(data$Cpep.log10),length=binN+1)
    Cpep.norm.lim <- seq(min(data$Cpep.norm),max(data$Cpep.norm),length=binN+1)
    HNF1A.lim <- seq(min(data$HNF1A.log10),max(data$HNF1A.log10),length=binN+1)
    HNF1A.norm.lim <- seq(min(data$HNF1A.norm),max(data$HNF1A.norm),length=binN+1)
  }
  if(binMethod=="quantile"){
    quantile_even <- 1/binN
    Cpep.lim <- c(min(data$Cpep.log10))
    Cpep.norm.lim <- c(min(data$Cpep.norm))
    HNF1A.lim <- c(min(data$HNF1A.log10))
    HNF1A.norm.lim <- c(min(data$HNF1A.norm))
    target.lim <- c(min(data$target.log10))
    target.norm.lim <- c(min(data$target.norm))
    for(tmpind in 1:binN){
      Cpep.lim <- c(Cpep.lim, quantile(data$Cpep.log10,prob=tmpind*quantile_even,na.rm=T))
      Cpep.norm.lim <- c(Cpep.norm.lim, quantile(data$Cpep.norm,prob=tmpind*quantile_even,na.rm=T))
      HNF1A.lim <- c(HNF1A.lim, quantile(data$HNF1A.log10,prob=tmpind*quantile_even,na.rm=T))
      HNF1A.norm.lim <- c(HNF1A.norm.lim, quantile(data$HNF1A.norm,prob=tmpind*quantile_even,na.rm=T))
      target.lim <- c(target.lim, quantile(data$target.log10,prob=tmpind*quantile_even,na.rm=T))
      target.norm.lim <- c(target.norm.lim, quantile(data$target.norm,prob=tmpind*quantile_even,na.rm=T))
    }
  }

  # bin by Cpep
  Cpep.lim.df <- as.data.frame(Cpep.lim)
  Cpep.lis <- list()
  Cpep.group <- rep(1,nrow(data))
  for(i in 1:length(Cpep.lim)){
    if(i<length(Cpep.lim)){
        if(i==length(Cpep.lim)-1){
          Cpep.lis[[i]] <- which(data$Cpep.log10>=Cpep.lim[i] & data$Cpep.log10<=Cpep.lim[i+1])
          Cpep.group[Cpep.lis[[i]]] <- i
        }else{
         Cpep.lis[[i]] <- which(data$Cpep.log10>=Cpep.lim[i] & data$Cpep.log10<Cpep.lim[i+1])
         Cpep.group[Cpep.lis[[i]]] <- i
        }
    }
  }
  Cpep.norm.lim.df <- as.data.frame(Cpep.norm.lim)
  Cpep.norm.lis <- list()
  Cpep.norm.group <- rep(1,nrow(data))
  for(i in 1:length(Cpep.norm.lim)){
    if(i<length(Cpep.norm.lim)){
        if(i==(length(Cpep.norm.lim)-1)){
          Cpep.norm.lis[[i]] <- which(data$Cpep.norm>=as.numeric(Cpep.norm.lim[i]) & data$Cpep.norm<=as.numeric(Cpep.norm.lim[i+1]))
          Cpep.norm.group[Cpep.norm.lis[[i]]] <- i
        }else{
         Cpep.norm.lis[[i]] <- which(data$Cpep.norm>=as.numeric(Cpep.norm.lim[i]) & data$Cpep.norm<as.numeric(Cpep.norm.lim[i+1]))
         Cpep.norm.group[Cpep.norm.lis[[i]]] <- i
        }
    }
  }
  # bin by HNF1A
  HNF1A.lim.df <- as.data.frame(HNF1A.lim)
  HNF1A.lis <- list()
  HNF1A.group <- rep(1,nrow(data))
  for(i in 1:length(HNF1A.lim)){
    if(i<length(HNF1A.lim)){
        if(i==(length(HNF1A.lim)-1)){
          HNF1A.lis[[i]] <- which(data$HNF1A.log10>=as.numeric(HNF1A.lim[i]) & data$HNF1A.log10<=as.numeric(HNF1A.lim[i+1]))
          HNF1A.group[HNF1A.lis[[i]]] <- i
        }else{
         HNF1A.lis[[i]] <- which(data$HNF1A.log10>=as.numeric(HNF1A.lim[i]) & data$HNF1A.log10<as.numeric(HNF1A.lim[i+1]))
         HNF1A.group[HNF1A.lis[[i]]] <- i
        }
    }
  }
  HNF1A.norm.lim.df <- as.data.frame(HNF1A.norm.lim)
  HNF1A.norm.lis <- list()
  HNF1A.norm.group <- rep(1,nrow(data))
  for(i in 1:length(HNF1A.norm.lim)){
    if(i<length(HNF1A.norm.lim)){
        if(i==length(HNF1A.norm.lim)-1){
          HNF1A.norm.lis[[i]] <- which(data$HNF1A.norm>=HNF1A.norm.lim[i] & data$HNF1A.norm<=HNF1A.norm.lim[i+1])
          HNF1A.norm.group[HNF1A.norm.lis[[i]]] <- i
        }else{
         HNF1A.norm.lis[[i]] <- which(data$HNF1A.norm>=HNF1A.norm.lim[i] & data$HNF1A.norm<HNF1A.norm.lim[i+1])
         HNF1A.norm.group[HNF1A.norm.lis[[i]]] <- i
        }
    }
  }
  # bin by target
  target.lim.df <- as.data.frame(target.lim)
  target.lis <- list()
  target.group <- rep(1,nrow(data))
  for(i in 1:length(target.lim)){
    if(i<length(target.lim)){
        if(i==(length(target.lim)-1)){
          target.lis[[i]] <- which(data$target.log10>=as.numeric(target.lim[i]) & data$target.log10<=as.numeric(target.lim[i+1]))
          target.group[target.lis[[i]]] <- i
        }else{
         target.lis[[i]] <- which(data$target.log10>=as.numeric(target.lim[i]) & data$target.log10<as.numeric(target.lim[i+1]))
         target.group[target.lis[[i]]] <- i
        }
    }
  }
  target.norm.lim.df <- as.data.frame(target.norm.lim)
  target.norm.lis <- list()
  target.norm.group <- rep(1,nrow(data))
  for(i in 1:length(target.norm.lim)){
    if(i<length(target.norm.lim)){
        if(i==length(target.norm.lim)-1){
          target.norm.lis[[i]] <- which(data$target.norm>=target.norm.lim[i] & data$target.norm<=target.norm.lim[i+1])
          target.norm.group[target.norm.lis[[i]]] <- i
        }else{
         target.norm.lis[[i]] <- which(data$target.norm>=target.norm.lim[i] & data$target.norm<target.norm.lim[i+1])
         target.norm.group[target.norm.lis[[i]]] <- i
        }
    }
  }

  data$Cpep.bingroup <- Cpep.group
  data$Cpep.bingroup <- factor(data$Cpep.bingroup,levels=c(1:binN))
  data$Cpep.norm.bingroup <- Cpep.norm.group
  data$Cpep.norm.bingroup <- factor(data$Cpep.norm.bingroup,levels=c(1:binN))
  data$HNF1A.bingroup <- HNF1A.group
  data$HNF1A.bingroup <- factor(data$HNF1A.bingroup,levels=c(1:binN))
  data$HNF1A.norm.bingroup <- HNF1A.norm.group
  data$HNF1A.norm.bingroup <- factor(data$HNF1A.norm.bingroup,levels=c(1:binN))
  data$target.bingroup <- target.group
  data$target.bingroup <- factor(data$target.bingroup,levels=c(1:binN))
  data$target.norm.bingroup <- target.norm.group
  data$target.norm.bingroup <- factor(data$target.norm.bingroup,levels=c(1:binN))

  print("1")
  colorbin <- 50
  p1 <- ggplot(data,aes(HNF1A.log10, Cpep.log10)) + geom_point(size=0.5)+ theme_classic()+ geom_hline(data=Cpep.lim.df, aes(yintercept=Cpep.lim))+ xlab("HNF1A") + ylab("Cpep")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p2 <- ggplot(data,aes(HNF1A.log10, target.log10)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~Cpep.bingroup) + xlab("HNF1A") + ylab(targetName)+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  CpepG.HNF1A.denseity.p <- ggplot(data, aes(x=HNF1A.log10, color=Cpep.bingroup)) + geom_density() + theme_classic()
  CpepG.target.denseity.p <- ggplot(data, aes(x=target.log10, color=Cpep.bingroup)) + geom_density() + theme_classic()

  p3 <- ggplot(data,aes(HNF1A.norm, Cpep.norm)) + geom_point(size=0.5)+ theme_classic()+ geom_hline(data=Cpep.norm.lim.df, aes(yintercept=Cpep.norm.lim))+ xlab("HNF1A norm by size") + ylab("Cpep norm by size") + geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p4 <- ggplot(data,aes(HNF1A.norm, target.norm)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~Cpep.norm.bingroup) + xlab("HNF1A norm by size") + ylab(paste(targetName, "norm by size"))+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  CpepG.HNF1A.norm.denseity.p <- ggplot(data, aes(x=HNF1A.norm, color=Cpep.norm.bingroup)) + geom_density() + theme_classic()
  CpepG.target.norm.denseity.p <- ggplot(data, aes(x=target.norm, color=Cpep.norm.bingroup)) + geom_density() + theme_classic()

  p5 <- ggplot(data,aes(HNF1A.log10, Cpep.log10)) + geom_point(size=0.5)+ theme_classic()+ geom_vline(data=HNF1A.lim.df, aes(xintercept=HNF1A.lim))+ xlab("HNF1A") + ylab("Cpep")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p6 <- ggplot(data,aes(Cpep.log10, target.log10)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~HNF1A.bingroup) + xlab("Cpep") + ylab(targetName)+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  HNF1AG.Cpep.denseity.p <- ggplot(data, aes(x=Cpep.log10, color=HNF1A.bingroup)) + geom_density() + theme_classic()
  HNF1AG.target.denseity.p <- ggplot(data, aes(x=target.log10, color=HNF1A.bingroup)) + geom_density() + theme_classic()

  p7 <- ggplot(data,aes(HNF1A.norm, Cpep.norm)) + geom_point(size=0.5)+ theme_classic()+ geom_vline(data=HNF1A.norm.lim.df, aes(xintercept=HNF1A.norm.lim))+ xlab("HNF1A norm by size") + ylab("Cpep norm by size")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p8 <- ggplot(data,aes(Cpep.norm, target.norm)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~HNF1A.norm.bingroup) + xlab("Cpep norm by size") + ylab(paste(targetName, "norm by size"))+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  HNF1AG.Cpep.norm.denseity.p <- ggplot(data, aes(x=Cpep.norm, color=HNF1A.norm.bingroup)) + geom_density() + theme_classic()
  HNF1AG.target.norm.denseity.p <- ggplot(data, aes(x=target.norm, color=HNF1A.norm.bingroup)) + geom_density() + theme_classic()

  p9 <- ggplot(data,aes(target.log10, Cpep.log10)) + geom_point(size=0.5)+ theme_classic()+ geom_vline(data=target.lim.df, aes(xintercept=target.lim))+ xlab("target") + ylab("Cpep")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p10 <- ggplot(data,aes(Cpep.log10, HNF1A.log10)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~target.bingroup) + xlab("Cpep") + ylab("HNF1A")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  targetG.Cpep.denseity.p <- ggplot(data, aes(x=Cpep.log10, color=target.bingroup)) + geom_density() + theme_classic()
  targetG.HNF1A.denseity.p <- ggplot(data, aes(x=HNF1A.log10, color=target.bingroup)) + geom_density() + theme_classic()

  p11 <- ggplot(data,aes(target.norm, Cpep.norm)) + geom_point(size=0.5)+ theme_classic()+ geom_vline(data=target.norm.lim.df, aes(xintercept=target.norm.lim))+ xlab("target norm by size") + ylab("Cpep norm by size")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  p12 <- ggplot(data,aes(Cpep.norm, HNF1A.norm)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~target.norm.bingroup) + xlab("Cpep norm by size") + ylab("HNF1A norm by size")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
  targetG.Cpep.norm.denseity.p <- ggplot(data, aes(x=Cpep.norm, color=target.norm.bingroup)) + geom_density() + theme_classic()
  targetG.HNF1A.norm.denseity.p <- ggplot(data, aes(x=HNF1A.norm, color=target.norm.bingroup)) + geom_density() + theme_classic()
  # plolis <- list(p1,p2,CpepG.HNF1A.denseity.p,CpepG.target.denseity.p, p3,p4,CpepG.HNF1A.norm.denseity.p, CpepG.target.norm.denseity.p, p5,p6,HNF1AG.Cpep.denseity.p,HNF1AG.target.denseity.p,p7,p8,HNF1AG.Cpep.norm.denseity.p,HNF1AG.target.norm.denseity.p,p9,p10,targetG.Cpep.denseity.p,targetG.HNF1A.denseity.p,p11,p12,targetG.Cpep.norm.denseity.p,targetG.HNF1A.norm.denseity.p)
  #grid.arrange(grobs=,layout_matrix = rbind(c(1,rep(2,3),3,4), c(5,rep(6,3),7,8), c(9,rep(10,3),11,12),c(13,rep(14,3),15,16),c(17,rep(18,3),19,20)))
  #grid.arrange(grobs=plolis,ncol=4,widths=c(1,3,1,1))
  plolis <- list(p5,p6,HNF1AG.Cpep.denseity.p,HNF1AG.target.denseity.p,p7,p8,HNF1AG.Cpep.norm.denseity.p,HNF1AG.target.norm.denseity.p)
  grid.arrange(grobs=plolis,ncol=4,widths=c(1,3,1,1))
}

Islet_NEUROD1 <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_TTR <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
EndoC_TTR <- read.table("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,TTR_HNF1A+.csv",stringsAsFactors=FALSE,header=T,sep=',')
EndoC_NEUROD1 <- read.table("1025/Mygating/export_HNF1Atest_HNF1A,2f,Cpep,2f,NeuroD1_Q2 Comp-YG582-A+ , Comp-R660-A+.csv",stringsAsFactors=FALSE,header=T,sep=',')

pdf("bin5.plot.pdf",20,10)
plot_bin(Islet_TTR,"TTR",5,"V450.A","B576.A","R660.A","SSC.A")
plot_bin(EndoC_TTR,"TTR",5,"V440.A","YG582.A","R660.A","SSC.A")
plot_bin(Islet_NEUROD1,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A")
plot_bin(EndoC_NEUROD1,"NEUROD1",5,"V440.A","YG582.A","R660.A","SSC.A")
dev.off()


pdf("bin5.quantile.plot.pdf",20,10)
plot_bin(Islet_TTR,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","quantile")
plot_bin(EndoC_TTR,"TTR",5,"V440.A","YG582.A","R660.A","SSC.A","quantile")
plot_bin(Islet_NEUROD1,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","quantile")
plot_bin(EndoC_NEUROD1,"NEUROD1",5,"V440.A","YG582.A","R660.A","SSC.A","quantile")
dev.off()

Islet_NEUROD1 <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_TTR <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_S100A10 <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_Six3 <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
pdf("bin5.quantile.islet.extra.plot.pdf",20,15)
plot_bin(Islet_TTR,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","quantile")
plot_bin(Islet_S100A10,"S100A10",5,"V450.A","B576.A","R660.A","SSC.A","quantile")
plot_bin(Islet_Six3,"Six3",5,"V450.A","B576.A","R660.A","SSC.A","quantile")
plot_bin(Islet_NEUROD1,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","quantile")
dev.off()

# 1119
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/1119")
Islet_TTR <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_S100A10 <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,S100A10_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NeuroD1 <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_Six3 <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_A1CF <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NKX2.2 <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_PKIB <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TMED6 <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
pdf("1119.bin5.quantile.islet.plot.pdf",20,5)
plot_bin(Islet_TTR,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_S100A10,"S100A10",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_Six3,"Six3",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_NeuroD1,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_A1CF,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_NKX2.2,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_PKIB,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
plot_bin(Islet_TMED6,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","quantile")
dev.off()



# 1126, lm split cells
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/1119")
Islet_NEUROD1_1st <- read.table("../export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_TTR_1st <- read.table("../export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_S100A10_1st <- read.table("../export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_Six3_1st <- read.table("../export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)

Islet_TTR_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_S100A10_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,S100A10_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NeuroD1_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_Six3_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_A1CF_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NKX22_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_PKIB_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TMED6_2nd <- read.table("export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')

# TTR
png("1126.trylm_group.TTR.lm.png",900,640)
plis1 <- plot_bin_lm(Islet_TTR_1st,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","lm")
plis2 <- plot_bin_lm(Islet_TTR_2nd,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.TTR.lm-zero.png",900,640)
plis1 <- plot_bin_lm(Islet_TTR_1st,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","lm-zero")
plis2 <- plot_bin_lm(Islet_TTR_2nd,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
# NEUROD1
png("1126.trylm_group.NEUROD1.lm.png",900,640)
plis1 <- plot_bin_lm(Islet_NEUROD1_1st,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","lm")
plis2 <- plot_bin_lm(Islet_NeuroD1_2nd,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.NEUROD1.lm-zero.png",900,640)
plis1 <- plot_bin_lm(Islet_NEUROD1_1st,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","lm-zero")
plis2 <- plot_bin_lm(Islet_NeuroD1_2nd,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
# S100A10
png("1126.trylm_group.S100A10.lm.png",900,640)
plis1 <- plot_bin_lm(Islet_S100A10_1st,"S100A10",5,"V450.A","B576.A","R660.A","SSC.A","lm")
plis2 <- plot_bin_lm(Islet_S100A10_2nd,"S100A10",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.S100A10.lm-zero.png",900,640)
plis1 <- plot_bin_lm(Islet_S100A10_1st,"S100A10",5,"V450.A","B576.A","R660.A","SSC.A","lm-zero")
plis2 <- plot_bin_lm(Islet_S100A10_2nd,"S100A10",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
#Six3
png("1126.trylm_group.SIX3.lm.png",900,640)
plis1 <- plot_bin_lm(Islet_Six3_1st,"SIX3",5,"V450.A","B576.A","R660.A","SSC.A","lm")
plis2 <- plot_bin_lm(Islet_Six3_2nd,"SIX3",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.SIX3.lm-zero.png",900,640)
plis1 <- plot_bin_lm(Islet_Six3_1st,"SIX3",5,"V450.A","B576.A","R660.A","SSC.A","lm-zero")
plis2 <- plot_bin_lm(Islet_Six3_2nd,"SIX3",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis1,plis2),ncol=3,widths=c(2,2,5))
dev.off()
# A1CF
png("1126.trylm_group.A1CF.lm.png",900,320)
plis2 <- plot_bin_lm(Islet_A1CF_2nd,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.A1CF.lm-zero.png",900,320)
plis2 <- plot_bin_lm(Islet_A1CF_2nd,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
# NKX2.2
png("1126.trylm_group.NKX2.2.lm.png",900,320)
plis2 <- plot_bin_lm(Islet_NKX22_2nd,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.NKX2.2.lm-zero.png",900,320)
plis2 <- plot_bin_lm(Islet_NKX22_2nd,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
# PKIB
png("1126.trylm_group.PKIB.lm.png",900,320)
plis2 <- plot_bin_lm(Islet_PKIB_2nd,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.PKIB.lm-zero.png",900,320)
plis2 <- plot_bin_lm(Islet_PKIB_2nd,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
# TMED6
png("1126.trylm_group.TMED6.lm.png",900,320)
plis2 <- plot_bin_lm(Islet_TMED6_2nd,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","lm")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()
png("1126.trylm_group.TMED6.lm-zero.png",900,320)
plis2 <- plot_bin_lm(Islet_TMED6_2nd,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","lm-zero")
grid.arrange(grobs=c(plis2),ncol=3,widths=c(2,2,5))
dev.off()


G575-A = HNF1A
R670-A = the target (TTR, S100A10, Six3, etc)
V450-A = Cpep
FSC.A FSC.H SSC.A SSC.H G575.A R670.A V450.A Time

Find_best.lm <- function(data, targetName, binN, Cpep.col, HNF1A.col, target.col, size.col, binMethod="lm",type="raw",intercept="auto",slope="auto",xfilter="NA",yfilter="NA",bincell="FALSE"){
 require(ggplot2)
 require(gridExtra)
 require(viridis)
 colorbin <- 50
 data$HNF1A.log10 <- log10(data[,HNF1A.col])
 data$Cpep.log10 <- log10(data[,Cpep.col])
 data$target.log10 <- log10(data[,target.col])
 data$HNF1A.norm <- log10((data[,HNF1A.col]+1)/(data[,size.col]+1))
 data$Cpep.norm <- log10((data[,Cpep.col]+1)/(data[,size.col]+1))
 data$target.norm <- log10((data[,target.col]+1)/(data[,size.col]+1))
 dist_point_line <- function(a, slope, intercept) {
     b = c(1, intercept+slope)
     c = c(-intercept/slope,0)
     v1 <- b - c
     v2 <- a - b
     m <- cbind(v1,v2)
     return(det(m))/sqrt(sum(v1*v1))
 }
 points_colorByDensity<-function(x1,x2,pch=20,cex=2){
         df <- data.frame(x1,x2)
         x <- densCols(x1,x2, colramp=colorRampPalette(c("darkblue","green",colorRampPalette(c("orange","red"))(1))))
         points(x1,x2,pch=pch,cex=cex,col=x,xlab='',ylab='')
 }
 if(type=="raw"){
     xlim <- range(data$HNF1A.log10)
     ylim <- range(data$Cpep.log10)
     lim <- c(min(c(xlim,ylim)), max(c(xlim,ylim)))
     data$x <- data$HNF1A.log10
     data$y <- data$Cpep.log10
     data$z <- data$target.log10
     subdata <- data[,c("HNF1A.log10","Cpep.log10")]
     colnames(subdata) <- c("x","y")
 }
 if(type=="norm"){
     xlim <- range(data$HNF1A.norm)
     ylim <- range(data$Cpep.norm)
     lim <- c(min(c(xlim,ylim)), max(c(xlim,ylim)))
     data$x <- data$HNF1A.norm
     data$y <- data$Cpep.norm
     data$z <- data$target.norm
     subdata <- data[,c("HNF1A.norm","Cpep.norm")]
     colnames(subdata) <- c("x","y")
 }
 if(bincell=="FALSE"){
   plot(data$x, data$y, pch='.',cex=2,xlim=lim, ylim=lim)
   if(xfilter!="NA"){subdata <- subset(subdata, x>=as.numeric(xfilter[1]) & x<=as.numeric(xfilter[2]))}
   if(yfilter!="NA"){subdata <- subset(subdata, y>=as.numeric(yfilter[1]) & y<=as.numeric(yfilter[2]))}
   M <- lm(y ~ x, data=subdata)
   if(slope=="auto"){
     slope <- coef(M)[2]
   }else{
     slope <- as.numeric(slope)
   }
   if(intercept=="auto"){
     intercept <- coef(M)["(Intercept)"]
   }else{
     intercept <- as.numeric(intercept)
   }
   slope <- as.numeric(as.character(slope))
   intercept <- as.numeric(as.character(intercept))
   points_colorByDensity(subdata$x, subdata$y, pch='.',cex=2)
   print(paste("intercept:", coef(M)["(Intercept)"], "; slope:",coef(M)[2]))
   abline(M,lty='dashed')
   abline(coef = c(intercept, slope),lty='dashed')
   abline(coef = c(intercept, slope),col='blue')
 }else{
   data$resid <- apply(data[,c("x", "y")], 1, function(x) dist_point_line(as.numeric(x[1:2]), slope = slope, intercept = intercept) )
   data <- data[order(data$resid,decreasing=T),]
   data$group <- as.character(rep(c(1:binN),each=ceiling(nrow(data)/binN))[1:nrow(data)])
   p1 <- ggplot(data,aes(x, y,color=group)) + geom_point(size=0.5)+ theme_classic()+ xlab("HNF1A") + ylab("Cpep")
   p2 <- ggplot(data,aes(x, y)) + geom_point(size=0.5)+ theme_classic()+ xlab("HNF1A") + ylab("Cpep")+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
   p3 <- ggplot(data,aes(y, z)) + geom_point(size=0.5)+ theme_classic() + facet_grid(~group) + xlab("Cpep") + ylab(targetName)+  geom_bin2d(bins = colorbin) + scale_fill_continuous(type = "viridis")
   # grid.arrange(p1,p2,p3,ncol=3,widths=c(2,2,5))
   return(list(p1,p2,p3))
 }
}
# TTR
p1 <- Find_best.lm(Islet_TTR_1st,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_TTR_1st,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_TTR_2nd,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1.77,slope=0.4,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_TTR_2nd,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=-1,slope=0.973592764313496,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.TTR.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
# NEUROD1
p1 <- Find_best.lm(Islet_NEUROD1_1st,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_NEUROD1_1st,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_NeuroD1_2nd,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1,slope=2.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_NeuroD1_2nd,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.0979977289413293,slope=1.13329937452658,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.NEUROD1.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
# S100A10
p1 <- Find_best.lm(Islet_S100A10_1st,"S100A10",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_S100A10_1st,"S100A10",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_S100A10_2nd,"S100A10",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1.2,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_S100A10_2nd,"S100A10",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.164253602336868,slope=0.96159951092817,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.S100A10.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
# SIX3
p1 <- Find_best.lm(Islet_Six3_1st,"SIX3",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_Six3_1st,"SIX3",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_Six3_2nd,"SIX3",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_Six3_2nd,"SIX3",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.170809515247479,slope=0.955195897445574,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.SIX3.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
# A1CF
p1 <- Find_best.lm(Islet_A1CF_2nd,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_A1CF_2nd,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.098364821189375,slope=0.975049621212366,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.A1CF.lm.png",900,320)
grid.arrange(grobs=c(p1,p2),ncol=3,widths=c(2,2,5))
dev.off()
#PKIB
p1 <- Find_best.lm(Islet_PKIB_2nd,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=0.5,slope=1.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_PKIB_2nd,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.0378995376365464,slope=0.976082099314799,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.PKIB.lm.png",900,320)
grid.arrange(grobs=c(p1,p2),ncol=3,widths=c(2,2,5))
dev.off()
# TMED6
p1 <- Find_best.lm(Islet_TMED6_2nd,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=0.5,slope=1.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_TMED6_2nd,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.121934250836349,slope=1.06093685752965,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.TMED6.lm.png",900,320)
grid.arrange(grobs=c(p1,p2),ncol=3,widths=c(2,2,5))
dev.off()
# NKX2.2
p1 <- Find_best.lm(Islet_NKX22_2nd,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=0.5,slope=2,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_NKX22_2nd,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.0659998790252094,slope=1.02387183641627,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1130.trylm_group.NKX2.2.lm.png",900,320)
grid.arrange(grobs=c(p1,p2),ncol=3,widths=c(2,2,5))
dev.off()


##region 1210
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")
Islet_NEUROD1_1st <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,NeuroD1-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_TTR_1st <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421-TTR-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_S100A10_1st <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,S100A10-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_Six3_1st <- read.table("export_2021-08-19_HNF1A_islet_HNF1A-PE,2f,Cpep-BV421,2f,Six3-APC_Cpep+.csv",stringsAsFactors=FALSE,header=T)
Islet_TTR_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_S100A10_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,S100A10_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NeuroD1_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_Six3_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_A1CF_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NKX22_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_PKIB_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TMED6_2nd <- read.table("1119/export_2021-11-19_HNF1A_Islet9921_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NEUROD1_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TTR_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_Six3_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_A1CF_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NKX22_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_PKIB_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TMED6_3rd <- read.table("1210/export_Islet12121_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')

# TTR
p1 <- Find_best.lm(Islet_TTR_1st,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_TTR_1st,"TTR",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_TTR_2nd,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1.77,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_TTR_2nd,"TTR",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=-1,slope=0.973592764313496,xfilter="NA",yfilter="NA",bincell="TRUE")
p5 <- Find_best.lm(Islet_TTR_3rd,"TTR",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=1,slope=1,xfilter="NA",yfilter="NA",bincell="TRUE")
p6 <- Find_best.lm(Islet_TTR_3rd,"TTR",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.157109699440961,slope=1.26472724106195,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.TTR.lm.png",900,960)
grid.arrange(grobs=c(p1,p2,p3,p4,p5,p6),ncol=3,widths=c(2,2,5))
dev.off()
# NEUROD1
p1 <- Find_best.lm(Islet_NEUROD1_1st,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_NEUROD1_1st,"NEUROD1",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_NeuroD1_2nd,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1,slope=2.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_NeuroD1_2nd,"NEUROD1",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.0979977289413293,slope=1.13329937452658,xfilter="NA",yfilter="NA",bincell="TRUE")
p5 <- Find_best.lm(Islet_NEUROD1_3rd,"NEUROD1",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=1.20048643831986,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p6 <- Find_best.lm(Islet_NEUROD1_3rd,"NEUROD1",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.0979977289413293,slope=0.925766652522005,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.NEUROD1.lm.png",900,960)
grid.arrange(grobs=c(p1,p2,p3,p4,p5,p6),ncol=3,widths=c(2,2,5))
dev.off()
# SIX3
p1 <- Find_best.lm(Islet_Six3_1st,"SIX3",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="raw",intercept=-1,slope=3,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_Six3_1st,"SIX3",5,"V450.A","B576.A","R660.A","SSC.A","lm",type="norm",intercept=-1,slope=3.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_Six3_2nd,"SIX3",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_Six3_2nd,"SIX3",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.170809515247479,slope=0.955195897445574,xfilter="NA",yfilter="NA",bincell="TRUE")
p5 <- Find_best.lm(Islet_Six3_3rd,"SIX3",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=1,slope=0.9,xfilter="NA",yfilter="NA",bincell="TRUE")
p6 <- Find_best.lm(Islet_Six3_3rd,"SIX3",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.170809515247479,slope=1.155195897445574,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.SIX3.lm.png",900,960)
grid.arrange(grobs=c(p1,p2,p3,p4,p5,p6),ncol=3,widths=c(2,2,5))
dev.off()
# A1CF
p1 <- Find_best.lm(Islet_A1CF_2nd,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=1,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_A1CF_2nd,"A1CF",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.098364821189375,slope=0.975049621212366,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_A1CF_3rd,"A1CF",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=0.5,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_A1CF_3rd,"A1CF",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.15364821189375,slope=1.075049621212366,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.A1CF.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
#PKIB
p1 <- Find_best.lm(Islet_PKIB_2nd,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=0.5,slope=1.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_PKIB_2nd,"PKIB",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.0378995376365464,slope=0.976082099314799,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_PKIB_3rd,"PKIB",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=1.5,slope=0.7,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_PKIB_3rd,"PKIB",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.118995376365464,slope=1.076082099314799,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.PKIB.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
# TMED6
p1 <- Find_best.lm(Islet_TMED6_2nd,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=0.5,slope=1.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_TMED6_2nd,"TMED6",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.121934250836349,slope=1.06093685752965,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_TMED6_3rd,"TMED6",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=0.5,slope=1.5,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_TMED6_3rd,"TMED6",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.121934250836349,slope=1.06093685752965,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.TMED6.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()
# NKX2.2
p1 <- Find_best.lm(Islet_NKX22_2nd,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="raw",intercept=0.5,slope=2,xfilter="NA",yfilter="NA",bincell="TRUE")
p2 <- Find_best.lm(Islet_NKX22_2nd,"NKX2.2",5,"V450.A","R670.A","G575.A","SSC.A","lm",type="norm",intercept=0.0659998790252094,slope=1.02387183641627,xfilter="NA",yfilter="NA",bincell="TRUE")
p3 <- Find_best.lm(Islet_NKX22_3rd,"NKX2.2",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="raw",intercept=0.5,slope=2,xfilter="NA",yfilter="NA",bincell="TRUE")
p4 <- Find_best.lm(Islet_NKX22_3rd,"NKX2.2",5,"V440.A","YG582.A","R660.A","SSC.A","lm",type="norm",intercept=0.0659998790252094,slope=1.02387183641627,xfilter="NA",yfilter="NA",bincell="TRUE")
png("1210.trylm_group.NKX2.2.lm.png",900,640)
grid.arrange(grobs=c(p1,p2,p3,p4),ncol=3,widths=c(2,2,5))
dev.off()

#
##endregion 1210

##region another way to show scatterplot in paper

choose.slope_intercept <- function(data, targetName, Cpep.col, HNF1A.col, target.col, slope="NA",intercept="NA"){
  points_colorByDensity <- function(x1,x2,pch=20,cex=2){
          df <- data.frame(x1,x2)
          x <- densCols(x1,x2, colramp=colorRampPalette(c("darkblue","green",colorRampPalette(c("orange","red"))(1))))
          points(x1,x2,pch=pch,cex=cex,col=x,xlab='',ylab='')
  }
  data$HNF1A.log10 <- log10(data[,HNF1A.col])
  data$Cpep.log10 <- log10(data[,Cpep.col])
  data$target.log10 <- log10(data[,target.col])
  data <- data[!is.infinite(rowSums(data)),]
  data <- data[complete.cases(data),]
  xlim <- range(data$HNF1A.log10)
  ylim <- range(data$Cpep.log10)
  lim <- c(min(c(xlim,ylim)), max(c(xlim,ylim)))
  if(lim[1]>0){lim[1]<-0}
  if(slope!="NA"){
    par(mfrow=c(1,2))
    plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2,xlim=lim, ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)')
    M <- lm(data$HNF1A.log10~data$Cpep.log10)
    print(paste(coef(M)[2], coef(M)["(Intercept)"]))
    abline(M)
    abline(h=0)
    abline(v=0)
    points_colorByDensity(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2)
    plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2,xlim=lim, ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)')
    points_colorByDensity(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2)
    abline(coef = c(intercept, slope),lty='dashed')
  }else{
    par(mfrow=c(1,1))
    plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2,xlim=lim, ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)')
    M <- lm(data$HNF1A.log10~data$Cpep.log10)
    print(paste(coef(M)[2], coef(M)["(Intercept)"]))
    abline(M)
    abline(h=0)
    abline(v=0)
    points_colorByDensity(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2)
  }
}
choose.slope_intercept(Islet_TTR_1st, "TTR", "V450.A", "B576.A","R660.A",0.5,1.7)
choose.slope_intercept(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",1.5,-1.5)
choose.slope_intercept(Islet_TTR_2nd, "TTR", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_NEUROD1_1st, "NEUROD1", "V450.A", "B576.A","R660.A","NA","NA")
choose.slope_intercept(Islet_NeuroD1_2nd, "NEUROD1", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A","NA","NA")
choose.slope_intercept(Islet_Six3_1st, "SIX3", "V450.A", "B576.A","R660.A","NA","NA")
choose.slope_intercept(Islet_Six3_2nd, "SIX3", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A","NA","NA")
choose.slope_intercept(Islet_A1CF_2nd, "A1CF", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A","NA","NA")
choose.slope_intercept(Islet_PKIB_2nd, "PKIB", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A","NA","NA")
choose.slope_intercept(Islet_TMED6_2nd, "TMED6", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_TMED6_3rd, "TMED6","V440.A","YG582.A","R660.A","NA","NA")
choose.slope_intercept(Islet_NKX22_2nd, "NKX2.2", "V450.A","R670.A","G575.A","NA","NA")
choose.slope_intercept(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A","NA","NA")

# Cpep.col, HNF1A.col, target.col
pair.plot <- function(data, targetName, Cpep.col, HNF1A.col, target.col, denCut1=0.1, levelCut1=0.8 ,png="FALSE",dataname="",slope="NA",intercept="NA"){
  points_colorByDensity<-function(x1,x2,pch=20,cex=2){
          df <- data.frame(x1,x2)
          x <- densCols(x1,x2, colramp=colorRampPalette(c(rep("darkblue",ceiling(30000/length(x1))),"green",colorRampPalette(c("orange","red"))(1))))
          points(x1,x2,pch=pch,cex=cex,col=x,xlab='',ylab='')
  }
  get_density <- function(x, y, ...) {
      require(MASS)
      dens <- MASS::kde2d(x, y, n=1000)
      ix <- findInterval(x, dens$x)
      iy <- findInterval(y, dens$y)
      ii <- cbind(ix, iy)
      return(dens$z[ii])
  }
  dist_point_line <- function(a, slope, intercept) {
      b = c(1, intercept+slope)
      c = c(-intercept/slope,0)
      v1 <- b - c
      v2 <- a - b
      m <- cbind(v1,v2)
      return(det(m))/sqrt(sum(v1*v1))
  }
  customized.resid <- function(a,slope,intercept){
    x <- a[1]
    y <- a[2]
    return(y-((slope*x)+intercept))
  }
  data$HNF1A.log10 <- log10(data[,HNF1A.col])
  data$Cpep.log10 <- log10(data[,Cpep.col])
  data$target.log10 <- log10(data[,target.col])
  data <- data[!is.infinite(rowSums(data)),]
  data <- data[complete.cases(data),]
  xlim <- range(data$HNF1A.log10)
  ylim <- range(data$Cpep.log10)
  lim <- c(min(c(xlim,ylim)), max(c(xlim,ylim)))
  den1 <- get_density(as.numeric(data$Cpep.log10), as.numeric(data$HNF1A.log10))
  print(paste(nrow(data),length(den1)))
  if(png=="TRUE"){
    png(paste("1213.",targetName,".",dataname,".png",sep=''),650,250)
  }
  par(mfrow=c(1,3))
  plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2,xlim=range(data$Cpep.log10), ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)')
  points_colorByDensity(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2)
  if(slope!="NA"){
    # data$resid <- apply(data[,c("Cpep.log10", "HNF1A.log10")], 1, function(x){dist_point_line(as.numeric(x[1:2]), slope =  as.numeric(as.character(slope)), intercept =  as.numeric(as.character(intercept)))})
    data$resid <- apply(data[,c("Cpep.log10", "HNF1A.log10")], 1, customized.resid,slope,intercept)
    abline(coef = c(intercept, slope),lty='dashed')

  }else{
    data$resid <- lm(data$HNF1A.log10~data$Cpep.log10)$residuals
    abline(lm(data$HNF1A.log10~data$Cpep.log10))
  }
  # ind1 <- which(den1<=quantile(den1,prob=denCut1) & data$HNF1A.log10>=quantile(data$HNF1A.log10,prob=levelCut1))
  print(quantile(data$resid,prob=levelCut1))
  ind1 <- which(den1<=quantile(den1,prob=denCut1) & data$resid>=quantile(data$resid,prob=levelCut1))
  plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)')
  points(data$Cpep.log10[ind1], data$HNF1A.log10[ind1], pch='.',cex=3,col='red')
  plot(data$Cpep.log10, data$target.log10, pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=range(data$target.log10), xlab='log10(Cpep)',ylab=paste('log10(',targetName,')',sep=''))
  points(data$Cpep.log10[ind1], data$target.log10[ind1], pch='.',cex=3,col='red')
  if(png=="TRUE"){
    dev.off()
  }
}

# TTR
pair.plot(Islet_TTR_1st, "TTR", "V450.A", "B576.A","R660.A",0.2,0.8,png="TRUE",dataname="1st",slope=0.5,intercept=1.7)
pair.plot(Islet_TTR_2nd, "TTR", "V450.A","R670.A","G575.A",0.1,0.8,png="TRUE",dataname="2nd",slope=1.6,intercept=-1.85)
pair.plot(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",0.2,0.9,png="TRUE",dataname="3rd",slope=1.3,intercept=-1.05)
# NEUROD1
pair.plot(Islet_NEUROD1_1st, "NEUROD1", "V450.A", "B576.A","R660.A",0.2,0.8,png="TRUE",dataname="1st",slope=0.5,intercept=1.55)
pair.plot(Islet_NeuroD1_2nd, "NEUROD1", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.5,intercept=1.31)
pair.plot(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A",0.2,0.8,png="TRUE",dataname="3rd",slope=1.5,intercept=-1.6)
# SIX3
pair.plot(Islet_Six3_1st, "SIX3", "V450.A", "B576.A","R660.A",0.2,0.8,png="TRUE",dataname="1st",slope=0.7,intercept=0.7)
pair.plot(Islet_Six3_2nd, "SIX3", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=1.50215498151906,intercept=-1.63)
pair.plot(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A",0.2,0.8,png="TRUE",dataname="3rd",slope=1.7,intercept=-2.2)
# A1CF
pair.plot(Islet_A1CF_2nd, "A1CF", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.9,intercept=0.16)
pair.plot(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A",0.2,0.8,png="TRUE",dataname="3rd",slope=1.2,intercept=-0.75)
#PKIB
pair.plot(Islet_PKIB_2nd, "PKIB", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.331614382166488,intercept=1.89004970715982)
pair.plot(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A",0.2,0.9,png="TRUE",dataname="3rd",slope=0.8,intercept=0.4)
# TMED6
pair.plot(Islet_TMED6_2nd, "TMED6", "V450.A","R670.A","G575.A",0.1,0.8,png="TRUE",dataname="2nd",slope=1,intercept=-0.15)
pair.plot(Islet_TMED6_3rd,"TMED6","V440.A","YG582.A","R660.A",0.3,0.9,png="TRUE",dataname="3rd",slope=0.9,intercept=0.1)
# NKX2.2
pair.plot(Islet_NKX22_2nd, "NKX2.2", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.349403440859443,intercept=1.80675358371385)
pair.plot(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A",0.3,0.9,png="TRUE",dataname="3rd",slope=1.5,intercept=-1.62)

# 1230, add limit for HNF1A
pair.plot <- function(data, targetName, Cpep.col, HNF1A.col, target.col, denCut1=0.1, levelCut1=0.8 ,levelCut2=0.8, png="FALSE",dataname="",slope="NA",intercept="NA",figure="FALSE",target.slope="NA",target.intercept="NA"){
  require(BSDA)
  points_colorByDensity<-function(x1,x2,pch=20,cex=2){
          df <- data.frame(x1,x2)
          x <- densCols(x1,x2, colramp=colorRampPalette(c(rep("darkblue",ceiling(30000/length(x1))),"green",colorRampPalette(c("orange","red"))(1))))
          points(x1,x2,pch=pch,cex=cex,col=x,xlab='',ylab='')
  }
  get_density <- function(x, y, ...) {
      require(MASS)
      dens <- MASS::kde2d(x, y, n=1000)
      ix <- findInterval(x, dens$x)
      iy <- findInterval(y, dens$y)
      ii <- cbind(ix, iy)
      return(dens$z[ii])
  }
  dist_point_line <- function(a, slope, intercept) {
      b = c(1, intercept+slope)
      c = c(-intercept/slope,0)
      v1 <- b - c
      v2 <- a - b
      m <- cbind(v1,v2)
      return(det(m))/sqrt(sum(v1*v1))
  }
  customized.resid <- function(a,slope,intercept){
    x <- a[1]
    y <- a[2]
    return(y-((slope*x)+intercept))
  }
  data$HNF1A.log10 <- log10(data[,HNF1A.col])
  data$Cpep.log10 <- log10(data[,Cpep.col])
  data$target.log10 <- log10(data[,target.col])
  data <- data[!is.infinite(rowSums(data)),]
  data <- data[complete.cases(data),]
  xlim <- range(data$HNF1A.log10)
  ylim <- range(data$Cpep.log10)
  lim <- c(min(c(xlim,ylim)), max(c(xlim,ylim)))
  den1 <- get_density(as.numeric(data$Cpep.log10), as.numeric(data$HNF1A.log10))
  print(paste(nrow(data),length(den1)))
  if(png=="TRUE"){
    png(paste("0103.",targetName,".",dataname,".png",sep=''),500,300)
  }
  par(mfrow=c(1,4))
  plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2,xlim=range(data$Cpep.log10), ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)',main=targetName)
  points_colorByDensity(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2)
  if(slope!="NA"){
    # data$resid <- apply(data[,c("Cpep.log10", "HNF1A.log10")], 1, function(x){dist_point_line(as.numeric(x[1:2]), slope =  as.numeric(as.character(slope)), intercept =  as.numeric(as.character(intercept)))})
    data$resid <- apply(data[,c("Cpep.log10", "HNF1A.log10")], 1, customized.resid,slope,intercept)
    abline(coef = c(intercept, slope),lty='dashed')
  }else{
    data$resid <- lm(data$HNF1A.log10~data$Cpep.log10)$residuals
    abline(lm(data$HNF1A.log10~data$Cpep.log10))
    x <- lm(data$HNF1A.log10~data$Cpep.log10)
    print(paste(x$coefficients[2], x$coefficients[1]))
  }
  print(quantile(data$resid,prob=levelCut1))
  ind1 <- which(den1<=quantile(den1,prob=denCut1) & data$resid>=quantile(data$resid,prob=levelCut1) & data$HNF1A.log10>=quantile(data$HNF1A.log10 ,prob=levelCut2))
  print(length(ind1))
  # plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=lim, xlab='log10(Cpep)',ylab='log10(HNF1A)')
  points(data$Cpep.log10[ind1], data$HNF1A.log10[ind1], pch='.',cex=3,col='red')
  plot(data$Cpep.log10, data$target.log10, pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=range(data$target.log10), xlab='log10(Cpep)',ylab=paste('log10(',targetName,')',sep=''))
  points_colorByDensity(data$Cpep.log10, data$target.log10, pch='.',cex=2)
  points(data$Cpep.log10[ind1], data$target.log10[ind1], pch='.',cex=3,col='red')
  legend("topright",legend=length(ind1))
  if(target.slope=="NA"){
    abline(lm(data$target.log10 ~ data$Cpep.log10))
    x <- lm(data$target.log10 ~ data$Cpep.log10)
    print(paste(x$coefficients[2], x$coefficients[1]))
  }else{
    abline(coef = c(target.intercept, target.slope),lty='dashed')
    data$target.resid <- apply(data[,c("Cpep.log10", "target.log10")], 1, customized.resid,target.slope,target.intercept)
    # peacock2(data[ind1,c("Cpep.log10", "target.log10")], data[-ind1,c("Cpep.log10", "target.log10")])
    # print(var.test(data$target.resid[ind1], data$target.resid[-ind1],)$p.value)
    target.t <- t.test(data$target.log10[ind1], data$target.log10[-ind1],alternative = "greater")
    resid.t <- t.test(data$target.resid[ind1], data$target.resid[-ind1],alternative = "greater")
    print(paste("target:",target.t$p.value))
    print(paste("residual:",resid.t$p.value))
    plot(density(data$target.log10[-ind1]),main=paste("target:",target.t$p.value))
    lines(density(data$target.log10[ind1]),col='red')
    plot(density(data$target.resid[-ind1]),main=paste("residual:",resid.t$p.value))
    lines(density(data$target.resid[ind1]),col='red')
    return(list(target=target.t, resid=resid.t))
  }
  if(png=="TRUE"){
    dev.off()
  }
  if(figure=="TRUE"){
    png(paste("0103.",targetName,".",dataname,".scatterOnly.Cpep_HNF1A.png",sep=''),300,300)
    par(mar=c(0,0,0,0))
    plot(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2,xlim=range(data$Cpep.log10), ylim=lim,xaxt="n",yaxt="n",xlab="",ylab="")
    points_colorByDensity(data$Cpep.log10, data$HNF1A.log10, pch='.',cex=2)
    dev.off()
    pdf(paste("0103.",targetName,".",dataname,".axis.Cpep_HNF1A.pdf",sep=''),5,5)
    par(mar=c(2,2,2,2))
    plot(data$Cpep.log10[ind1], data$HNF1A.log10[ind1],col='red', pch='.',cex=2,xlim=range(data$Cpep.log10), ylim=lim,xlab='log10(Cpep)',ylab='log10(HNF1A)')
    if(slope!="NA"){
      abline(coef = c(intercept, slope),lty='dashed')
    }else{
      abline(lm(data$HNF1A.log10~data$Cpep.log10))
    }
    dev.off()
    png(paste("0103.",targetName,".",dataname,".scatterOnly.Cpep_target.png",sep=''),300,300)
    par(mar=c(0,0,0,0))
    plot(data$Cpep.log10, data$target.log10, pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=range(data$target.log10), xaxt="n",yaxt="n",xlab="",ylab="")
    points_colorByDensity(data$Cpep.log10, data$target.log10, pch='.',cex=2)
    dev.off()
    png(paste("0103.",targetName,".",dataname,".scatterOnly.Cpep_target.highlight.png",sep=''),300,300)
    par(mar=c(0,0,0,0))
    plot(data$Cpep.log10[ind1], data$target.log10[ind1], col='red',pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=range(data$target.log10), xaxt="n",yaxt="n",xlab="",ylab="")
    points_colorByDensity(data$Cpep.log10, data$target.log10, pch='.',cex=2)
    dev.off()
    pdf(paste("0103.",targetName,".",dataname,".axis.Cpep_target.pdf",sep=''),5,5)
    par(mar=c(2,2,2,2))
    plot(data$Cpep.log10[ind1], data$target.log10[ind1],col='red', pch='.',cex=3,xlim=range(data$Cpep.log10), ylim=range(data$target.log10), xlab='log10(Cpep)',ylab=paste('log10(',targetName,')',sep=''))
    dev.off()
  }
}
# TTR
# pair.plot(Islet_TTR_1st, "TTR", "V450.A", "B576.A","R660.A",0.2,0.8,png="FALSE",dataname="1st",slope=0.5,intercept=1.7)
pair.plot(Islet_TTR_2nd, "TTR", "V450.A","R670.A","G575.A",0.1,0.8,0.7,png="FALSE",dataname="2nd",slope=1.2,intercept=-0.68)
pair.plot(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="3rd",slope=0.7,intercept=0.68)
# pair.plot(Islet_TTR_2nd, "TTR", "V450.A","R670.A","G575.A",0.1,0.8,0.7,png="TRUE",dataname="2nd",slope=1.2,intercept=-0.68)
# pair.plot(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="TRUE",dataname="3rd",slope=0.7,intercept=0.68)
# NEUROD1
pair.plot(Islet_NEUROD1_1st, "NEUROD1", "V450.A", "B576.A","R660.A",0.2,0.8,0.8,png="FALSE",dataname="1st",slope=0.5,intercept=1.55)
# pair.plot(Islet_NeuroD1_2nd, "NEUROD1", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.5,intercept=1.31)
pair.plot(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A",0.18,0.8,0.5,png="FALSE",dataname="3rd",slope=1.5,intercept=-1.6)
# pair.plot(Islet_NEUROD1_1st, "NEUROD1", "V450.A", "B576.A","R660.A",0.2,0.8,0.8,png="TRUE",dataname="1st",slope=0.5,intercept=1.55)
# pair.plot(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A",0.18,0.8,0.5,png="TRUE",dataname="3rd",slope=1.5,intercept=-1.6)
# SIX3
pair.plot(Islet_Six3_1st, "SIX3", "V450.A", "B576.A","R660.A",0.2,0.8,0.8,png="FALSE",dataname="1st",slope=0.7,intercept=0.65)
pair.plot(Islet_Six3_2nd, "SIX3", "V450.A","R670.A","G575.A",0.2,0.8,0.7,png="FALSE",dataname="2nd",slope=1.50215498151906,intercept=-1.63)
pair.plot(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A",0.2,0.85,0.5,png="FALSE",dataname="3rd",slope=1.7,intercept=-2.2)
# pair.plot(Islet_Six3_1st, "SIX3", "V450.A", "B576.A","R660.A",0.2,0.8,0.8,png="TRUE",dataname="1st",slope=0.7,intercept=0.65)
# pair.plot(Islet_Six3_2nd, "SIX3", "V450.A","R670.A","G575.A",0.2,0.8,0.7,png="TRUE",dataname="2nd",slope=1.50215498151906,intercept=-1.63)
# pair.plot(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A",0.2,0.85,0.5,png="TRUE",dataname="3rd",slope=1.7,intercept=-2.2)
# NKX2.2
pair.plot(Islet_NKX22_2nd, "NKX2.2", "V450.A","R670.A","G575.A",0.2,0.8,png="FALSE",dataname="2nd",slope=0.349403440859443,intercept=1.80675358371385)
pair.plot(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A",0.3,0.9,0.5,png="FALSE",dataname="3rd",slope=1.5,intercept=-1.62)
# pair.plot(Islet_NKX22_2nd, "NKX2.2", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.349403440859443,intercept=1.80675358371385)
# pair.plot(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A",0.3,0.9,0.5,png="TRUE",dataname="3rd",slope=1.5,intercept=-1.62)
# A1CF
pair.plot(Islet_A1CF_2nd, "A1CF", "V450.A","R670.A","G575.A",0.2,0.8,png="FALSE",dataname="2nd",slope=0.9,intercept=0.16)
pair.plot(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A",0.2,0.8,0.7,png="FALSE",dataname="3rd",slope=1.2,intercept=-0.75)
# pair.plot(Islet_A1CF_2nd, "A1CF", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.9,intercept=0.16)
# pair.plot(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A",0.2,0.8,0.7,png="TRUE",dataname="3rd",slope=1.2,intercept=-0.75)
#PKIB
pair.plot(Islet_PKIB_2nd, "PKIB", "V450.A","R670.A","G575.A",0.2,0.8,png="FALSE",dataname="2nd",slope=0.331614382166488,intercept=1.89004970715982)
pair.plot(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A",0.2,0.9,0.7,png="FALSE",dataname="3rd",slope=0.8,intercept=0.4)
# pair.plot(Islet_PKIB_2nd, "PKIB", "V450.A","R670.A","G575.A",0.2,0.8,png="TRUE",dataname="2nd",slope=0.331614382166488,intercept=1.89004970715982)
# pair.plot(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A",0.2,0.9,0.7,png="TRUE",dataname="3rd",slope=0.8,intercept=0.4)
# TMED6
pair.plot(Islet_TMED6_2nd, "TMED6", "V450.A","R670.A","G575.A",0.1,0.8,png="FALSE",dataname="2nd",slope=1,intercept=-0.15)
pair.plot(Islet_TMED6_3rd,"TMED6","V440.A","YG582.A","R660.A",0.3,0.9,0.7,png="FALSE",dataname="3rd",slope=0.9,intercept=0.1)
# pair.plot(Islet_TMED6_2nd, "TMED6", "V450.A","R670.A","G575.A",0.1,0.8,png="TRUE",dataname="2nd",slope=1,intercept=-0.15)
# pair.plot(Islet_TMED6_3rd,"TMED6","V440.A","YG582.A","R660.A",0.3,0.9,0.7,png="TRUE",dataname="3rd",slope=0.9,intercept=0.1)

pair.plot(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="3rd",slope=0.7,intercept=0.68,figure="TRUE")
pair.plot(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A",0.18,0.8,0.5,png="FALSE",dataname="3rd",slope=1.5,intercept=-1.6,figure="TRUE")
pair.plot(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A",0.2,0.85,0.5,png="FALSE",dataname="3rd",slope=1.7,intercept=-2.2,figure="TRUE")
pair.plot(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A",0.3,0.9,0.5,png="FALSE",dataname="3rd",slope=1.5,intercept=-1.62,figure="TRUE")
pair.plot(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A",0.2,0.8,0.7,png="FALSE",dataname="3rd",slope=1.2,intercept=-0.75,figure="TRUE")
pair.plot(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A",0.2,0.9,0.7,png="FALSE",dataname="3rd",slope=0.8,intercept=0.4,figure="TRUE")
pair.plot(Islet_TMED6_3rd,"TMED6","V440.A","YG582.A","R660.A",0.3,0.9,0.7,png="FALSE",dataname="3rd",slope=0.9,intercept=0.1,figure="TRUE")



pair.plot(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="3rd",slope=0.7,intercept=0.68,figure="FALSE",target.slope=1.35,target.intercept=-1.06)
pair.plot(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A",0.2,0.8,0.7,png="FALSE",dataname="3rd",slope=1.2,intercept=-0.75,figure="FALSE",target.slope=0.8,target.intercept=0.5)
pair.plot(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A",0.2,0.9,0.7,png="FALSE",dataname="3rd",slope=0.8,intercept=0.4,figure="FALSE",0.495,1.41)
pair.plot(Islet_TMED6_3rd,"TMED6","V440.A","YG582.A","R660.A",0.3,0.9,0.7,png="FALSE",dataname="3rd",slope=0.9,intercept=0.1,figure="FALSE",0.9, 0.18)
pair.plot(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A",0.18,0.8,0.5,png="FALSE",dataname="3rd",slope=1.5,intercept=-1.6,figure="FALSE",target.slope=0.5,target.intercept=1.29)
pair.plot(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A",0.2,0.85,0.5,png="FALSE",dataname="3rd",slope=1.7,intercept=-2.2,figure="FALSE",target.slope=1.28,target.intercept=-0.89)
pair.plot(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A",0.3,0.9,0.5,png="FALSE",dataname="3rd",slope=1.5,intercept=-1.62,figure="FALSE",target.slope=0.3,target.intercept=1.93)

setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")
Islet_NEUROD1_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,NeuroD1_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TTR_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_Six3_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_A1CF_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_NKX22_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,NKX2-2_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_PKIB_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet_TMED6_3rd <- read.table("1210/01092022/export_Islet12121_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')

pair.plot(Islet_TTR_3rd,"TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="3rd",slope=0.7,intercept=0.38,figure="TRUE",target.slope=1.2,target.intercept=-1.2)
pair.plot(Islet_A1CF_3rd,"A1CF","V440.A","YG582.A","R660.A",0.25,0.8,0.7,png="FALSE",dataname="3rd",slope=0.7,intercept=0.35,figure="TRUE",target.slope=0.8,target.intercept=0.4)
pair.plot(Islet_PKIB_3rd,"PKIB","V440.A","YG582.A","R660.A",0.25,0.9,0.7,png="FALSE",dataname="3rd",slope=0.5,intercept=1.2,figure="TRUE",0.495,1.91)
pair.plot(Islet_TMED6_3rd,"TMED6","V440.A","YG582.A","R660.A",0.3,0.9,0.7,png="FALSE",dataname="3rd",slope=0.6,intercept=0.8,figure="TRUE",0.7, 0.6)

pair.plot(Islet_NEUROD1_3rd,"NEUROD1","V440.A","YG582.A","R660.A",0.2,0.8,0.5,png="FALSE",dataname="3rd",slope=0.6,intercept=0.7,figure="TRUE",target.slope=0.2,target.intercept=2.55)
pair.plot(Islet_Six3_3rd,"SIX3","V440.A","YG582.A","R660.A",0.2,0.85,0.5,png="FALSE",dataname="3rd",slope=0.6,intercept=0.64,figure="TRUE",target.slope=1.08,target.intercept=-0.79)
pair.plot(Islet_NKX22_3rd,"NKX2.2","V440.A","YG582.A","R660.A",0.3,0.9,0.5,png="FALSE",dataname="3rd",slope=0.7,intercept=0.3,figure="TRUE",target.slope=0.3,target.intercept=2.53)

##region T2D experimenty 03/01/2022
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")
Islet112219_H_A1CF <- read.table("03012022/2022-02-28_MultiIslet/export_2022-02-28_MultiIslet_PE430_Islet112219_H_HNF1A,2f,Cpep,2f,A1CF_SSC_H_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet112219_H_SIX3 <- read.table("03012022/2022-02-28_MultiIslet/export_2022-02-28_MultiIslet_PE430_Islet112219_H_HNF1A,2f,Cpep,2f,Six3_SSC_H_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet112219_H_TMED6 <- read.table("03012022/2022-02-28_MultiIslet/export_2022-02-28_MultiIslet_PE430_Islet112219_H_HNF1A,2f,Cpep,2f,TMED6_SSC_H_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet61919_H_TMED6 <- read.table("03012022/2022-02-28_MultiIslet/export_2022-02-28_MultiIslet_PE430_Islet61919_H_HNF1A,2f,Cpep,2f,Tmed6_SSC_H_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet82819_T2D_TMED6 <- read.table("03012022/2022-02-28_MultiIslet/export_2022-02-28_MultiIslet_PE430_Islet82819_T2D_HNF1A,2f,Cpep,2f,TMED6_SSC_H_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet12420_T2D_TMED6 <- read.table("03012022/2022-02-28_MultiIslet/export_2022-02-28_MultiIslet_PE430_Islet12420_T2D_HNF1A,2f,Cpep,2f,TMED6_SSC_H_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')

pdf("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/03012022/2022-02-28_MultiIslet/plot.pdf",10,3)
pair.plot(Islet112219_H_A1CF,"Islet112219_H_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet112219_H",slope=0.2,intercept=2.58,figure="FALSE",target.slope=0.56880965367272,target.intercept=1.64135028909545)
pair.plot(Islet112219_H_SIX3,"Islet112219_H_SIX3","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet112219_H",slope=0.1,intercept=2.9,figure="FALSE",target.slope=0.8,target.intercept=0.55)
pair.plot(Islet112219_H_TMED6,"Islet112219_H_TMED6","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet112219_H",slope=0.1,intercept=2.95,figure="FALSE",target.slope=0.607245442685282,target.intercept=1.17325686154764)
pair.plot(Islet61919_H_TMED6,"Islet61919_H_TMED6","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet61919_H",slope="NA",intercept=2.95,figure="FALSE",target.slope=0.69982136088141,target.intercept=0.717865461670398)
pair.plot(Islet82819_T2D_TMED6,"Islet82819_T2D_TMED6","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet82819_T2D",slope=0.3,intercept=1.8,figure="FALSE",target.slope=0.631993610712464,target.intercept=1.08335521807772)
pair.plot(Islet12420_T2D_TMED6,"Islet12420_T2D_TMED6","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet12420_T2D",slope=1.4,intercept=-2.5,figure="FALSE",target.slope=0.646478612654032,target.intercept=1.00823276404817)
dev.off()

# 0304
setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments")
Islet111919_T2D_A1CF <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet111919_T2D_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet4419_H_A1CF <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet4419_H_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet51719_T2D_A1CF <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet51719_T2D_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet71619_H_A1CF <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet71619_H_HNF1A,2f,Cpep,2f,A1CF_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet71619_H_PKIB <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet71619_H_HNF1A,2f,Cpep,2f,PKIB_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet71619_H_SIX3 <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet71619_H_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet71619_H_TMED6 <- read.table("03042022/export_2022-03-04_MultiIslet_PE430_Islet71619_H_HNF1A,2f,Cpep,2f,TMED6_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')

pdf("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/03042022/plot.pdf",10,3)
pair.plot(Islet111919_T2D_A1CF,"Islet111919_T2D_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet111919_T2D_A1CF",slope=0.2,intercept=2.25,figure="FALSE",target.slope=0.9,target.intercept=0.25)
pair.plot(Islet4419_H_A1CF,"Islet4419_H_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet4419_H_A1CF",slope=0.274476467938781,intercept=2.1,figure="FALSE",target.slope=0.659470170265941,target.intercept=1.13363927759951)
pair.plot(Islet51719_T2D_A1CF,"Islet51719_T2D_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet51719_T2D_A1CF",slope=0.3,intercept=1.85,figure="FALSE",target.slope=0.9,target.intercept=0.3)
pair.plot(Islet71619_H_A1CF,"Islet71619_H_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_A1CF",slope=1,intercept=-0.45,figure="FALSE",target.slope=0.8,target.intercept=0.8)
pair.plot(Islet71619_H_PKIB,"Islet71619_H_PKIB","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_PKIB",slope=0.9,intercept=-0.1,figure="FALSE",target.slope=0.8,target.intercept=0.75)
pair.plot(Islet71619_H_SIX3,"Islet71619_H_SIX3","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_SIX3",slope=0.5,intercept=1.4,figure="FALSE",target.slope=1.2,target.intercept=-0.85)
pair.plot(Islet71619_H_TMED6,"Islet71619_H_TMED6","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_TMED6",slope=0.5,intercept=1.5,figure="FALSE",target.slope=0.9,target.intercept=0.05)
dev.off()

setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/03042022/")
pair.plot(Islet111919_T2D_A1CF,"Islet111919_T2D_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet111919_T2D_A1CF",slope=0.2,intercept=2.25,figure="TRUE",target.slope=0.9,target.intercept=0.25)
pair.plot(Islet4419_H_A1CF,"Islet4419_H_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet4419_H_A1CF",slope=0.274476467938781,intercept=2.1,figure="TRUE",target.slope=0.659470170265941,target.intercept=1.13363927759951)
pair.plot(Islet51719_T2D_A1CF,"Islet51719_T2D_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet51719_T2D_A1CF",slope=0.3,intercept=1.85,figure="TRUE",target.slope=0.9,target.intercept=0.3)
pair.plot(Islet71619_H_A1CF,"Islet71619_H_A1CF","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_A1CF",slope=1,intercept=-0.45,figure="TRUE",target.slope=0.8,target.intercept=0.8)
pair.plot(Islet71619_H_PKIB,"Islet71619_H_PKIB","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_PKIB",slope=0.9,intercept=-0.1,figure="TRUE",target.slope=0.8,target.intercept=0.75)
pair.plot(Islet71619_H_SIX3,"Islet71619_H_SIX3","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_SIX3",slope=0.5,intercept=1.4,figure="TRUE",target.slope=1.2,target.intercept=-0.85)
pair.plot(Islet71619_H_TMED6,"Islet71619_H_TMED6","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet71619_H_TMED6",slope=0.5,intercept=1.5,figure="TRUE",target.slope=0.9,target.intercept=0.05)

setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/03182022/")
Islet31622_H_TTR <- read.table("export_2022-03-04_MultiIslet_PE430_Islet31622_H_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet3922_H_TTR <- read.table("export_2022-03-04_MultiIslet_PE430_Islet3922_H_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
Islet3922_H_SIX3 <- read.table("export_2022-03-04_MultiIslet_PE430_Islet3922_H_HNF1A,2f,Cpep,2f,Six3_Cpep+.csv" ,stringsAsFactors=FALSE,header=T,sep=',')
Islet7821_T2D_TTR <- read.table("export_2022-03-04_MultiIslet_PE430_Islet7821_T2D_HNF1A,2f,Cpep,2f,TTR_Cpep+.csv",stringsAsFactors=FALSE,header=T,sep=',')
pdf("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/03182022/03182022.plot.pdf",10,3)
pair.plot(Islet31622_H_TTR,"Islet31622_H_TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet31622_H_TTR",slope=0.5,intercept=1.4,figure="FALSE",target.slope=0.849416730985827,target.intercept=0.594386053684639)
pair.plot(Islet3922_H_TTR,"Islet3922_H_TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet3922_H_TTR",slope=0.385830246862761,intercept=1.75,figure="FALSE",target.slope=0.906189214814577,target.intercept=0.385)
pair.plot(Islet3922_H_SIX3,"Islet3922_H_SIX3","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet3922_H_SIX3",slope=0.5,intercept=1.2,figure="FALSE",target.slope=0.784458167713625,target.intercept=0.88)
pair.plot(Islet7821_T2D_TTR,"Islet7821_T2D_TTR","V440.A","YG582.A","R660.A",0.2,0.9,0.8,png="FALSE",dataname="Islet7821_T2D_TTR",slope=0.5 ,intercept=1.15,figure="FALSE",target.slope=1.12589400139577 ,target.intercept=-0.71)
dev.off()

# include scRNA to comparrison
library(dplyr)
Islet12.scRNA.seurat3.filtered<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/RDS/Islet12.scRNA.seurat3.filtered")
beta<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Beta"))] %>% as.matrix
beta.scale<-Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Beta"))] %>% as.matrix
beta.scale.HNF1A <- beta.scale[which(beta.scale["HNF1A",]>0),]

setwd("/mnt/rstor/genetics/JinLab/ssz20/zshanshan/differentiation_ATAC/processed/scATAC_Islet/Anniya_experiments/plot_HNF1A_distribute")
filelis <- list.files(pattern="^export")

data <- read.table(filelis[1], stringsAsFactors=F,header=T,sep=',')
plot(density(data$YG582.A),xlim=c(0,6000),ylim=c(0,0.002))
for(i in c(1,3,6,7,8,10)){
  data <- read.table(filelis[i], stringsAsFactors=F,header=T,sep=',')
  lines(density(data$YG582.A),col='blue',lwd=2)
}
for(i in c(2,5,9)){
  data <- read.table(filelis[i], stringsAsFactors=F,header=T,sep=',')
  lines(density(data$YG582.A),col='red',lwd=2)
}
pdf("plot_HNF1A_distribute.pdf",10,5)
par(mfrow=c(1,2))
data <- read.table(filelis[1], stringsAsFactors=F,header=T,sep=',')
plot(density(log10(data$YG582.A)),xlim=c(2.9,4.1),ylim=c(0,6))
for(i in c(1,6,7,10)){
  data <- read.table(filelis[i], stringsAsFactors=F,header=T,sep=',')
  lines(density(log10(data$YG582.A)),col='blue',lwd=2)
  print(paste(i,median(log10(data$YG582.A))))
}
for(i in c(2,5,9,11)){
  data <- read.table(filelis[i], stringsAsFactors=F,header=T,sep=',')
  lines(density(log10(data$YG582.A)),col='red',lwd=2)
}
cutoff <- 3.2
HNF1Apos.fraction <- c()
for(i in c(1,6,7,10)){
  data <- read.table(filelis[i], stringsAsFactors=F,header=T,sep=',')
  HNF1Apos.fraction <- c(HNF1Apos.fraction, length(which(log10(data$YG582.A)>=cutoff))/nrow(data))
}
HNF1Apos.fraction.T2D <- c()
for(i in c(2,5,9,11)){
  data <- read.table(filelis[i], stringsAsFactors=F,header=T,sep=',')
  lines(density(log10(data$YG582.A)),col='red',lwd=2)
  HNF1Apos.fraction.T2D <- c(HNF1Apos.fraction.T2D, length(which(log10(data$YG582.A)>=cutoff))/nrow(data))
}
boxplot(list(HT=HNF1Apos.fraction,T2D=HNF1Apos.fraction.T2D),ylim=c(0,1))
stripchart(list(HT=HNF1Apos.fraction,T2D=HNF1Apos.fraction.T2D), method = "jitter", vertical = TRUE, add = TRUE)
legend("topright",legend=wilcox.test(HNF1Apos.fraction,HNF1Apos.fraction.T2D)$p.value)
dev.off()

##endregion flowcytometry
