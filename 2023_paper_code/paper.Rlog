
library(Matrix.utils)
library(Seurat,lib.loc="~/Chip-seq/ATAC/scATAC/Clusteringtest/Seurat3")
library(pdist)
library(e1071)  ## This is for SVM classification
library(EZsinglecell)
library(dplyr)
library(reshape2)
SeuratALL.filtered.0.6<-readRDS("~/Dropseq/DGEanalysis/Islet412+511+919+T2D1+S4/workplaceLink/2017.9.21.revise/927.All.filtered.ob")
dic<-readRDS("~/Chip-seq/ATAC/scATAC/IsletscATAC/donor.dic")
source("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/scATAC.Rfun")
source("~/lib/dropseqlib/analysisscript/Newfun.R")
Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
Islet12.Endo.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.Endo.scRNA.seurat3.filtered")
##region Step 1, Loading data, matrix of scATAC and matrix of scRNA
library(Matrix.utils)
library(reshape2)
Islet.scATAC.dac.biggenes.Mtx.long<-read.table("Islet.scATAC.dac.biggeneNew")
Islet.scATAC.dac.Bin10K.Mtx.long<-read.table("Islet.scATAC.dac.Bin10K")
Islet.scATAC.dac.Bin5K.Mtx.long<-read.table("Islet.scATAC.dac.Bin5K")
Islet.scATAC.dac.IsletALLPeak.Mtx.long<-read.table("Islet.scATAC.dac.IsletALLPeak")
Islet.scATAC.metadata<-read.table("Islet.scATAC.metadata")
# Make biggene sparse matrix
Islet.scATAC.dac.biggenes.Mtx.long.filtered<-subset(Islet.scATAC.dac.biggenes.Mtx.long,V1 %in% Islet.scATAC.metadata$Name)
names(Islet.scATAC.dac.biggenes.Mtx.long.filtered)<-c("Cell","Gene","Counts")
Islet.scATAC.dac.biggenes.Mtx<-dMcast(Islet.scATAC.dac.biggenes.Mtx.long.filtered,Gene~Cell)
colnames(Islet.scATAC.dac.biggenes.Mtx)<-gsub("Cell","",colnames(Islet.scATAC.dac.biggenes.Mtx))
saveRDS(Islet.scATAC.dac.biggenes.Mtx,"mydir/Islet.scATAC.dac.biggenes.Mtx")
# Make AllPeak sparse matrix
Islet.scATAC.dac.IsletALLPeak.Mtx.long.filtered<-subset(Islet.scATAC.dac.IsletALLPeak.Mtx.long,V1 %in% Islet.scATAC.metadata$Name)
names(Islet.scATAC.dac.IsletALLPeak.Mtx.long.filtered)<-c("Cell","Gene","Counts")
Islet.scATAC.dac.IsletALLPeak.Mtx<-dMcast(Islet.scATAC.dac.IsletALLPeak.Mtx.long.filtered,Gene~Cell)
colnames(Islet.scATAC.dac.IsletALLPeak.Mtx)<-gsub("Cell","",colnames(Islet.scATAC.dac.IsletALLPeak.Mtx))
saveRDS(Islet.scATAC.dac.IsletALLPeak.Mtx,"mydir/Islet.scATAC.dac.IsletALLPeak.Mtx")
# Make Bin10K sparse matrix
Islet.scATAC.dac.Bin10K.Mtx.long.filtered<-subset(Islet.scATAC.dac.Bin10K.Mtx.long,V1 %in% Islet.scATAC.metadata$Name)
names(Islet.scATAC.dac.Bin10K.Mtx.long.filtered)<-c("Cell","Gene","Counts")
Islet.scATAC.dac.Bin10K.Mtx<-dMcast(Islet.scATAC.dac.Bin10K.Mtx.long.filtered,Gene~Cell)
colnames(Islet.scATAC.dac.Bin10K.Mtx)<-gsub("Cell","",colnames(Islet.scATAC.dac.Bin10K.Mtx))
saveRDS(Islet.scATAC.dac.Bin10K.Mtx,"mydir/Islet.scATAC.dac.Bin10K.Mtx")
# Make Bin5K sparse matrix
Islet.scATAC.dac.Bin5K.Mtx.long.filtered<-subset(Islet.scATAC.dac.Bin5K.Mtx.long,V1 %in% Islet.scATAC.metadata$Name)
names(Islet.scATAC.dac.Bin5K.Mtx.long.filtered)<-c("Cell","Gene","Counts")
Islet.scATAC.dac.Bin5K.Mtx<-dMcast(Islet.scATAC.dac.Bin5K.Mtx.long.filtered,Gene~Cell)
colnames(Islet.scATAC.dac.Bin5K.Mtx)<-gsub("Cell","",colnames(Islet.scATAC.dac.Bin5K.Mtx))
saveRDS(Islet.scATAC.dac.Bin5K.Mtx,"mydir/Islet.scATAC.dac.Bin5K.Mtx")

Islet.scATAC.dac.biggenes.Mtx<-readRDS("mydir/Islet.scATAC.dac.biggenes.Mtx")
Islet.scATAC.dac.IsletALLPeak.Mtx<-readRDS("mydir/Islet.scATAC.dac.IsletALLPeak.Mtx")
Islet.scATAC.dac.Bin10K.Mtx<-readRDS("mydir/Islet.scATAC.dac.Bin10K.Mtx")
Islet.scATAC.dac.Bin5K.Mtx<-readRDS("mydir/Islet.scATAC.dac.Bin5K.Mtx")

##endregion Step 1


##region ##2020-8-11 benchmark scATAC clustering

  ##region  Prepare scRNAseq data
  Islet.scATAC.metadata<-read.table("~/Chip-seq/ATAC/scATAC/IsletscATAC/QC/Islet.scATAC.metadata")
  row.names(Islet.scATAC.metadata)<-Islet.scATAC.metadata$Name
  Islet.scRNA.seurat3<-readRDS("/mnt/rstor/genetics/JinLab/sxz694/01.drop_seq/05.Islet/03.3rd/zz.redocluster/04.cell_type.names_genes/zz.chen.4_27_2020/All_islet_30.OBJ3.subset.with_cell_type.rds")
  Islet.scRNA.seurat3@meta.data$Cell_type<-mapvalues(Islet.scRNA.seurat3@meta.data$Cell_type,from=c("Acinar","Alpha","Alpha_proliferating","Beta","Delta","Duct","Endothelial","Epsilon","PP","PSC_active","PSC_proliferating","PSC_quiescent"),to=c("Acinar","Alpha","Alpha","Beta","Delta","Duct","Endothelial","Epsilon","PP","PSC","PSC","PSC"))
  Secondary_Filtering.panel<-Islet.scRNA.seurat3@assays$RNA@counts[c("INS","GCG","PPY","SST","COL1A2","KRT19"),] %>% t() %>% as.data.frame() %>% Tomerge_v2(.,Islet.scRNA.seurat3@meta.data[,"Cell_type",drop=F])
  INScut<-30  #10%
  GCGcut<-20 #10%
  PPYcut<-33 #10%
  SSTcut<-57 #10%
  COLcut<-2 #10%
  KRTcut<-1 #10%
  tofilter.names.alpha<-row.names(subset(Secondary_Filtering.panel,Cell_type=="Alpha"  & (GCG<GCGcut |PPY>PPYcut | SST >SSTcut | INS>INScut |COL1A2>COLcut| KRT19>KRTcut )))
  tofilter.names.beta<-row.names(subset(Secondary_Filtering.panel,Cell_type=="Beta"  & (INS<INScut |PPY>PPYcut | SST >SSTcut | GCG>GCGcut |COL1A2>COLcut| KRT19>KRTcut)))
  tofilter.names.delta<-row.names(subset(Secondary_Filtering.panel,Cell_type=="Delta"  & (SST<SSTcut |PPY>PPYcut | INS >INScut | GCG>GCGcut |COL1A2>COLcut| KRT19>KRTcut)))
  tofilter.names.pp<-row.names(subset(Secondary_Filtering.panel,Cell_type=="PP"  & (PPY<PPYcut | INS>INScut | SST >SSTcut | GCG>GCGcut |COL1A2>COLcut| KRT19>KRTcut)))
  tofilter.names.duct<-row.names(subset(Secondary_Filtering.panel,Cell_type=="Duct" & (KRT19<KRTcut| INS>INScut | SST >SSTcut | GCG>GCGcut | PPY >PPYcut | COL1A2>COLcut)))
  tofilter.names.psc<-row.names(subset(Secondary_Filtering.panel,Cell_type=="PSC" & (COL1A2< COLcut |INS>INScut | SST >SSTcut | GCG>GCGcut | PPY >PPYcut | KRT19>KRTcut)))
  tofilter.names.acinarPSC<-row.names(subset(Secondary_Filtering.panel,Cell_type %in% c("Acinar","Endothelial")  & (INS>INScut | SST >SSTcut | GCG>GCGcut | PPY >PPYcut)))
  tofilter.names<-c(tofilter.names.alpha,tofilter.names.beta,tofilter.names.delta,tofilter.names.pp,tofilter.names.duct,tofilter.names.psc,tofilter.names.acinarPSC)

  ##region Plot for supplementary fig1
  tofilter.names.INS<-row.names(subset(Secondary_Filtering.panel, Cell_type!="Beta" &INS>INScut))
  tofilter.names.GCG<-row.names(subset(Secondary_Filtering.panel, Cell_type!="Alpha" &GCG>GCGcut))
  tofilter.names.PPY<-row.names(subset(Secondary_Filtering.panel, Cell_type!="PP" &PPY>PPYcut))
  tofilter.names.SST<-row.names(subset(Secondary_Filtering.panel, Cell_type!="Delta" &SST>SSTcut))
  tofilter.names.toplot<-list(tofilter.names.INS,tofilter.names.GCG,tofilter.names.SST,tofilter.names.PPY)
ps<-list()
for(i in 1:4){
gene<-c("INS","GCG","SST","PPY")[i]
FT<-tofilter.names.toplot[[i]]
datatoplot<-ifelse(row.names(Secondary_Filtering.panel) %in% FT,"Remove","") %>% cbind(Secondary_Filtering.panel,tag=.)
datatoplot$Cell_type<-factor(datatoplot$Cell_type,levels=c("Beta","Alpha","Delta","PP","Duct","Acinar","PSC","Endothelial"))
datatoplot<-datatoplot[complete.cases(datatoplot),]
p<-ggplot(datatoplot)+aes_string("Cell_type",gene,color="tag",size="tag")+geom_jitter()+scale_color_manual(values=c("black","red"))+scale_size_manual(values=c(0.1,0.6))#+theme_void()
ps<-c(ps,list(p))
}
  setwd("Fig1.Clustering/")
  png("Secondary.Filter.png",height=2000,width=2500,res=300)
  grid.arrange(grobs=ps)
  dev.off()
  ##endregion Plot for supplementary fig1

  # Generate Meta.data after secondary filtering
  Islet.scRNA.seurat3.meta.filtered<-Islet.scRNA.seurat3@meta.data[!row.names(Islet.scRNA.seurat3@meta.data) %in% tofilter.names,] %>% subset(.,nCount_RNA>=1000)
  Islet.Endo.scRNA.seurat3.meta.filtered<-subset(Islet.scRNA.seurat3.meta.filtered,Cell_type %in% c("Alpha","Beta","Delta","PP"))
  # Clustering for all cells
  Islet12.scRNA.seurat3.filtered<-docluster(Islet.scRNA.seurat3@assays$RNA@counts[,row.names(Islet.scRNA.seurat3.meta.filtered)],meta=Islet.scRNA.seurat3.meta.filtered,reso=0.6,nGene=2000,mincell=3,minfeature=200)
  # Clustering for endocrine cells
  names(Islet.Endo.scRNA.seurat3.meta.filtered)[5]<-"Donor"
  Islet12.Endo.scRNA.seurat3.filtered<-docluster(Islet.scRNA.seurat3@assays$RNA@counts[,row.names(Islet.Endo.scRNA.seurat3.meta.filtered)],meta=Islet.Endo.scRNA.seurat3.meta.filtered[,c("Donor","Cell_type")],reso=0.6,nGene=1000,mincell=3,minfeature=200)
  FindNeighbors(Islet12.scRNA.seurat3.filtered)
  Islet12.Endo.scRNA.seurat3.filtered <- FindNeighbors(Islet12.Endo.scRNA.seurat3.filtered, dims = 1:20)
  Islet12.Endo.scRNA.seurat3.filtered <- FindClusters(Islet12.Endo.scRNA.seurat3.filtered, resolution = 0.2)
  Islet12.Endo.scRNA.seurat3.filtered <- RunUMAP(Islet12.Endo.scRNA.seurat3.filtered, dims = 1:20)
  # Third filtering for endo
  ThirdFilter<-subset(Islet12.Endo.scRNA.seurat3.filtered@meta.data,(Cell_type=="Alpha" & !RNA_snn_res.0.2 %in% c(1,2,3)) |(Cell_type=="Beta" & !RNA_snn_res.0.2 %in% c(0)) | (Cell_type=="PP" & !RNA_snn_res.0.2 %in% c(4))|(Cell_type=="Delta" & !RNA_snn_res.0.2 %in% c(5))) %>% row.names
  CellsToKeep<-row.names(Islet12.Endo.scRNA.seurat3.filtered@meta.data)[!row.names(Islet12.Endo.scRNA.seurat3.filtered@meta.data) %in% ThirdFilter]
  Islet12.Endo.scRNA.seurat3.filtered<-subset(Islet12.Endo.scRNA.seurat3.filtered,cells=CellsToKeep)
  # Third filtering also filter for all cells
  CellsToKeep<-row.names(Islet12.scRNA.seurat3.filtered@meta.data)[!row.names(Islet12.scRNA.seurat3.filtered@meta.data) %in% ThirdFilter]
  Islet12.scRNA.seurat3.filtered<-subset(Islet12.scRNA.seurat3.filtered,cells=CellsToKeep)
  #
  Islet12.scRNA.seurat3.filtered@meta.data$Donor<-dic[Islet12.scRNA.seurat3.filtered@meta.data$Sample,]
  Islet12.Endo.scRNA.seurat3.filtered@meta.data$DonorName<-dic[Islet12.Endo.scRNA.seurat3.filtered@meta.data$Donor,]
  # Tovisulize the clustering
  Tomerge_v2(Islet12.scRNA.seurat3.filtered@reductions$umap@cell.embeddings,Islet12.scRNA.seurat3.filtered@meta.data) %>% ggplot(.)+aes(UMAP_1,UMAP_2,color=Cell_type)+geom_point()
  Tomerge_v2(Islet12.Endo.scRNA.seurat3.filtered@reductions$umap@cell.embeddings,Islet12.Endo.scRNA.seurat3.filtered@meta.data) %>% ggplot(.)+aes(UMAP_1,UMAP_2,color=Cell_type)+geom_point()
  # Save the scRNA data adter cleaning
  # saveRDS(Islet12.scRNA.seurat3.filtered,"mydir/Islet12.scRNA.seurat3.filtered")
  # saveRDS(Islet12.Endo.scRNA.seurat3.filtered,"mydir/Islet12.Endo.scRNA.seurat3.filtered")
  Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
  Islet12.Endo.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.Endo.scRNA.seurat3.filtered")
  CelltypeCopo<-as.data.frame(table(Islet12.scRNA.seurat3.filtered@meta.data$Cell_type))
  CelltypeCopo$ratio<-CelltypeCopo$Freq/sum(CelltypeCopo$Freq)
  ##endregion Method1.1  Prepare scRNAseq data

  ##region  2020-8-28-a CCA+SVM+KNN clustering with all cells 37780 cells
   Islet12ALL.scATAC.FILTER<-readRDS("mydir/Islet12ALL.scATAC.FILTER")
  # Islet12ALL.scATAC.FILTER<-readRDS("mydir/Islet12ALL.scATAC.FILTER.HiQ")
  library(e1071)
  Islet.scATAC.metadata.HiQ<-subset(Islet.scATAC.metadata,PeakRatio>0.25 & Fragments>2000)
  Islet12ALL.scATAC.FILTER<-RunscATACclustering.Filter(Mergedset=Islet.scATAC.dac.biggenes.Mtx[,Islet.scATAC.metadata.HiQ$Name],atacmeta=Islet.scATAC.metadata.HiQ,ref=Islet12.scRNA.seurat3.filtered,cl="Cell_type")
  saveRDS(Islet12ALL.scATAC.FILTER,"mydir/Islet12ALL.scATAC.FILTER.HiQ")
  # saveRDS(Islet12ALL.scATAC.FILTER,"mydir/Islet12ALL.scATAC.FILTER")
  Islet12ALL.scATAC.FILTER<-readRDS("mydir/Islet12ALL.scATAC.FILTER")
  ## Step 1 Split the rna and atac
  cca.rna<-Islet12ALL.scATAC.FILTER$cca.1000.L2normed[!grepl("TA:Z",row.names(Islet12ALL.scATAC.FILTER$cca.1000.L2normed)),]
  cca.atac<-Islet12ALL.scATAC.FILTER$cca.1000.L2normed[grepl("TA:Z",row.names(Islet12ALL.scATAC.FILTER$cca.1000.L2normed)),]
  cca.rna.celltype<-Tomerge_v2(cca.rna,Islet12.scRNA.seurat3.filtered@meta.data[,"Cell_type",drop=F])
  ## Step2: Predict celltypes using the trained model SVM
  # s<-sample(nrow(cca.rna.celltype),6000)
  cca.rna.celltype_train<-cca.rna.celltype#[s,]
  svmfit<-svm(Cell_type~.,data=cca.rna.celltype_train, kernel="radial",cost=10,scale=T)
  p1<-predict(svmfit,cca.atac,type="class",decision.value=T) ##Actually
  # saveRDS(p1,"mydir/p1.svm")
  p1<-readRDS("mydir/p1.svm")
  ## Step 3 Visulize on UMAP
  myconfig<-umap.defaults
  myconfig$a<-5
  myconfig$b<-0.5
  atacrna.umap<-umap(Islet12ALL.scATAC.FILTER$cca.1000.L2normed,config=myconfig)
  Islet12.umap.meta<-data.frame(atacrna.umap$layout)
  names(Islet12.umap.meta)<-c("UMAP1","UMAP2")
  Islet12.umap.meta$tech<-ifelse(grepl("TA:Z",row.names(Islet12.umap.meta)),"ATAC","RNA")
  Islet12.umap.meta<-Tomerge_v2(Islet12.umap.meta,Islet12.scRNA.seurat3.filtered@meta.data[,"Cell_type",drop=F],leavex=T)
  Islet12.umap.meta<-Tomerge_v2(Islet12.umap.meta,data.frame(p1))
  plot1<-Islet12.umap.meta[order(Islet12.umap.meta$tech,na.last=F),]%>% ggplot(.)+aes(UMAP1,UMAP2,color=Cell_type)+geom_point(size=0.5)+ guides(colour = guide_legend(override.aes = list(size=10)))+ggtitle("RNA CellType Label")
  plot2<-subset(Islet12.umap.meta,tech=="ATAC") %>% ggplot(size=0.5)+aes(UMAP1,UMAP2,color=p1)+geom_point(size=0.5)+ guides(colour = guide_legend(override.aes = list(size=10)))+ggtitle("Predicted ATAC CellType Label")

  SVM.KNN<-Tomerge_v2(subset(Islet12.umap.meta,tech=="ATAC"),Islet12ALL.scATAC.FILTER$DoubletsAnalysis[,c("First","Second","ratio","Fragments")])
  # saveRDS(SVM.KNN,"mydir/SVM.KNN")
  Doublets1<- subset(SVM.KNN,ratio<=2) %>% row.names
  Doublets2<-subset(SVM.KNN,First %in% c("Beta","Alpha","PSC") & Second %in% c("Beta","Alpha","PSC")) %>% subset(.,ratio<=4) %>% row.names
  Doublets3<-subset(SVM.KNN,First %in% c("PSC")) %>% subset(.,ratio<=100000) %>% row.names
  Doublets5<-subset(SVM.KNN,First %in% c("Duct")) %>% subset(.,ratio<=100000) %>% row.names
  Doublets4<-subset(SVM.KNN,First %in% c("Beta","Alpha","Delta","PP") & Second %in% c("PSC")) %>% subset(.,ratio<=16) %>% row.names
  Doublets5<-subset(SVM.KNN,First %in% c("Alpha") & Second %in% c("PSC")) %>% subset(.,ratio<=100000) %>% row.names
  Doublets6<-subset(SVM.KNN,First %in% c("PP") & Second %in% c("Alpha")) %>% subset(.,ratio<=4) %>% row.names
  Doublets7<-subset(SVM.KNN,First %in% c("Beta","Alpha","Delta") & Second %in% c("Duct")) %>% subset(.,ratio<=16) %>% row.names
  Doublets8<-subset(SVM.KNN,First %in% c("Beta","Alpha") & Second %in% c("Duct")) %>% subset(.,ratio<=100000) %>% row.names
  # Doublets3<-subset(SVM.KNN,First %in% c("Beta","Alpha") & Second=="PSC") %>% subset(.,ratio<=100) %>% row.names
  # Doublets4<-subset(SVM.KNN,First %in% c("Beta","Alpha") & Second=="PSC") %>% subset(.,ratio<=100) %>% row.names
  SVM.KNN.filtered<-SVM.KNN[!row.names(SVM.KNN) %in% unique(c(Doublets1,Doublets2,Doublets3,Doublets4,Doublets5,Doublets6,Doublets7,Doublets8)),]
  SVM.KNN.filtered<-SVM.KNN.filtered[as.character(SVM.KNN.filtered$p1)==as.character(SVM.KNN.filtered$First),]

PSC.TominusAlpha<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="PSC",]),] %>% .[order(abs(.[,"Alpha/PSC"])),] %>% .[1:400,"Alpha/PSC"] %>% names  # Saved
Alpha.TominusPSC<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Alpha",]),] %>% .[order(abs(.[,"Alpha/PSC"])),] %>% .[1:500,"Alpha/PSC"] %>% names # saved
SVM.KNN.filtered<-SVM.KNN.filtered[!row.names(SVM.KNN.filtered) %in% c(Alpha.TominusPSC,PSC.TominusAlpha,PP.TominusAlpha),]
SVM.KNN.filtered<-readRDS("mydir/SVM.KNN.filtered")
PP.TominusAlpha<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="PP",]),] %>% .[order(abs(.[,"Alpha/PP"])),] %>% .[1:50,"Alpha/PP"] %>% names  # Not saved yet
Duct.TominusAlpha<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Duct",]),] %>% .[order(abs(.[,"Alpha/Duct"])),] %>% .[1:800,"Alpha/Duct"] %>% names  #300
Duct.TominusBeta<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Duct",]),] %>% .[order(abs(.[,"Beta/Duct"])),] %>% .[1:900,"Beta/Duct"] %>% names  #250
Beta.TominusPSC<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Beta",]),] %>% .[order(abs(.[,"Beta/PSC"])),] %>% .[1:250,"Beta/PSC"] %>% names
Alpha.TominusPSC<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Alpha",]),] %>% .[order(abs(.[,"Alpha/PSC"])),] %>% .[1:250,"Alpha/PSC"] %>% names
Alpha.TominusDuct<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Alpha",]),] %>% .[order(abs(.[,"Alpha/Duct"])),] %>% .[1:250,"Alpha/Duct"] %>% names
Delta.TominusDuct<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="Delta",]),] %>% .[order(abs(.[,"Duct/Delta"])),] %>% .[1:40,"Duct/Delta"] %>% names
PSC.TominusAlpha<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="PSC",]),] %>% .[order(abs(.[,"Alpha/PSC"])),] %>% .[1:380,"Alpha/PSC"] %>% names
# PSC.TominusBeta<-attr(p1,"decision.values")[row.names(SVM.KNN.filtered[SVM.KNN.filtered$p1=="PSC",]),] %>% .[order(abs(.[,"Beta/PSC"])),] %>% .[1:50,"Beta/PSC"] %>% names

SVM.KNN.filtered.final<-SVM.KNN.filtered[!row.names(SVM.KNN.filtered) %in% c(PP.TominusAlpha,Duct.TominusAlpha,Duct.TominusBeta,Beta.TominusPSC,Alpha.TominusPSC,Alpha.TominusDuct,Delta.TominusDuct,PSC.TominusAlpha),]   #,PSC.TominusBeta
# saveRDS(SVM.KNN.filtered.final,"mydir/SVM.KNN.filtered.final")

  # Doublets4<-subset(SVM.KNN.filtered,p1 %in% c("Alpha","Beta","PSC","Duct") &Fragments<2000) %>% row.names
  # SVM.KNN.filtered<-SVM.KNN.filtered[!row.names(SVM.KNN.filtered) %in% Doublets4,]
  # saveRDS(SVM.KNN,"mydir/SVM.KNN")
  # saveRDS(SVM.KNN.filtered,"mydir/SVM.KNN.filtered")
SVM.KNN.filtered<-readRDS("mydir/SVM.KNN.filtered")
SVM.KNN.filtered.final<-readRDS("mydir/SVM.KNN.filtered.final")

##endregion  CCA+SVM+KNN clustering with all cells 37780 cells

  ##region 2020-8-28-a Make tracks for defined 7 cell types
#ALL data
SVM.KNN.filtered.final.print<-SVM.KNN.filtered.final[,"p1",drop=F] %>% subset(.,!p1 %in% c("Endothelial","Epsilon"))

write.table(SVM.KNN.filtered.final.print,"SVM.KNN.filtered.dic.Final.tab",quote=F,sep="\t",row.names=T,col.names=F)

"
~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step1.pl SVM.KNN.filtered.dic.Final.tab  SVM.KNN.filteredFinal
~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step2.sh Acinar.SVM.KNN.filteredFinal.bed Alpha.SVM.KNN.filteredFinal.bed Beta.SVM.KNN.filteredFinal.bed Delta.SVM.KNN.filteredFinal.bed Duct.SVM.KNN.filteredFinal.bed PP.SVM.KNN.filteredFinal.bed PSC.SVM.KNN.filteredFinal.bed
"
"
track type=bigWig name=Acinar.SVM.KNN.filteredFinal.sorted.bw description=Acinar.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.Acinar.SVM.KNN.filteredFinal.sorted.bw color=255,0,0

track type=bigWig name=Alpha.SVM.KNN.filteredFinal.sorted.bw description=Alpha.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.Alpha.SVM.KNN.filteredFinal.sorted.bw color=0,102,204

track type=bigWig name=Beta.SVM.KNN.filteredFinal.sorted.bw description=Beta.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.Beta.SVM.KNN.filteredFinal.sorted.bw color=51,153,102

track type=bigWig name=Delta.SVM.KNN.filteredFinal.sorted.bw description=Delta.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.Delta.SVM.KNN.filteredFinal.sorted.bw color=153,51,255

track type=bigWig name=Duct.SVM.KNN.filteredFinal.sorted.bw description=Duct.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.Duct.SVM.KNN.filteredFinal.sorted.bw color=255,102,0

track type=bigWig name=PP.SVM.KNN.filteredFinal.sorted.bw description=PP.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.PP.SVM.KNN.filteredFinal.sorted.bw color=204,102,0

track type=bigWig name=PSC.SVM.KNN.filteredFinal.sorted.bw description=PSC.SVM.KNN.filteredFinal.sorted.bw visibility=full autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/tmp.PSC.SVM.KNN.filteredFinal.sorted.bw color=255,153,204

"

##endregion

  ##region 2020-8-28-b Visulize the clustering umap
  Islet.scATAC.dac.biggenes.Mtx<-readRDS("mydir/Islet.scATAC.dac.biggenes.Mtx")
  Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
  Islet.scATAC.metadata<-read.table("~/Chip-seq/ATAC/scATAC/IsletscATAC/QC/Islet.scATAC.metadata")
  row.names(Islet.scATAC.metadata)<-Islet.scATAC.metadata$Name
  SVM.KNN.filtered<-readRDS("mydir/SVM.KNN.filtered")
  CellToremove.1<-row.names(subset(SVM.KNN.filtered,p1 %in% c("Alpha","Beta","PSC","Duct") & Fragments<3000))
  CellToremove.2<-row.names(rbind(subset(SVM.KNN.filtered,p1=="Alpha" &Second=="PP"),subset(SVM.KNN.filtered,p1=="Alpha" &Second=="Delta"),subset(SVM.KNN.filtered,p1=="Delta" &Second=="PP"),subset(SVM.KNN.filtered,p1=="PP" &Second=="Delta")))
  CellToremove.3<-subset(SVM.KNN.filtered,p1=="Alpha" &ratio<10) %>% row.names
  SVM.KNN.filtered.Visulize<-SVM.KNN.filtered[!row.names(SVM.KNN.filtered) %in% c(CellToremove.1,CellToremove.2,CellToremove.3),]
Islet12.scRNA.seurat3.filtered.sub<-readRDS("mydir/Islet12.scRNA.seurat3.filtered.sub")
Islet12ALL.coembed.Visulize<-RunscATACclustering.v2(Mergedset=Islet.scATAC.dac.biggenes.Mtx[,row.names(SVM.KNN.filtered.Visulize)],atacmeta=subset(Islet.scATAC.metadata,Name %in% row.names(SVM.KNN.filtered.Visulize)),ref=Islet12.scRNA.seurat3.filtered.sub,kw=25)
Islet12ALL.coembed.Visulize[[1]] <- FindNeighbors(Islet12ALL.coembed.Visulize[[1]], dims = 1:30)
Islet12ALL.coembed.Visulize[[1]] <- FindClusters(Islet12ALL.coembed.Visulize[[1]], resolution = 0.2)

Islet12ALL.coembed.Visulize.meta<-Tomerge_v2(Islet12ALL.coembed.Visulize[[1]]@meta.data,SVM.KNN.filtered.Visulize[,"p1",drop=F]) %>% Tomerge_v2(.,Islet12ALL.coembed.Visulize[[1]]@reductions$umap@cell.embeddings)
Islet12ALL.coembed.Visulize.meta.atac<-subset(Islet12ALL.coembed.Visulize.meta,tech=="ATAC")
Islet12ALL.coembed.Visulize.meta.atac$Clustering.celltype<-mapvalues(Islet12ALL.coembed.Visulize.meta.atac$integrated_snn_res.0.2,from=c(0,8,11,1,6,4,5,2,3,7,9),to=c("Beta","Beta","Beta","Alpha","Alpha","PP|Delta","Delta","Duct","PSC","Acinar","Endothelial"))
Islet12ALL.coembed.Visulize.meta.atac.filtered<-Islet12ALL.coembed.Visulize.meta.atac[apply(Islet12ALL.coembed.Visulize.meta.atac,1,function(x){grepl(x[16],x[13])}),]
Final.filter<-c(row.names(subset(Islet12ALL.coembed.Visulize.meta.atac.filtered,p1=="Delta" & UMAP_1 > 2.5)),row.names(subset(Islet12ALL.coembed.Visulize.meta.atac.filtered,p1=="PP" & UMAP_1 < 0)))
Islet12ALL.coembed.Visulize.meta.atac.filtered<-Islet12ALL.coembed.Visulize.meta.atac.filtered[!row.names(Islet12ALL.coembed.Visulize.meta.atac.filtered) %in% Final.filter,]
Islet12ALL.coembed.Visulize<-readRDS("mydir/Islet12ALL.coembed.Visulize")
Islet12ALL.coembed.Visulize.meta.atac.filtered<-readRDS("mydir/Islet12ALL.coembed.Visulize.meta.atac.filtered")
p1data<-Tomerge_v2(Islet12ALL.coembed.Visulize[[1]]@reductions$umap@cell.embeddings,Islet12ALL.coembed.Visulize[[1]]@meta.data)
CellToremove<-row.names(subset(p1data,tech=="ATAC"))[!row.names(subset(p1data,tech=="ATAC")) %in% row.names(Islet12ALL.coembed.Visulize.meta.atac.filtered)]
p1data<-p1data[!row.names(p1data) %in% CellToremove,]

p1<-ggplot(data=subset(p1data,tech!="ATAC"),aes(UMAP_1,UMAP_2,color=celltype))+geom_point(size=1)+theme_classic()+ guides(color = guide_legend(override.aes = list(size=5)))+scale_color_brewer(palette="Set1")+geom_point(data=subset(p1data,tech=="ATAC"),aes(UMAP_1,UMAP_2),color="azure3",size=1.2,alpha=0.25)+theme(axis.line=element_line(size=0.5),axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())+ guides(color = guide_legend(override.aes = list(size=5)))

p1data<-Tomerge_v2(p1data,Islet12ALL.coembed.Visulize.meta.atac.filtered[,"p1",drop=F],leavex=T)
p1.highlightATAC<-ggplot(data=subset(p1data,tech!="RNA"),aes(UMAP_1,UMAP_2,color=p1))+geom_point(size=1)+theme_classic()+ guides(color = guide_legend(override.aes = list(size=5)))+scale_color_brewer(palette="Set1")+geom_point(data=subset(p1data,tech=="RNA"),aes(UMAP_1,UMAP_2),color="azure3",size=0.6,alpha=0.2)+theme(axis.line=element_line(size=0.5),axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())+ guides(color = guide_legend(override.aes = list(size=5)))
p2<-ggplot(Islet12ALL.coembed.Visulize.meta.atac.filtered)+aes(UMAP_1,UMAP_2,color=p1)+geom_point(size=1.2)+theme_classic()+theme(axis.line=element_line(size=0.5),axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank())+ guides(color = guide_legend(override.aes = list(size=5)))+scale_color_brewer(palette="Set1")
setwd("Fig1.Clustering")
png("Coembeding.ALL.png",height=1650,width=2000,res=300)
print(p1)
dev.off()

png("Coembeding.ALL.HLatac.png",height=1650,width=2000,res=300)
print(p1.highlightATAC)
dev.off()

png("Coembeding.ATAC.png",height=1650,width=2000,res=300)
print(p2)
dev.off()
##endregion

  ##region 2020-9-13-a Visulize TF motifs on the Umap
library(Matrix.utils)
library(chromVAR)
library(SummarizedExperiment)
library(Matrix)
library(motifmatchr)
library(universalmotif)
library(TFBSTools)
library(BSgenome.Hsapiens.UCSC.hg19)
Islet.scATAC.metadata<-read.table("Islet.scATAC.metadata")
row.names(Islet.scATAC.metadata)<-Islet.scATAC.metadata$Name
hocomoco.motifsList<-readRDS("mydir/hocomoco.motifsList")
Islet12ALL.coembed.Visulize.meta.atac.filtered<-readRDS("mydir/Islet12ALL.coembed.Visulize.meta.atac.filtered")
SVM.KNN.filtered.final.print<-read.table("SVM.KNN.filtered.dic.Final.tab")
names(SVM.KNN.filtered.final.print)<-c("Name","CellType")
row.names(SVM.KNN.filtered.final.print)<-SVM.KNN.filtered.final.print$Name
Islet.scATAC.dac.IsletALLPeak.reproducible<-read.table("Islet.scATAC.dac.IsletALLPeak.reproducible")
names(Islet.scATAC.dac.IsletALLPeak.reproducible)<-c("Cell","Peak","Cts")
ALLPeak.reproducible.Mtx<-dMcast(Islet.scATAC.dac.IsletALLPeak.reproducible,Peak~Cell)
colnames(ALLPeak.reproducible.Mtx)<-gsub("Cell","",colnames(ALLPeak.reproducible.Mtx))
# ALLPeak.reproducible.filtered.Mtx<-ALLPeak.reproducible.Mtx[,colnames(ALLPeak.reproducible.Mtx) %in% SVM.KNN.filtered.final.print$Name]
ALLPeak.reproducible.filtered.Mtx<-ALLPeak.reproducible.Mtx[,colnames(ALLPeak.reproducible.Mtx) %in% row.names(Islet12ALL.coembed.Visulize.meta.atac.filtered)]
ALLPeak.reproducible.filtered.Mtx<-ALLPeak.reproducible.filtered.Mtx[rowSums(ALLPeak.reproducible.filtered.Mtx)!=0,]

Chr<-strsplit(row.names(ALLPeak.reproducible.filtered.Mtx),"_") %>% lapply(.,function(x){x[1]}) %>% unlist
Start<-strsplit(row.names(ALLPeak.reproducible.filtered.Mtx),"_") %>% lapply(.,function(x){x[2]}) %>% unlist %>% as.numeric
End<-strsplit(row.names(ALLPeak.reproducible.filtered.Mtx),"_") %>% lapply(.,function(x){x[3]}) %>% unlist %>% as.numeric
peaks<-GRanges(Chr,strand="*",ranges=IRanges(start=Start,end=End))
fragment_counts <- SummarizedExperiment(assays = list(counts = ALLPeak.reproducible.filtered.Mtx),rowRanges = peaks)
# fragment_counts@colData<-Islet.scATAC.metadata[SVM.KNN.filtered.final.print$Name,] %>% DataFrame
fragment_counts@colData<-Islet.scATAC.metadata[row.names(Islet12ALL.coembed.Visulize.meta.atac.filtered),] %>% DataFrame
names(fragment_counts@colData)[2]<-"depth"
fragment_counts <- addGCBias(fragment_counts, genome = BSgenome.Hsapiens.UCSC.hg19)
counts_filtered <- filterPeaks(fragment_counts)
row.names(counts_filtered@colData)<-counts_filtered@colData$Name
motif_ix <- matchMotifs(hocomoco.motifsList, counts_filtered, genome = BSgenome.Hsapiens.UCSC.hg19)
bg <- getBackgroundPeaks(object = counts_filtered)
dev <- computeDeviations(object = counts_filtered, annotations = motif_ix,background_peaks = bg)
# saveRDS(dev,"mydir/TFmotifdev")
dev<-readRDS("mydir/TFmotifdev")
MotifCellTypeList<-list()
MotifCellTypeList.summary<-list()
for (ref in c("Alpha","Acinar","Beta","Delta","Duct","PP","PSC"))
{
print(ref)
pvalues<-c()
slopes<-c()
for(i in 1:nrow(dev@assays@data$z)){
data<-Tomerge_v2(data.frame(z=dev@assays@data$z[i,]),SVM.KNN.filtered.final.print)
data$CellType<-relevel(data$CellType,ref=ref)
md<-lm(z~CellType,data=data)
slopes<-rbind(slopes,md$coefficients[2:length(md$coefficients)])
pvalues<-rbind(pvalues,summary(md)$coefficient[,4][2:length(md$coefficients)])
}
row.names(pvalues)<-row.names(dev@assays@data$z)
row.names(slopes)<-row.names(dev@assays@data$z)
MotifCellTypeList<-c(MotifCellTypeList,list(list(slopes=slopes,pvalues=pvalues)))
summary<-data.frame(pvalues=apply(pvalues,1,function(x){exp(mean(log(x)))}),slopes=rowMeans(slopes))
summary<-summary[order(summary$slopes),]
MotifCellTypeList.summary<-c(MotifCellTypeList.summary,list(summary))
}
names(MotifCellTypeList)<-c("Alpha","Acinar","Beta","Delta","Duct","PP","PSC")
names(MotifCellTypeList.summary)<-c("Alpha","Acinar","Beta","Delta","Duct","PP","PSC")
# tocheck<-row.names(dev@assays@data$z)[grep("PPRX1|ETS1|KLF9|SNAI2|TCF4|ELF3|ZNF292|ATF3|EHF|PAX6|NEUROD1|MAFB|ARX|IRX2|ZNF85|FEV|INSM1|PDX1|MAFA|SIX3|ASCL2|HHEX|ASCL1|GRHL1|POU3F1|EGR3|STAT4|EGR2",row.names(dev@assays@data$z))]
tocheck.alpha<-MotifCellTypeList.summary$Alpha %>% head(.,n=10) %>% row.names
tocheck.beta<-MotifCellTypeList.summary$Beta %>% head(.,n=10) %>% row.names
tocheck.delta<-MotifCellTypeList.summary$Delta %>% head(.,n=10) %>% row.names
tocheck.PP<-MotifCellTypeList.summary$PP %>% head(.,n=10) %>% row.names
tocheck.Duct<-MotifCellTypeList.summary$Duct %>% head(.,n=10) %>% row.names
tocheck.acinar<-MotifCellTypeList.summary$Acinar %>% head(.,n=10) %>% row.names
tocheck.PSC<-MotifCellTypeList.summary$PSC %>% head(.,n=10) %>% row.names
allpss<-list()
for(tocheck in list(tocheck.alpha,tocheck.beta,tocheck.delta,tocheck.PP,tocheck.Duct,tocheck.acinar,tocheck.PSC)){
motiftoplot<-dev@assays@data$z[tocheck,] %>% t %>% as.data.frame %>% Tomerge_v2(.,counts_filtered@colData)
motiftoplot<-Tomerge_v2(Islet12ALL.coembed.Visulize.meta.atac.filtered[,c("UMAP_1","UMAP_2")],motiftoplot)
ps<-list()
for(mtf in names(motiftoplot)[3:12]){
p<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color=mtf)+geom_point(size=0.1)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(-1,2),oob=scales::squish)+theme_classic()
ps<-c(ps,list(p))
}
allpss<-c(allpss,list(ps))
}
# saveRDS(allpss,"mydir/allpss")
allpss<-readRDS("mydir/allpss")
motiftoplot<-dev@assays@data$z[c("NEUROD1.MA1109.1","PDX1_HUMAN.H11MO.1.A","IRF1_HUMAN.H11MO.0.A","FOXA2_HUMAN.H11MO.0.A","EHF_HUMAN.H11MO.0.B","ELF3_HUMAN.H11MO.0.A","RUNX3_HUMAN.H11MO.0.A"),] %>% t %>% as.data.frame %>% Tomerge_v2(.,counts_filtered@colData)
motiftoplot<-Tomerge_v2(Islet12ALL.coembed.Visulize.meta.atac.filtered[,c("UMAP_1","UMAP_2")],motiftoplot)

p.neurod1<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color="NEUROD1.MA1109.1")+geom_point(size=1.8,alpha=0.5)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(-1.5,2),oob=scales::squish)+theme_void()
p.pdx1<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color="PDX1_HUMAN.H11MO.1.A")+geom_point(size=1.8,alpha=0.5)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(-0.5,2.8),oob=scales::squish)+theme_void()
# p.foxa2<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color="FOXA2_HUMAN.H11MO.0.A")+geom_point(size=0.8,alpha=0.5)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(-1,2),oob=scales::squish)+theme_classic()
p.EHF<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color="EHF_HUMAN.H11MO.0.B")+geom_point(size=1.8,alpha=0.5)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(0.5,2),oob=scales::squish)+theme_void()
# p.ELF3<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color="EHF_HUMAN.H11MO.0.B")+geom_point(size=0.8,alpha=0.5)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(0,2),oob=scales::squish)+theme_classic()

p.RUNX<-ggplot(motiftoplot)+aes_string("UMAP_1","UMAP_2",color="RUNX3_HUMAN.H11MO.0.A")+geom_point(size=1.8,alpha=0.5)+scale_color_gradient(low="lightsteelblue1",high="darkred",limit=c(0.5,2),oob=scales::squish)+theme_void()
setwd("~/Chip-seq/ATAC/scATAC/IsletscATAC/Fig1.Clustering")
png("TF.umap.NEUROD.png",height=1650,width=2300,res=300)
print(p.neurod1)
dev.off()
png("TF.umap.PDX1.png",height=1650,width=2300,res=300)
print(p.pdx1)
dev.off()
png("TF.umap.EHF.png",height=1650,width=2300,res=300)
print(p.EHF)
dev.off()
png("TF.umap.RUNX.png",height=1650,width=2300,res=300)
print(p.RUNX)
dev.off()

  ##endregion

  ##region 2020-8-28-c Visulize single-cell track examples
setwd("~/Chip-seq/ATAC/scATAC/IsletscATAC")
Islet.scATAC.dac.Bin5K.Mtx<-readRDS("mydir/Islet.scATAC.dac.Bin5K.Mtx")
SVM.KNN.filtered.final<-readRDS("mydir/SVM.KNN.filtered.final")
GenomicRange.Index<-read.table("~/Genome/hg19/hg19.genome_split_5000")
Loci.df<-data.frame(Celltype=c("Beta","Alpha","Delta","PP","Duct","PSC","Acinar"),Loci=c("INS","GCG","SST","PPY","KRT19","COL1A2","REG1A"),Chr=c("chr11","chr2","chr3","chr17","chr17","chr7","chr2"),Starts=c(2143641,162976712,187361895,41988356,39667409,94015400,79334255),Ends=c(2209812,163029039,187416856,42053853,39695067,94065961,79363874))
Loci.bed<-MakeBinBed(df=Loci.df,res=100)
write.table(Loci.bed,"Islet12_7celltype.marker.100bp.bed",row.names=F,col.names=F,sep="\t",quote=F)
## To generate signal in bins in bash
"
bedtools intersect -a Islet12_7celltype.marker.100bp.bed -b Islet12.ALL.Monoclonal.BC.sort.bed -wa -wb -loj > Islet12_7celltype.marker.100bp.monoclonal.beds
"
## Readin the overlapped bedfile and modify
Islet12_7celltype.marker.100bp.monoclonal.beds<-read.table("Islet12_7celltype.marker.100bp.monoclonal.beds")
Islet12_7celltype.marker.100bp.monoclonal<-data.frame(Pixel=Islet12_7celltype.marker.100bp.monoclonal.beds$V4,Cell=Islet12_7celltype.marker.100bp.monoclonal.beds$V8,Signal=1)
Islet12_7celltype.marker.100bp.monoclonal.Mtx<-dMcast(Islet12_7celltype.marker.100bp.monoclonal,Pixel~Cell)
colnames(Islet12_7celltype.marker.100bp.monoclonal.Mtx)<-gsub("Cell","",colnames(Islet12_7celltype.marker.100bp.monoclonal.Mtx))
## To prepare for plotting
colors<-c(rgb(51,153,102,maxColorValue=255),rgb(0,102,204,maxColorValue=255),rgb(153,51,255,maxColorValue=255),rgb(204,102,0,maxColorValue=255),rgb(255,102,0,maxColorValue=255),rgb(255,153,204,maxColorValue=255),rgb(255,0,0,maxColorValue=255))
Celltypes<-c("Beta","Alpha","Delta","PP","Duct","PSC","Acinar")
ps<-list()
for(i in 1:7){
Celltype.focus=Celltypes[i]
TopN=200
TopCells<-subset(SVM.KNN.filtered.final,p1==Celltype.focus) %>% .[order(.$Fragments,decreasing=T),] %>% head(.,n=TopN) %>% row.names
Selected.MTX<-Islet12_7celltype.marker.100bp.monoclonal.Mtx[,colnames(Islet12_7celltype.marker.100bp.monoclonal.Mtx) %in% TopCells]
Selected.MTX.long<-melt(as.matrix(Selected.MTX))
Selected.MTX.long<-strsplit(as.character(Selected.MTX.long$Var1),"_") %>% do.call(rbind,.)  %>% cbind(Selected.MTX.long,.)
names(Selected.MTX.long)<-c("Binname","Cell","Signal","Loci","BinN")
Selected.MTX.long$BinN<-as.numeric(as.character(Selected.MTX.long$BinN))
Selected.MTX.long$Signal[Selected.MTX.long$Signal>1]<-1
Selected.MTX.long$Signal<-as.factor(Selected.MTX.long$Signal)
Selected.MTX.long$Loci<-factor(Selected.MTX.long$Loci,levels=c("INS","GCG","SST","PPY","KRT19","COL1A2","REG1A"))
p<-ggplot(Selected.MTX.long)+aes(BinN,Cell,fill=Signal)+geom_tile()+facet_grid(~Loci,scales="free")+scale_fill_manual(values=c("white",colors[i]))+theme_void()+theme(panel.border=element_rect(size=0.2,color="grey90",fill=NA),legend.position="null")
ps<-c(ps,list(p))
}
## To plot
setwd("Fig1.Clustering")
png("Beta.scTrack.png",height=600,width=5000,res=300)
print(ps[[1]])
dev.off()
png("Alpha.scTrack.png",height=600,width=5000,res=300)
print(ps[[2]])
dev.off()
png("Delta.scTrack.png",height=600,width=5000,res=300)
print(ps[[3]])
dev.off()
png("PP.scTrack.png",height=600,width=5000,res=300)
print(ps[[4]])
dev.off()
png("Duct.scTrack.png",height=600,width=5000,res=300)
print(ps[[5]])
dev.off()
png("PSC.scTrack.png",height=600,width=5000,res=300)
print(ps[[6]])
dev.off()
png("Acinar.scTrack.png",height=600,width=5000,res=300)
print(ps[[7]])
dev.off()
##endregion

  ##region 2020-8-28-c Visulize signature gene RNA expression
Islet12ALL.coembed.Visulize<-readRDS("mydir/Islet12ALL.coembed.Visulize")
Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")

# To get endothelial markers ident<-Islet12.scRNA.seurat3.filtered@meta.data$Cell_type
# names(ident)<-row.names(Islet12.scRNA.seurat3.filtered@meta.data)
# Islet12.scRNA.seurat3.filtered@active.ident<-ident
# Endothelial.markers <- FindMarkers(Islet12.scRNA.seurat3.filtered, ident.1 = "Endothelial", min.pct = 0.25)

RNASig.tiplot<-t(Islet12.scRNA.seurat3.filtered@assays$RNA@scale.data[c("INS","GCG","SST","PPY","KRT19","COL1A2","REG1A","FLT1","ANGPT2"),]) %>% Tomerge_v2(.,Islet12ALL.coembed.Visulize[[1]]@reductions$umap@cell.embeddings) %>% .[complete.cases(.),]
setwd("Fig1.Clustering")
for(gene in c("INS","GCG","SST","PPY","KRT19","COL1A2","REG1A","FLT1")){
png(paste(gene,"RNA.png",sep="."),height=2000,width=2100,res=300)
p<-ggplot(RNASig.tiplot)+aes_string("UMAP_1","UMAP_2",color=gene)+geom_point()+scale_color_gradient(low="azure3",high="red")+theme_void()
print(p)
dev.off()
}
##endregion

    ##region  Cells filtered by KNN(ratio>2) Louvain clustering
    Islet12ALL.scATAC.FILTER.24926.dist<-dist(Islet12ALL.scATAC.FILTER.24926$cca.1000.L2normed)
    Islet12ALL.scATAC.FILTER.24926.snn<-FindNeighbors(Islet12ALL.scATAC.FILTER.24926.dist,k.param = 20,compute.SNN = TRUE,prune.SNN = 1/15,nn.method = "rann",annoy.metric = "euclidean",nn.eps = 0,verbose = TRUE,force.recalc = FALSE,)
    Islet12ALL.scATAC.FILTER.24926.cluster.res.0.1<-FindClusters(Islet12ALL.scATAC.FILTER.24926.snn$snn,resolution = 0.1)
    atacrna.umap.24926.louvain<-Tomerge_v2(atacrna.umap.24926,Islet12ALL.scATAC.FILTER.24926.cluster.res.0.1)
    plot<-subset(atacrna.umap.24926.louvain,tech=="ATAC") %>% ggplot(size=0.5)+aes(V1,V2,color=p1)+geom_point(size=0.5)+ guides(colour = guide_legend(override.aes = list(size=10)))+ggtitle("Louvain ATAC CellType Label")
    ## Step 4 Bulk marker examination
    Ref<-data.frame(GENE=c("INS","IAPP","GCG","ARX","SST","PPY","COL1A2","SPARC","CFTR","KRT19","REG3A","REG1A"),CELL=c("Alpha|Beta","Alpha|Beta","Alpha|Beta","Alpha|Beta","Delta","PP","PSC","PSC","Duct","Duct","Acinar","Acinar"))
    row.names(Ref)<-Ref$GENE
    atacrna.umap.24926.louvain$res.0.1.celltype<-mapvalues(atacrna.umap.24926.louvain$res.0.1,from=c(0,1,2,3,4,5,6),to=c("Alpha|Beta","PSC","Duct","Delta","PP","Acinar","Endothelial"))
    BulkReads.scale.all.24926Lovain<-AggregateScale(df=subset(atacrna.umap.24926.louvain,!is.na(atacrna.umap.24926.louvain$p1)) %>% subset(.,p1 !="Epsilon"),col="res.0.1.celltype",rawobj=Islet.scATAC.dac.biggenes.Mtx)
    QC.df<-BulkReads.scale.all.24926Lovain[c("INS","IAPP","GCG","ARX","SST","PPY","COL1A2","SPARC","CFTR","KRT19","REG3A","REG1A"),]
    Fold<-data.frame(GENE=Ref$GENE)
    fold<-c()
    for(gene in Ref$GENE){
    fold<-c(fold,QC.df[gene,colnames(QC.df)==Ref[gene,"CELL"]]/mean(QC.df[gene,colnames(QC.df)!=Ref[gene,"CELL"]]))
    }
    Fold$fold<-fold
    #Plot
    DataToPlot<-melt(QC.df)
    DataToPlot$Var2<-factor(DataToPlot$Var2,levels=c("Alpha|Beta","Delta","PP","PSC","Duct","Acinar","Endothelial"))
    p.bulkReads<-ggplot(DataToPlot)+aes(Var2,value,fill=Var2)+geom_bar(stat="identity")+facet_grid(Var1~.,scales="free")+theme_bw()
    grid.arrange(p.bulkReads,tableGrob(Fold),nrow=1)
    ##endregion


  ##region 2020-11-26 cell-type composition bar plot
  ##RNA
  Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
  Islet12.scRNA.seurat3.filtered@meta.data$Donor<-mapvalues(Islet12.scRNA.seurat3.filtered@meta.data$Donor,from=c("HT1","HT2","HT3","HT4","HT5","HT6","HT7","HT8","T2D1","T2D3","T2D4","T2D5"),to=c("HT1",NA,"HT2","HT3","HT4","HT5","HT6","HT7","T2D1","T2D2","T2D3","T2D4"))
  CellCompo.RNA.m<-Islet12.scRNA.seurat3.filtered@meta.data[,c("Donor","Cell_type")] %>% table %>% as.matrix %>% apply(.,1,function(x){x/sum(x)}) %>% t %>% melt()
  CellCompo.RNA.m$Cell_type<-factor(CellCompo.RNA.m$Cell_type,levels=c("Beta","Alpha","Delta","PP","Duct","PSC","Acinar","Endothelial"))
  p1<-ggplot(CellCompo.RNA.m)+aes(Donor,value,fill=Cell_type)+geom_bar(stat="identity")+scale_fill_manual(values=  brewer.pal("Set1",n=9)[c(3,2,4,7,5,8,1,6)])
  Islet.scATAC.metadata<-read.table("Islet.scATAC.metadata")
  row.names(Islet.scATAC.metadata)<-Islet.scATAC.metadata$Name
  Islet.scATAC.metadata$donor<-mapvalues(Islet.scATAC.metadata$donor,from=c("HT1","HT2","HT3","HT4","HT5","HT6","HT7","HT8","T2D1","T2D3","T2D4","T2D5"),to=c("HT1",NA,"HT2","HT3","HT4","HT5","HT6","HT7","T2D1","T2D2","T2D3","T2D4"))
  SVM.KNN.filtered<-readRDS("mydir/SVM.KNN.filtered")
  CellCompo.ATAC.m<-Tomerge_v2(SVM.KNN.filtered,Islet.scATAC.metadata[,"donor",drop=F]) %>%  .[,c("donor","p1")] %>% table %>% as.matrix %>% apply(.,1,function(x){x/sum(x)}) %>% t %>% melt()
  CellCompo.ATAC.m.KNN7.2<-subset(SVM.KNN,as.character(p1)==as.character(First)) %>% subset(.,ratio>7.2) %>% .[,c("donor","p1")] %>% table %>% as.matrix %>% apply(.,1,function(x){x/sum(x)}) %>% t %>% melt()
  CellCompo.ATAC.m.KNN7.2$p1<-factor(CellCompo.ATAC.m.KNN7.2$p1,levels=c("Beta","Alpha","Delta","PP","Duct","PSC","Acinar","Endothelial"))
  # CellCompo.ATAC.m$p1<-factor(CellCompo.ATAC.m$p1,levels=c("Beta","Alpha","Delta","PP","Duct","PSC","Acinar","Endothelial"))
  # p2<-ggplot(CellCompo.ATAC.m)+aes(donor,value,fill=p1)+geom_bar(stat="identity")+scale_fill_manual(values=  brewer.pal("Set1",n=9)[c(3,2,4,7,5,8,1,6)])
  p2.KNN7.2<-ggplot(CellCompo.ATAC.m.KNN7.2)+aes(donor,value,fill=p1)+geom_bar(stat="identity")+scale_fill_manual(values=  brewer.pal("Set1",n=9)[c(3,2,4,7,5,8,1,6)])
  setwd("Fig1.Clustering")
  pdf("Cell_type.Composition.barKNN7.2.pdf",width=12)
  print(p1)
  print(p2.KNN7.2)
  dev.off()
  ##endregion

  ##region Supplementary Fig1, clustering QC

    ##region Basic QCplots
    TSSfilenames<-list.files()[grep("TSS",list.files())]
    df.all<-data.frame()
    for (file in TSSfilenames){
    df<-read.table(file)
    names(df)<-c("Name","Fragments","FragTSS","FragPeak")
    df$PeakRatio<-df$FragPeak/df$Fragments
    df.all<-rbind(df.all,df)
    }
    ps.sizes<-data.frame()
    monobedfilenames<-list.files()[grep("monocloal.bed",list.files())]
    for (file in monobedfilenames){
      print(file)
    df<-read.table(file)
    df.sub<-df[sample(1:nrow(df),100000),]
    ps.sizes<-rbind(ps.sizes,df.sub)
    }
    ps.sizes$sizes<-ps.sizes$V3-ps.sizes$V2
    p.gragmentSize<-ggplot(ps.sizes)+aes(sizes)+geom_density()+theme_classic()
    p.fragmentN<-ggplot(df.all)+aes(log10(Fragments))+geom_histogram(color="black",fill="white")+xlim(0,6)+theme_classic()+geom_vline(xintercept=3,linetype=2,size=1)
    setwd("Fig1.Clustering")
    pdf("scATAC.basicQC.Fragments.pdf",height=5)
    print(p.fragmentN)
    print(p.gragmentSize)
    dev.off()
    png("scATAC.basicQC.png",height=2000,width=2400,res=300)
    ggplot(Islet.scATAC.metadata)+aes(PeakRatio,FragTSS/Fragments)+geom_point(size=0.01)+stat_density2d(aes(fill=..level..),alpha=0.4,geom='polygon',color='black')+scale_fill_gradient(low="green",high="red")+theme_bw()+xlim(0,1)+ylim(0,1)+geom_vline(xintercept=0.15,linetype=2)
    dev.off()
    ##endregion

    ##region Filtering strategy for scATAC
SVM.KNN<-readRDS("mydir/SVM.KNN")
SVM.KNN<-Tomerge_v2(SVM.KNN,Islet.scATAC.metadata[,"donor",drop=F]) %>% .[!is.na(.$donor),]
subset(SVM.KNN,as.character(p1)==as.character(First)) %>% ggplot(.)+aes(p1,ratio)+geom_boxplot()+geom_jitter(size=0.1)+geom_hline(yintercept=2,color="red")

ps<-list()
# threhold=c(7.5,6.75,7.75,7.5,7.25,7.25,8.25,)
threahold<-7.2
for(CT in c("Beta","Alpha","Delta","PP","Duct","PSC","Acinar","Endothelial")){
test<-subset(SVM.KNN,as.character(p1)==as.character(First)) %>% subset(.,p1==CT)
CellN<-dim(subset(test,ratio>threahold))
test$ratio[is.infinite(test$ratio)]<-max(test$ratio[!is.infinite(test$ratio)])+5
p<-ggplot(test)+aes(ratio)+geom_histogram(binwidth=0.5,color="black")+ggtitle(paste(CT,CellN,sep=":"))+geom_vline(xintercept=threahold,linetype=2)+theme_bw()
ps<-c(ps,list(p))
}
pdf("scATACfiltering.pdf")
grid.arrange(grobs=ps)
dev.off()
  ##endregion Filtering strategy

    ##region Gene/Transcripts/Fragments summary for each donor (Not used)
  Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
  SVM.KNN<-readRDS("mydir/SVM.KNN")
  SVM.KNN<-Tomerge_v2(SVM.KNN,Islet.scATAC.metadata[,"donor",drop=F]) %>% .[!is.na(.$donor),] %>% subset(.,as.character(p1)==as.character(First) & ratio>7.2)

    ##endregion

    ##region DE gene consistency
    source("~/Dropseq/Entrance/Esderived/Esdrived_DGE/AttemptFrom17.8.28/Revision2020/Newfun.R")
  Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
  Aggregate.7celltype.RNA.rpkm<-readRDS("mydir/Aggregate.7celltype.RNA.rpkm")
  ##Filter by max rpkm(max cell type should be larger than 10)
  RPKM.max<-as.matrix(Aggregate.7celltype.RNA.rpkm[,1:7]) %>% apply(.,1,max)
  Expressing.genes<-names(RPKM.max)[RPKM.max>10]
  MAXENdoVSNonendo.RNA<-as.matrix(Aggregate.7celltype.RNA.rpkm[,1:7])  %>% apply(.,1,function(x){(max(x[1:4]/max(x[5:7])))}) %>% .[complete.cases(.)]
  Endocrine.genes<-intersect(names(MAXENdoVSNonendo.RNA)[MAXENdoVSNonendo.RNA>2],Expressing.genes)
  NonEndocrine.genes<-intersect(names(MAXENdoVSNonendo.RNA)[MAXENdoVSNonendo.RNA<0.5],Expressing.genes)
  Endocrine.genes<-readRDS("mydir/Endocrine.genes")
  NonEndocrine.genes<-readRDS("mydir/NonEndocrine.genes")
  set.seed(1)
  RNA.endo.kcl<-Kcluster.Z(Aggregate.7celltype.RNA.rpkm[Endocrine.genes,],k=15)
  RNA.endo.kcl$datatoplot$group<-factor(RNA.endo.kcl$datatoplot$group,levels=c(12,13,6,8,11,10,2,9,1,5,7,4,14,15,3))
  p.rna.endo.new12<-RNA.endo.kcl$datatoplot %>% ggplot(.)+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limit=c(-2,2),oob=scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())+theme_void()+theme(panel.spacing=unit(0,"line"))
  set.seed(1)
  RNA.non.kcl<-Kcluster.Z(Aggregate.7celltype.RNA.rpkm[NonEndocrine.genes,],k=6)
  RNA.non.kcl$datatoplot$group<-factor(RNA.non.kcl$datatoplot$group,level=c(3,4,1,2,6,5))
  p.rna.non.new12<-ggplot(RNA.non.kcl$datatoplot)+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limit=c(-2,2),oob=scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())+theme_void()+theme(panel.spacing=unit(0,"line"))
  SeuratALL.filtered.0.6<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Dropseq/DGEanalysis/Islet412+511+919+T2D1+S4/workplaceLink/2017.9.21.revise/927.All.filtered.ob")

  alpha<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="allAlpha"))] %>% as.matrix %>% rowSums
  beta<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="allBeta"))] %>% as.matrix %>% rowSums
  delta<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="delta"))] %>% as.matrix %>% rowSums
  pp<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="pp"))] %>% as.matrix %>% rowSums
  duct<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="duct"))] %>% as.matrix %>% rowSums
  acinar<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="Acinar"))] %>% as.matrix %>% rowSums
  psc<-SeuratALL.filtered.0.6@raw.data[,row.names(subset(SeuratALL.filtered.0.6@data.info,celltype1=="psc"))] %>% as.matrix %>% rowSums
  Old9.Aggregate.7celltype.RNA.cts<-data.frame(beta,delta,alpha,pp,duct,acinar,psc)
  Old9.Aggregate.7celltype.RNA.rpkm<-apply(Old9.Aggregate.7celltype.RNA.cts,2,function(x){1e6*x/sum(x)})
  # Old9.endo.datatoplot<-Tomerge_v2(Old9.Aggregate.7celltype.RNA.rpkm[Endocrine.genes[Endocrine.genes %in% c(row.names(Old9.Aggregate.7celltype.RNA.rpkm))],],RNA.endo.kcl$data[,"group",drop=F])
  Old9.endo.datatoplot<-Old9.Aggregate.7celltype.RNA.rpkm[Endocrine.genes[Endocrine.genes %in% c(row.names(Old9.Aggregate.7celltype.RNA.rpkm))],] %>% apply(.,1,scale) %>% t %>% Tomerge_v2(.,RNA.endo.kcl$data[,"group",drop=F])
  Old.endo.datatoplot.m<-cbind(Old9.endo.datatoplot,Gene=row.names(Old9.endo.datatoplot)) %>% melt(.,id.vars=c("group","Gene"))
  Old.endo.datatoplot.m$group<-factor(Old.endo.datatoplot.m$group,levels=c(12,13,6,8,11,10,2,9,1,5,7,4,14,15,3))
  p.rna.endo.old9<-ggplot(Old.endo.datatoplot.m)+aes(variable,Gene,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limit=c(-2,2),oob=scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())+theme(panel.spacing=unit(0,"line"))

  Old9.non.datatoplot<-Old9.Aggregate.7celltype.RNA.rpkm[NonEndocrine.genes[NonEndocrine.genes %in% c(row.names(Old9.Aggregate.7celltype.RNA.rpkm))],] %>% apply(.,1,scale) %>% t %>% Tomerge_v2(.,RNA.non.kcl$data[,"group",drop=F])
  Old.non.datatoplot.m<-cbind(Old9.non.datatoplot,Gene=row.names(Old9.non.datatoplot)) %>% melt(.,id.vars=c("group","Gene"))
  Old.non.datatoplot.m$group<-factor(Old.non.datatoplot.m$group,level=c(3,4,1,2,6,5))
  p.rna.non.old9<-ggplot(Old.non.datatoplot.m)+aes(variable,Gene,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limit=c(-2,2),oob=scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())+theme(panel.spacing=unit(0,"line"))+theme(panel.spacing=unit(0,"line"))
  pdf("RNA.rpkm.newVSold.pdf")
  p.rna.endo.new12
  p.rna.non.new12
  p.rna.endo.old9
  p.rna.non.old9
  dev.off()
    ##endregion


  ##endregion Supplementary Fig1, clustering QC

##endregion ##2020-8-11 benchmark scATAC clustering


##region Cell type Peak Study
"
for i in {1..10}
do
~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step1.pl Dnsample.$i.tab Dnsample.$i &
done

for monoclonal in `ls| grep Dnsample.10.bed`;   # 1-10
do
macs2 callpeak -f BEDPE -t $monoclonal -g hs  -n ${monoclonal/.bed/} &
done

for narrowPeak in `ls| grep Dnsample.10_peaks.narrowPeak$`; # 1-10
do
cut -f1-4 $narrowPeak > $narrowPeak.bed
done

cat `ls| grep "Alpha\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergeAlpha.DN.1_10.narrowPeak.bed
cat `ls| grep "Beta\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergeBeta.DN.1_10.narrowPeak.bed
cat `ls| grep "Delta\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergeDelta.DN.1_10.narrowPeak.bed
cat `ls| grep "PP\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergePP.DN.1_10.narrowPeak.bed
cat `ls| grep "Duct\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergeDuct.DN.1_10.narrowPeak.bed
cat `ls| grep "Acinar\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergeAcinar.DN.1_10.narrowPeak.bed
cat `ls| grep "PSC\.Dnsample.[0-9]*_peaks.narrowPeak.bed"` | sort -k1,1 -k2,2n | bedtools merge > MergePSC.DN.1_10.narrowPeak.bed

## Create long format
for MergePeak in `ls |grep "Merge"`
do
Nametmp=${MergePeak/.DN.1_10.narrowPeak.bed/}
Name=${Nametmp/Merge/}
echo $Name
for  RandomDown in `ls| grep "$Name\.Dnsample.[0-9]*_peaks.narrowPeak.bed"`
do
  bedtools intersect -a $RandomDown -b $MergePeak -wa -wb | awk 'OFS="\t" {print $5,$6,$7,$4}' >> $Name.ReproducePeaks.long
done
done
"
##
ReproducePeaks.list<-list()
library(Matrix.utils)
Names<-c()
for(file in list.files()[grep("long",list.files())])
{
Names<-c(Names,strsplit(file,".",fixed=T) %>% sapply(.,function(x){x[1]}))
tmp<-read.table(file)
df<-data.frame(Pos=paste(tmp$V1,tmp$V2,tmp$V3,sep="_"),RandomDn=tmp$V4,cts=1)
df$RandomDn<-strsplit(as.character(df$RandomDn),"_") %>% sapply(.,function(x){x[[1]]}) %>% strsplit(.,".",fixed=T) %>% sapply(.,function(x){x[3]}) %>% paste("DN",.,sep="_")
Mtx<-dMcast(df,Pos~RandomDn)
Mtx[which(Mtx>1)]<-1
ReproducePeaks.list<-c(ReproducePeaks.list,list(Mtx))
}
names(ReproducePeaks.list)<-Names
ReproducePeaks.list.score<-lapply(ReproducePeaks.list,function(x){rowSums(x)})
ReproducePeaks.list.score.processed<-lapply(ReproducePeaks.list.score,function(x){
data.frame(Score=x,rank=rank(-x,ties.method="random")) %>% .[order(.$rank),]
})
### Use regions with reproducibility score >=3
ReproducePeaks.list.score.processed.filter<-lapply(ReproducePeaks.list.score.processed,function(x){subset(x,Score>=3)})
###write out reproducible peaks
setwd("Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/Dnsample")
for (i in 1:length(ReproducePeaks.list.score.processed.filter))
{
name<-names(ReproducePeaks.list.score.processed.filter)[i]
tmp<-strsplit(row.names(ReproducePeaks.list.score.processed.filter[[i]]),"_")
df<-tmp[lapply(tmp,function(x){length(x)})==3] %>% do.call(rbind,.) %>% as.data.frame
write.table(df,paste(name,"Reproduciblepeak.bed",sep="."),quote=F,sep="\t",row.names=F,col.names=F)
}
## Generagte dac matrix
"
cat `ls | grep Reproduciblepeak.bed` | sort -k1,1 -k2,2n | bedtools merge | awk '{print $1,$2,$3,$1"_"$2"_"$3}' OFS="\t" > Merge.DN.reproducible.narrowPeak.bed
cd ~/Chip-seq/ATAC/scATAC/IsletscATAC
cp Islet12.F.track/Dnsample/Merge.DN.reproducible.narrowPeak.bed ./
less source | ./GenerateDAC.pl Merge.DN.reproducible.narrowPeak.bed IsletALLPeak.reproducible
bedToBigBed  Merge.DN.reproducible.narrowPeak.bed ~/Genome/hg19/hg19.chrom.sizes Islet12.ALL.Merge.DN.reproducible.bb
bedToBigBed  Islet12.ALL.narrow.bed ~/Genome/hg19/hg19.chrom.sizes Islet12.ALL.narrow.bb
"
##endregion


##endregion 2020-9-11-a Call Specific peaks for each cell type by downsampling


  ##region 2020-9-22  Call top 32000 peaks using MACS (bash)
'
## I decided to use MACS2 narrow peaks top 32000 peaks

macs2 callpeak -f BEDPE -t Acinar.SVM.KNN.filteredFinal.bed -q 0.2 -g hs  -n Acinar.SVM.KNN.filteredFinal.q0.2
## Other celltypes used default
cd /mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track

for narrowPeak in `ls | grep narrowPeak`
do
sort -nrk9,9 $narrowPeak | head -n 32000 | cut -f1-4 >${narrowPeak/_peaks.narrowPeak/.32000.bed}
done

for Peak in `ls | grep 32000.bed`
do
cut -f1-4 $Peak | sort -k1,1 -k2,2n > $Peak.bed.tmp
echo $Peak.bed.tmp
bedToBigBed $Peak.bed.tmp ~/Genome/hg19/hg19.chrom.sizes $Peak.bed.tmp.bb
done

for file in `ls | grep tmp.bb`
do
    cp $file /mnt/rstor/genetics/JinLab/fxj45/WWW/CW/scATAC2019/$file
    echo -ne "track type=bigBed name=$file description=$file visibility=dense autoScale=on maxHeightPixels=100:20:15 bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/$file\n"
done

cat `ls | grep 32000.bed$` | sort -k1,1 -k2,2n | bedtools merge > Islet12.ALL.totalPeak.TOP32K.bed

## Take intersect for each CellType in the totalPeak

for mono in  `ls | grep filteredFinal.bed`
do
bedtools intersect -a Islet12.ALL.totalPeak.TOP32K.bed -b $mono -c > ${mono/.bed/onTotoalPeak.cts}
done
  '
  ##region Filtering blacklist
'
wget http://mitra.stanford.edu/kundaje/akundaje/release/blacklists/hg19-human/wgEncodeHg19ConsensusSignalArtifactRegions.bed.gz
bedtools intersect -a Islet12.ALL.totalPeak.TOP32K.bed -b wgEncodeHg19ConsensusSignalArtifactRegions.bed -v -wa > Islet12.ALL.totalPeak.TOP32K.noBlack.bed
for ctsfile in `ls | grep onTotoalPeak.cts`
do
bedtools intersect -a $ctsfile -b wgEncodeHg19ConsensusSignalArtifactRegions.bed -v -wa > $ctsfile.noblack.bed
done
## Generate DAC files

less Islet12.ALL.totalPeak.TOP32K.noBlack.bed | awk '{print $1,$2,$3,$1"_"$2"_"$3}' OFS="\t" >Islet12.ALL.totalPeak.TOP32K.noBlack.bed.withname
less ../source | ../GenerateDAC.pl Islet12.ALL.totalPeak.TOP32K.noBlack.bed.withname TOP32K.noBlack  #
'

  ##endregion




    ##endregion ##region 2020-9-22  Call top 32000 peaks using MACS

  ##region 2020-9-22 2020-10-10 Peak clustering using Top32K peaks

    ##region Generate aggregated RPKM RPKM.7CellTypes (Peak~Celltype)
ctsfiles<-list.files()[grep("onTotoalPeak.cts.noblack.bed",list.files())]
TotoalPeak.cts.lst<-list()

for (file in ctsfiles){
  df<-read.table(file)
  names(df)<-c("Chr","Start","End","Cts")
  df$Name<-paste(df$Chr, df$Start, df$End,sep="_")
  df$rpkm<-1e6*df$Cts/sum(df$Cts)
  TotoalPeak.cts.lst<-c(TotoalPeak.cts.lst,list(df))
}
names(TotoalPeak.cts.lst)<-strsplit(ctsfiles,".",fixed=T) %>% sapply(.,function(x){x[[1]]})
RPKM.7CellTypes<-data.frame(Name=TotoalPeak.cts.lst[[1]]$Name)
for(i in 1:length(TotoalPeak.cts.lst)){
RPKM.7CellTypes<-cbind(RPKM.7CellTypes,TotoalPeak.cts.lst[[i]]$rpkm)
}
names(RPKM.7CellTypes)<-c("Name",names(TotoalPeak.cts.lst))
row.names(RPKM.7CellTypes)<-RPKM.7CellTypes$Name
RPKM.7CellTypes<-RPKM.7CellTypes[,-1]
# RPKM.7CellTypes.log<-log(RPKM.7CellTypes)
# RPKM.7CellTypes.log.dst<-Dist(RPKM.7CellTypes.log,method="correlation")
##Check RPKM distributions  Looks alright
melt(RPKM.7CellTypes) %>% ggplot()+aes(variable,value,fill=variable)+geom_violin()+geom_boxplot(width=0.2)+ylim(0,100)
MAX.cell<-apply(RPKM.7CellTypes,1,function(x){names(RPKM.7CellTypes)[which.max(x)]})
MIN.cell<-apply(RPKM.7CellTypes,1,function(x){names(RPKM.7CellTypes)[which.min(x)]})
MAX<-apply(RPKM.7CellTypes,1,max)
MIN<-apply(RPKM.7CellTypes,1,min)
RPKM.7CellTypes<-cbind(RPKM.7CellTypes,MAX.cell,MIN.cell,MAX,MIN)
RPKM.7CellTypes$FC<-RPKM.7CellTypes$MAX/(RPKM.7CellTypes$MIN+1)
RPKM.7CellTypes$MAX.cell<-as.character(RPKM.7CellTypes$MAX.cell)
RPKM.7CellTypes$MIN.cell<-as.character(RPKM.7CellTypes$MIN.cell)
# saveRDS(RPKM.7CellTypes,"mydir/RPKM.7CellTypes")
RPKM.7CellTypes<-readRDS("mydir/RPKM.7CellTypes")
  ##endregion Generate aggregated RPKM (Peak~Celltype)

    ##region generate single cell cell~Peak Matrix
# library(Matrix.utils)
# Top32K.ALLPeak<-read.table("Islet.scATAC.dac.TOP32K.noBlack")
# names(Top32K.ALLPeak)<-c("Cell","Peak","Cts")
# Top32K.ALLPeak$Cts[which(Top32K.ALLPeak$Cts>1)]<-1
# Top32K.ALLPeak.Mtx<-dMcast(Top32K.ALLPeak,Peak~Cell)
# colnames(Top32K.ALLPeak.Mtx)<-gsub("Cell","",colnames(Top32K.ALLPeak.Mtx))
# Top32K.ALLPeak.Mtx<-Top32K.ALLPeak.Mtx[,row.names(Islet.scATAC.metadata)]
# saveRDS(Top32K.ALLPeak.Mtx,"mydir/Top32K.ALLPeak.Mtx")
    ##endregion

    ##region 2020-10-10 Peak classification lineage-empeirically based
    ##region function: L2 and Kcluster
    L2<-function(x){
      xL2<-x/sqrt(sum(x^2))
      return(xL2)
    }

    Kcluster<-function(df=RPKM.7CellTypes.endo.shared,k=10){
    test<-apply(df[,1:7],1,L2) %>% t
    colnames(test)<-colnames(RPKM.7CellTypes)[1:7]
    test.k<-kmeans(test,k)
    datatoplot<-data.frame(test,group=test.k$cluster,peaks=row.names(test)) %>% melt(.,id.vars=c("group","peaks"))
    return(list(data=data.frame(df[,1:7],group=test.k$cluster),datatoplot=datatoplot))
    }
    ##endregion function: L2 and Kcluster
RPKM.7CellTypes<-readRDS("mydir/RPKM.7CellTypes.group")
RPKM.7CellTypes<-RPKM.7CellTypes[,c("Beta","Delta","Alpha","PP","Duct","Acinar","PSC")]
RPKM.7CellTypes$EndoMAX<-apply(RPKM.7CellTypes,1,function(x){max(x[1:4])})
RPKM.7CellTypes$NonMAX<-apply(RPKM.7CellTypes,1,function(x){max(x[5:7])})
# Make nonendocrine part
RPKM.7CellTypes.non<-subset(RPKM.7CellTypes,(EndoMAX+1)/(NonMAX+1)<0.5)
RPKM.7CellTypes.non$NonMIN<-apply(RPKM.7CellTypes.non,1,function(x){min(x[5:7])})
RPKM.7CellTypes.non.shared<-subset(RPKM.7CellTypes.non,(NonMAX+1)/(NonMIN+1)<2)
RPKM.7CellTypes.non.spec<-subset(RPKM.7CellTypes.non,(NonMAX+1)/(NonMIN+1)>=2)
set.seed(1)
RPKM.7CellTypes.non.spec.kcl<-Kcluster(RPKM.7CellTypes.non.spec,k=5)
RPKM.7CellTypes.non.spec.kcl[[1]]$group<-mapvalues(RPKM.7CellTypes.non.spec.kcl[[1]]$group,from=c(4,2,3,1,5),to=c("C9","C10","C11","C12","C12"))
## Make endo part
RPKM.7CellTypes.endo<-subset(RPKM.7CellTypes,(EndoMAX+1)/(NonMAX+1)>2)
RPKM.7CellTypes.endo$EndoMIN<-apply(RPKM.7CellTypes.endo,1,function(x){min(x[1:4])})
RPKM.7CellTypes.endo.shared<-subset(RPKM.7CellTypes.endo,(EndoMAX+1)/(EndoMIN+1)<2)
RPKM.7CellTypes.endo.spec<-subset(RPKM.7CellTypes.endo,(EndoMAX+1)/(EndoMIN+1)>=2)
set.seed(1)
RPKM.7CellTypes.endo.spec.kcl<-Kcluster(RPKM.7CellTypes.endo.spec,k=10)
RPKM.7CellTypes.endo.spec.kcl[[1]]$group<-mapvalues(RPKM.7CellTypes.endo.spec.kcl[[1]]$group,from=c(2,8,6,7,4,1,3,5,9,10),to=c("C2","C2","C3","C3","C4","C5","C5","C6","C7","C8"))
RPKM.7CellTypes.endo.spec.kcl[[1]][row.names(subset(RPKM.7CellTypes.endo.spec.kcl[[1]],group=="C6" & Alpha/PP<=1.5)),"group"]<-"C7"
## Make cross-lineage (Bimod and common) part
RPKM.7CellTypes.LinShare<-subset(RPKM.7CellTypes,(EndoMAX+1)/(NonMAX+1)>=0.5 & (EndoMAX+1)/(NonMAX+1)<=2)
RPKM.7CellTypes.LinShare$EndoMIN<-apply(RPKM.7CellTypes.LinShare,1,function(x){min(x[1:4])})
RPKM.7CellTypes.LinShare$NonMIN<-apply(RPKM.7CellTypes.LinShare,1,function(x){min(x[5:7])})
RPKM.7CellTypes.bimod<-subset(RPKM.7CellTypes.LinShare,EndoMAX/EndoMIN>2 & NonMAX/NonMIN >2)
RPKM.7CellTypes.common<-subset(RPKM.7CellTypes.LinShare,EndoMAX/EndoMIN<2 | NonMAX/NonMIN <2)
set.seed(1)
RPKM.7CellTypes.bimod.kcl<-Kcluster(RPKM.7CellTypes.bimod,k=16)
RPKM.7CellTypes.bimod.kcl[[1]]<-subset(RPKM.7CellTypes.bimod.kcl[[1]],!group %in% c(1,3,6))
RPKM.7CellTypes.bimod.kcl[[1]]$group<-factor(RPKM.7CellTypes.bimod.kcl[[1]]$group,levels=c(4,9,13,12,2,15,16,7,14,8,11,10,5))
RPKM.7CellTypes.bimod.kcl[[2]]<-subset(RPKM.7CellTypes.bimod.kcl[[2]],!group %in% c(1,3,6))
RPKM.7CellTypes.bimod.kcl[[2]]$group<-factor(RPKM.7CellTypes.bimod.kcl[[2]]$group,levels=c(4,9,13,12,2,15,16,7,14,8,11,10,5))
# saveRDS(RPKM.7CellTypes.bimod.kcl,"mydir/RPKM.7CellTypes.bimod.kcl")
## bind
RPKM.7CellTypes.LinBased<-rbind(data.frame(RPKM.7CellTypes.endo.shared[,1:7],group="C1"),
RPKM.7CellTypes.endo.spec.kcl[[1]],
RPKM.7CellTypes.non.spec.kcl[[1]],
data.frame(RPKM.7CellTypes.non.shared[,1:7],group="C13"),
data.frame(RPKM.7CellTypes.common[,1:7],group="Common"),
data.frame(RPKM.7CellTypes.bimod[,1:7],group="Bimod")
)
saveRDS(RPKM.7CellTypes.LinBased,"mydir/RPKM.7CellTypes.LinBased")
RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
#
#
# p1<-ggplot(RPKM.7CellTypes.endo.spec.kcl[[2]])+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limits=c(0,1),oob = scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())
#
#
# p2<-ggplot(RPKM.7CellTypes.non.spec.kcl[[2]])+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limits=c(0,1),oob = scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())
# # dist(test) ->test.d
# # test.hc<-hclust(test.d)
# test.kcl<-Kcluster(RPKM.7CellTypes.common.bimod,k=16)
# ggplot(test.kcl[[2]])+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limits=c(0,1),oob = scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())
#
# ggplot(RPKM.7CellTypes.bimod.kcl[[2]])+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limits=c(0,1),oob = scales::squish)+facet_grid(group~.,scales="free",space="free")+theme(axis.text.y=element_blank())

    ##endregion Peak classification lineage-empeirically based

    ##region 2020-10-10 Plot peak heatmap for diff peaks

      ##region Generate summit windows to get WindowSumits.LR and WindowSumits.expandedALL
      peakfiles<-list.files()[grep("filteredFinal.32000.bed$",list.files())]
      TOP32Kbed<-list()
      for(file in peakfiles){
        TOP32Kbed<-c(TOP32Kbed,list(read.table(file,header=F)))
      }
      names(TOP32Kbed)<-sapply(strsplit(peakfiles,".",fixed="T"),function(x){x[[1]]})
      xlspeakfiles<-list.files()[grep("filteredFinal_peaks.xls$",list.files())]
      xlspeak<-list()
      for(file in xlspeakfiles){
        xlspeak<-c(xlspeak,list(read.table(file,header=T)))
      }
      names(xlspeak)<-sapply(strsplit(xlspeakfiles,".",fixed="T"),function(x){x[[1]]})
      ALLPeaks.TOP32K<-list()
      for (CellType in names(xlspeak)){
        top<-xlspeak[[CellType]] %>% subset(.,name %in% as.character(TOP32Kbed[[CellType]]$V4))
        ALLPeaks.TOP32K<-c(ALLPeaks.TOP32K,list(top))
      }
      names(ALLPeaks.TOP32K)<-names(xlspeak)
      ALLpeakSumit<-do.call(rbind,ALLPeaks.TOP32K) %>% .[!duplicated(.),] %>% .[order(.$chr,.$abs_summit),]
      # ALLpeakSumit<-subset(ALLpeakSumit,chr %in% levels(ALLpeakSumit$chr)[grep("random|chrUn",levels(ALLpeakSumit$chr),invert=T)])
      ## Separate into one list per chromosome
      ALLpeakSumit.lst<-list()
      for (chro in unique(ALLpeakSumit$chr)){
        ALLpeakSumit.lst<-c(ALLpeakSumit.lst,list(subset(ALLpeakSumit,chr==chro)[,c(1,5)]))
      }
      names(ALLpeakSumit.lst)<-unique(ALLpeakSumit$chr)
        ##region function AggregateSummit(ALLpeakSumit)
      #ALLpeakSumit is a dataframe col1:chr; col2: cummit
      AggregateSummit<-function(ALLpeakSumit){
      ALLpeakSumit.new<-c()
      Last<-ALLpeakSumit[1,]
      for (i in 2:nrow(ALLpeakSumit)){
        Cur<-ALLpeakSumit[i,]
        if(Cur[2]-Last[2]<100 & Cur[1]==Last[1]){
          Last[2]<-as.integer((as.numeric(Last[2])+as.numeric(Cur[2]))/2)
        }else{
          ALLpeakSumit.new<-rbind(ALLpeakSumit.new,Last)
          Last<-Cur
        }}
        ALLpeakSumit.new<-rbind(ALLpeakSumit.new,Last)
        return(ALLpeakSumit.new)
      }
      ##endregion function ALLpeakSumit
      library(parallel)
      ALLpeakSumit.aggre.lst<-mclapply(ALLpeakSumit.lst,AggregateSummit,mc.cores =16)
      # chrom.sizes<-read.table("~/Genome/hg19/hg19.chrom.sizes",row.names=1) # Checked
      WindowSumits<-data.table::rbindlist(ALLpeakSumit.aggre.lst)
      WindowSumits.LR<-data.frame(chr=WindowSumits$chr,L=WindowSumits$abs_summit-1500,R=WindowSumits$abs_summit+1500,Window=paste("Window",1:nrow(WindowSumits),sep="_"))
      # WindowSumits.LR$limit<-chrom.sizes[as.character(WindowSumits.LR$chr),]  # Checked, no problem
        ##region function Expand
      Expand<-function(x,Bins=100,window=3000){
      stepsize<-window/Bins
      df<- data.frame(Chr=x[1],Start=c(x[2],seq(x[2],x[3],stepsize)[2:(Bins)]+1),end=c(seq(x[2],x[3],stepsize)[2:(Bins)],x[3]),Bin=1:Bins,Window=x[4])
      return(df)
      }
      ##endregion function Expand
      WindowSumits.expandedALL.lst<-apply(WindowSumits.LR,1,Expand)
      library(data.table)
      WindowSumits.expandedALL<-rbindlist(WindowSumits.expandedALL.lst)
      WindowSumits.expandedALL<-as.data.frame(WindowSumits.expandedALL)
      WindowSumits.expandedALL$Start<-as.numeric(as.character(WindowSumits.expandedALL$Start))
      WindowSumits.expandedALL$end<-as.numeric(as.character(WindowSumits.expandedALL$end))
      ##endregion Generate summit windows  to get WindowSumits.LR and WindowSumits.expandedALL

      ##region Generate bridge between the peaks analyzed and the Window
      write.table(WindowSumits.LR,"WindowSumits.LR.bed",quote=F,sep="\t",row.names=F,col.names=F)
      "
      bedtools intersect -a Islet12.ALL.totalPeak.TOP32K.noBlack.bed.withname -b  WindowSumits.LR.bed -wb -wa  | cut -f1-4,8 > TOP32KPeak.Windows
      "
      TOP32KPeak.Windows<-read.table("TOP32KPeak.Windows")
        ##endregion Generate bridge between the peaks analyzed and the Window

      ##region Count reads from monoclonal files
      write.table(WindowSumits.expandedALL,"WindowSumits.expandedAL.tb",quote=F,sep="\t",row.names=F,col.names=F)
      "
      rm -rf Number
      for file in `ls | ls | grep filteredFinal.bed`
      do
      echo $file
      name=${file/.SVM.KNN.filteredFinal.bed/}
      bedtools intersect -a WindowSumits.expandedAL.tb -b  $file -c > $name.WindowMonoclonal.LR.expanded
      Depth=`wc -l ./$file | cut -f1 -d' '`
      echo -e "$name\t$Depth" >>Number
      done
      "
      ##endregion Count reads from monoclonal files

      ##region Step4 Read data for ploting
      RPKM.7CellTypes<-readRDS("mydir/RPKM.7CellTypes.group")
      RPKM.7CellTypes.Tier12<-readRDS("mydir/RPKM.7CellTypes.Tier12")
      RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
      RPKM.7CellTypes$group.refine<-RPKM.7CellTypes$group
      RPKM.7CellTypes$group.refine<-as.character(RPKM.7CellTypes$group.refine)
      AlphaPP<-subset(RPKM.7CellTypes, group %in% c("PPAlpha","AlphaPP"))
      RPKM.7CellTypes[row.names(AlphaPP)[AlphaPP$Alpha/AlphaPP$PP>1.5],"group.refine"]<-"Alpha"
      RPKM.7CellTypes[row.names(AlphaPP)[AlphaPP$Alpha/AlphaPP$PP<=1.5],"group.refine"]<-"AlphaPP"
      # RPKM.7CellTypes[row.names(AlphaPP)[AlphaPP$Alpha/AlphaPP$PP>=0.66 & AlphaPP$Alpha/AlphaPP$PP<=1.5],"group.refine"]<-"AlphaPP"
      RPKM.7CellTypes$group.refine<-factor(RPKM.7CellTypes$group.refine,levels=c("Endo","Beta","BetaDelta","Delta","DeltaAlpha","Alpha","AlphaPP","Duct","Acinar","PSC"))
      # saveRDS(RPKM.7CellTypes,"mydir/RPKM.7CellTypes.group")
      Numbers<-read.table("Number")
      Celltype.lst<-list()
      for(celltype in c("Beta","Delta","Alpha","PP","Duct","Acinar","PSC")){
        file<-paste(celltype,".WindowMonoclonal.LR.expanded",sep="")
        tmp<-read.table(file)
        tmp$RPKM<-1e6*tmp$V6/Numbers[Numbers$V1==celltype,2]
        Celltype.lst<-c(Celltype.lst,list(tmp))
      }
      names(Celltype.lst)<-c("Beta","Delta","Alpha","PP","Duct","Acinar","PSC")
      TOP32KPeak.Windows<-read.table("TOP32KPeak.Windows")

        ##region plot Tier1 (Old)
      TOP32KPeak.Windows.specific<-merge(TOP32KPeak.Windows,RPKM.7CellTypes[!is.na(RPKM.7CellTypes$group.refine),"group.refine",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")

      for (celltype in names(Celltype.lst)){
        datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.specific[,c("V5","group.refine")],by="V5")
        png(paste(celltype,"CellType.Heat.light.png",sep="."),height=6000,width=500,res=300)
        p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,15),oob = scales::squish)+facet_grid(group.refine~.,space="free",scales="free")+theme_bw()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.border=element_rect(size=1.2))
        print(p)
        dev.off()
      }
      ## Produce short version
      for (celltype in names(Celltype.lst)){
        datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.specific[,c("V5","group.refine")],by="V5")
        png(paste(celltype,"CellType.Heat.light.short.png",sep="."),height=378,width=500,res=300)
        p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,15),oob = scales::squish)+facet_grid(group.refine~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
        print(p)
        dev.off()
      }
        ##endregion plot Tier1

        ##region plot Tier2 (Old)
        TOP32KPeak.Windows.specific.T2<-merge(TOP32KPeak.Windows,RPKM.7CellTypes.Tier12$Tier2[,"group.refine",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.specific.T2[,c("V5","group.refine")],by="V5")
          png(paste(celltype,"CellType.Heat.T2.png",sep="."),height=6000,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group.refine~.,space="free",scales="free")+theme_bw()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.border=element_rect(size=1.2))
          print(p)
          dev.off()
        }
        ## Short version
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.specific.T2[,c("V5","group")],by="V5")
          png(paste(celltype,"CellType.Heat.T2.short.png",sep="."),height=1360,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
          print(p)
          dev.off()
        }
        ##endregion

        ##region plot Common (OLd)
        TOP32KPeak.Windows.Common<-merge(TOP32KPeak.Windows,RPKM.7CellTypes.Tier12$Common[,"group.refine",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        ## Produce short version
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.Common[,c("V5","group.refine")],by="V5")
          png(paste(celltype,"CellType.Heat.Common.short.png",sep="."),height=378,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="blue",limits=c(0,15),oob = scales::squish)+facet_grid(group.refine~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
          print(p)
          dev.off()
        }

      ##endregion Step4 Read data for ploting

        ##region plot Lineage-Based
        RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
        TOP32KPeak.Windows<-read.table("TOP32KPeak.Windows")
        RPKM.7CellTypes.LinBased.Unimod.spec<-subset(RPKM.7CellTypes.LinBased,!group %in% c("Bimod","Common"))
        RPKM.7CellTypes.LinBased.Unimod.spec$group<-factor(RPKM.7CellTypes.LinBased.Unimod.spec$group, levels=c("C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13"))

        TOP32KPeak.Windows.LinBased.unimod.spec<-merge(TOP32KPeak.Windows,  RPKM.7CellTypes.LinBased.Unimod.spec[,"group",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
          ##region Produce endo-spec and nonendospecific --long
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.LinBased.unimod.spec[,c("V5","group")],by="V5")
          png(paste(celltype,"CellType.Heat.Lin.Spec.png",sep="."),height=6000,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_bw()+theme(axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),strip.background = element_blank(),panel.border=element_rect(size=1.2),legend.position="none",strip.text=element_blank())
          print(p)
          dev.off()
        }
          ##endregion
          ##region produce  bimodel --long
        TOP32KPeak.Windows.LinBased.bimod<-merge(TOP32KPeak.Windows, RPKM.7CellTypes.bimod.kcl[[1]][,"group",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.LinBased.bimod[,c("V5","group")],by="V5")
          png(paste(celltype,"CellType.Heat.Lin.Bimod.png",sep="."),height=6000,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_bw()+theme(axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),strip.background = element_blank(),panel.border=element_rect(size=1.2),legend.position="none",strip.text=element_blank())
          print(p)
          dev.off()
        }
          ##endregion produce  bimodel --long
          ##region Produce Common --short
        RPKM.7CellTypes.LinBased.common<-subset(RPKM.7CellTypes.LinBased,group %in% c("Common"))
        # RPKM.7CellTypes.LinBased.common<-RPKM.7CellTypes.LinBased.common[,1:7] %>% .[order(rowMeans(.),decreasing=T),]
        #  %>% cbind(.,group="Common")
        TOP32KPeak.Windows.LinBased.common<-merge(TOP32KPeak.Windows,RPKM.7CellTypes.LinBased.common[,"group",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        # TOP32KPeak.Windows.LinBased.common$V4<-factor(TOP32KPeak.Windows.LinBased.common$V4,levels=row.names(RPKM.7CellTypes.LinBased.common))
        names(TOP32KPeak.Windows.LinBased.common)[1]<-"peaks"
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.LinBased.common[,c("peaks","V5","group")],by="V5")
          # datatoplot<-datatoplot[order(datatoplot$peaks,decreasing=T),]
          # datatoplot$V5<-factor(datatoplot$V5,levels=unique(datatoplot$V5))
          png(paste(celltype,"CellType.Heat.Lin.common.short4.png",sep="."),height=805,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="blue",limits=c(0,4),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
          print(p)
          dev.off()
        }
          ##endregion Produce Common --short
          ##region Produce endo-spec --short
        RPKM.7CellTypes.LinBased.Unimod.Endo<-subset(RPKM.7CellTypes.LinBased,group %in% c("C1","C2","C3","C4","C5","C6","C7","C8"))
        RPKM.7CellTypes.LinBased.Unimod.Endo$group<-factor(RPKM.7CellTypes.LinBased.Unimod.Endo$group, levels=c("C1","C2","C3","C4","C5","C6","C7","C8"))
        TOP32KPeak.Windows.LinBased.Unimod.Endo<-merge(TOP32KPeak.Windows,  RPKM.7CellTypes.LinBased.Unimod.Endo[,"group",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.LinBased.Unimod.Endo[,c("V5","group")],by="V5")
          png(paste(celltype,"CellType.Heat.Lin.Endo.short.png",sep="."),height=314,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
          print(p)
          dev.off()
        }
          ##endregion Produce endo-spec --short
          ##region Produce  nonendospecific --short
        RPKM.7CellTypes.LinBased.Unimod.Non<-subset(RPKM.7CellTypes.LinBased,group %in% c("C9","C10","C11","C12","C13"))
        RPKM.7CellTypes.LinBased.Unimod.Non$group<-factor(RPKM.7CellTypes.LinBased.Unimod.Non$group, levels=c("C9","C10","C11","C12","C13"))
        TOP32KPeak.Windows.LinBased.Unimod.Non<-merge(TOP32KPeak.Windows,  RPKM.7CellTypes.LinBased.Unimod.Non[,"group",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.LinBased.Unimod.Non[,c("V5","group")],by="V5")
          png(paste(celltype,"CellType.Heat.Lin.Non.short.png",sep="."),height=678,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
          print(p)
          dev.off()
        }
          ##endregion Produce  nonendospecific --short
          ##region Produce bimod  --short
        TOP32KPeak.Windows.LinBased.bimod<-merge(TOP32KPeak.Windows, RPKM.7CellTypes.bimod.kcl[[1]][,"group",drop=F] %>% cbind(.,peak=row.names(.)),by.x="V4",by.y="peak")
        for (celltype in names(Celltype.lst)){
          datatoplot<-merge(Celltype.lst[[celltype]],TOP32KPeak.Windows.LinBased.bimod[,c("V5","group")],by="V5")
          png(paste(celltype,"CellType.Heat.Lin.Bimod.short.png",sep="."),height=436,width=500,res=300)
          p<-ggplot(datatoplot)+aes(V4,V5,fill=RPKM)+geom_tile()+scale_fill_gradient(low="white",high="red",limits=c(0,10),oob = scales::squish)+facet_grid(group~.,space="free",scales="free")+theme_void()+theme(axis.text=element_blank(),axis.title=element_blank(),legend.position="none",axis.ticks=element_blank(),strip.background = element_blank(),strip.text = element_blank(),panel.spacing = unit(0,"lines"))
          print(p)
          dev.off()
        }
          ##endregion Produce bimod  --Short
        ##endregion plot Lineage-Based

      ##endregion Step4 Read data for ploting

    ##endregion 2020-10-10 Plot peak heatmap for diff peaks

  ##endregion Peak clustering using Top32K peaks


  ##region 2020-10-10 Annotate all peaks with Promoter/Intergenic/Intron.../
    "annotatePeaks.pl  Islet12.ALL.totalPeak.TOP32K.noBlack.bed hg19 > Islet12.ALL.totalPeak.TOP32K.noBlack.bed.annotated"
      RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
      RPKM.7CellTypes.LinBased$group.2<-mapvalues(RPKM.7CellTypes.LinBased$group,from=c("C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13","Common","Bimod"),to=c(rep("Endo",8),rep("Non",5),"Common","Bimod"))
      Peakannotation.all<-read.delim("Islet12.ALL.totalPeak.TOP32K.noBlack.bed.annotated")
      row.names(Peakannotation.all)<-paste(Peakannotation.all[,"Chr"],(Peakannotation.all[,"Start"]-1),Peakannotation.all[,"End"],sep="_")
      Peakannotation.all<-Peakannotation.all[,c("Annotation","Distance.to.TSS","Gene.Name")]
      Peakannotation.all$Region<-strsplit(as.character(Peakannotation.all$Annotation)," ") %>% lapply(.,function(x){x[1]}) %>% unlist()
      # saveRDS(Peakannotation.all,"mydir/Peakannotation.all")
     Peakannotation.all.Lin<-Tomerge_v2(Peakannotation.all,RPKM.7CellTypes.LinBased[,"group.2",drop=F],leavex=F)
     Peakannotation.prop.m<-table(Peakannotation.all.Lin$Region,Peakannotation.all.Lin$group.2) %>% as.matrix() %>% apply(.,2,function(x){x/sum(x)}) %>% melt
     Peakannotation.prop.m$Var2<-factor(Peakannotation.prop.m$Var2,levels=c("Common","Endo","Non","Bimod"))
     Peakannotation.prop.m$Var1<-factor(Peakannotation.prop.m$Var1,levels=c("promoter-TSS","5'","exon","3'","TTS","non-coding","intron","Intergenic"))
     pdf("PeakAnnotation.percent.pdf",width=14)
     ggplot(Peakannotation.prop.m)+aes(Var1,value,fill=Var2)+geom_bar(stat="identity",position="dodge",color="black")+scale_fill_brewer(palette="Set2")+theme_classic()
     dev.off()
     ##Fisher's exact test

  ##endregion 2020-10-10 Annotate all peaks with regard to the Promoter/Intergenic/Intron.../

  ##region Specific peaks VS RNA expression

    ##region make aggregated RNAexpression for each cell type
      Islet12.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.scRNA.seurat3.filtered")
      alpha<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Alpha"))] %>% as.matrix %>% rowSums
      beta<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Beta"))] %>% as.matrix %>% rowSums
      delta<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Delta"))] %>% as.matrix %>% rowSums
      pp<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="PP"))] %>% as.matrix %>% rowSums
      duct<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Duct"))] %>% as.matrix %>% rowSums
      acinar<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="Acinar"))] %>% as.matrix %>% rowSums
      psc<-Islet12.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(subset(Islet12.scRNA.seurat3.filtered@meta.data,Cell_type=="PSC"))] %>% as.matrix %>% rowSums
      Aggregate.7celltype.RNA.cts<-data.frame(beta,delta,alpha,pp,duct,acinar,psc)
      Aggregate.7celltype.RNA.rpkm<-apply(Aggregate.7celltype.RNA.cts,2,function(x){1e6*x/sum(x)})
      # saveRDS(Aggregate.7celltype.RNA.cts,"mydir/Aggregate.7celltype.RNA.cts")
      # saveRDS(Aggregate.7celltype.RNA.rpkm,"mydir/Aggregate.7celltype.RNA.rpkm")
      Aggregate.7celltype.RNA.cts<-readRDS("mydir/Aggregate.7celltype.RNA.cts")
      Aggregate.7celltype.RNA.rpkm<-readRDS("mydir/Aggregate.7celltype.RNA.rpkm")
        ##endregion make aggregated RNAexpression for each cell type

    ##region 2020-10-12 Compare Peaks VS Expression
      RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
      RPKM.7CellTypes.LinBased$group.2<-mapvalues(RPKM.7CellTypes.LinBased$group,from=c("C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13","Common","Bimod"),to=c(rep("Endo",8),rep("Non",5),"Common","Bimod"))
      # saveRDS(RPKM.7CellTypes.LinBased,"mydir/RPKM.7CellTypes.LinBased.group2")
      RPKM.7CellTypes.bimod.kcl<-readRDS("mydir/RPKM.7CellTypes.bimod.kcl")
      Peakannotation.all.Lin<-Tomerge_v2(Peakannotation.all,RPKM.7CellTypes.LinBased[,"group.2",drop=F],leavex=F)
      RPKM.7CellTypes.bimod.kcl[[1]]$group<-mapvalues(RPKM.7CellTypes.bimod.kcl[[1]]$group,from=c(4,9,13,12,2,15,16,7,14,8,11,10,5),to=c("Un_C1","Un_C2","Un_C3","Un_C4","Un_C5","Un_C6","Un_C7","Un_C8","Un_C9","Un_C10","Un_C11","Un_C12","Un_C13"))
      Bimod<-subset(RPKM.7CellTypes.LinBased,group.2=="Bimod")
      Bimod$group<-RPKM.7CellTypes.bimod.kcl[[1]][row.names(Bimod),"group"]
      Bimod<-subset(Bimod,!is.na(Bimod$group))
      RPKM.7CellTypes.LinBased<-rbind(subset(RPKM.7CellTypes.LinBased,group!="Bimod"),Bimod)
      Peakannotation.all<-readRDS("mydir/Peakannotation.all")
      Peakannotation.all$peaks<-row.names(Peakannotation.all)
      Aggregate.7celltype.RNA.rpkm<-readRDS("mydir/Aggregate.7celltype.RNA.rpkm")
      Aggregate.7celltype.RNA.rpkm<-as.data.frame(Aggregate.7celltype.RNA.rpkm) %>% cbind(.,gene=row.names(.))
      Peakannotation.all.expr<-merge(Peakannotation.all,Aggregate.7celltype.RNA.rpkm,by.x="Gene.Name",by.y="gene",all.x=T)
      row.names(Peakannotation.all.expr)<-Peakannotation.all.expr$peaks
      PeakVSRNA.all<-Tomerge_v2(RPKM.7CellTypes.LinBased,Peakannotation.all.expr)
      PeakVSRNA.all.complete<-PeakVSRNA.all[complete.cases(PeakVSRNA.all),]
      PeakVSRNA.all.complete$PearsonR<-PeakVSRNA.all.complete[,c(1:7,15:21)] %>% as.matrix %>% apply(.,1,function(x){cor(x[1:7],x[8:14])})

      ## Plot boxplot of pearson's r
      pk.random<-PeakVSRNA.all.complete[sample(1:nrow(PeakVSRNA.all.complete),nrow(PeakVSRNA.all.complete)),1:7]
      expr.random<-PeakVSRNA.all.complete[sample(1:nrow(PeakVSRNA.all.complete),nrow(PeakVSRNA.all.complete)),15:21]
      PeakVSRNA.all.complete$PearsonRRandom<-cbind(pk.random,expr.random) %>% apply(.,1,function(x){cor(x[1:7],x[8:14])})
      PeakVSRNA.all.complete$Region<-factor(PeakVSRNA.all.complete$Region,levels=c("promoter-TSS","5'","exon","3'","TTS","non-coding","intron","Intergenic"))
      pdf("PearsonR.box.pdf",width=12)
      subset(PeakVSRNA.all.complete,group.2!="Common") %>% ggplot(.)+aes(group.2,PearsonR,fill=group.2)+geom_boxplot()+facet_grid(~Region)+scale_fill_manual(values=brewer.pal(8,"Set2")[2:4])+theme_bw()+theme(panel.grid=element_blank())
      subset(PeakVSRNA.all.complete,group.2!="Common") %>% ggplot(.)+aes(group.2,PearsonRRandom,fill=group.2)+geom_boxplot()
      dev.off()
      ##Plot expression heatmaps
      Endo.Non.RNA.m<-subset(PeakVSRNA.all.complete,group.2 %in% c("Endo","Non")) %>% .[,c("group","Region","beta","delta","alpha","pp","duct","acinar","psc")] %>% cbind(.,peaks=row.names(.)) %>% melt(.,id.vars=c("group","Region","peaks"))
      Endo.Non.RNA.m<-PeakVSRNA.all.complete[,15:21] %>% apply(.,1,function(x){(x-mean(x))/sd(x)}) %>% t %>% cbind(PeakVSRNA.all.complete[,c("group","group.2","Region")],.) %>% subset(.,group.2 %in% c("Endo","Non")) %>% cbind(.,peaks=row.names(.)) %>% melt(.,id.vars=c("group","group.2","Region","peaks"))
      Endo.Non.RNA.m$group<-factor(Endo.Non.RNA.m$group,levels=c("C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13"))
      pdf("SpecificPeakVSExpr.pdf")
      subset(Endo.Non.RNA.m,Region %in% c("promoter-TSS","5'")) %>% ggplot(.)+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limit=c(-2,2),oob=scales::squish)+facet_grid(group~.,scales="free",space="free")+theme_void()+theme(axis.text=element_blank())
      dev.off()
      Un.RNA.m<-subset(PeakVSRNA.all.complete,group.2=="Bimod") %>% .[,c("group","Region","beta","delta","alpha","pp","duct","acinar","psc")] %>% cbind(.,peaks=row.names(.)) %>% melt(.,id.vars=c("group","Region","peaks"))
      Un.RNA.m<-PeakVSRNA.all.complete[,15:21] %>% apply(.,1,function(x){(x-mean(x))/sd(x)}) %>% t %>% cbind(PeakVSRNA.all.complete[,c("group","group.2","Region")],.) %>% subset(.,group.2=="Bimod") %>% cbind(.,peaks=row.names(.)) %>% melt(.,id.vars=c("group","group.2","Region","peaks"))
      pdf("Uncertain.PeakVSExpr.pdf")
      subset(Un.RNA.m,Region %in% c("promoter-TSS","5'")) %>% ggplot(.)+aes(variable,peaks,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red",limit=c(-2,2),oob=scales::squish)+facet_grid(group~.,scales="free",space="free")+theme_void()+theme(axis.text=element_blank())
      dev.off()
##endregion 2020-10-12 Compare Peaks VS Expression

    ##region Enhancer-gene link(by correlation)
        RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
        ## extend the peak into 1Mb window and write out overlap with gene location bed
        RPKM.7CellTypes.LinBased.1Mbwindow.bed<-PeakName2Bed(row.names(RPKM.7CellTypes.LinBased))
        RPKM.7CellTypes.LinBased.1Mbwindow.bed$Peak.L<-RPKM.7CellTypes.LinBased.1Mbwindow.bed$V2
        RPKM.7CellTypes.LinBased.1Mbwindow.bed$Peak.R<-RPKM.7CellTypes.LinBased.1Mbwindow.bed$V3
        RPKM.7CellTypes.LinBased.1Mbwindow.bed$V2<-RPKM.7CellTypes.LinBased.1Mbwindow.bed$V2-500000
        RPKM.7CellTypes.LinBased.1Mbwindow.bed$V3<-RPKM.7CellTypes.LinBased.1Mbwindow.bed$V3+500000
        RPKM.7CellTypes.LinBased.1Mbwindow.bed$V2[which(RPKM.7CellTypes.LinBased.1Mbwindow.bed$V2<=0)]<-1
        Window2Peak.dic<-data.frame(row.names=paste(RPKM.7CellTypes.LinBased.1Mbwindow.bed$V1,RPKM.7CellTypes.LinBased.1Mbwindow.bed$V2,RPKM.7CellTypes.LinBased.1Mbwindow.bed$V3,sep="_"),peak=paste(RPKM.7CellTypes.LinBased.1Mbwindow.bed$V1,RPKM.7CellTypes.LinBased.1Mbwindow.bed$Peak.L,RPKM.7CellTypes.LinBased.1Mbwindow.bed$Peak.R,sep="_"))
        Window2Peak.dic$peak<-as.character(Window2Peak.dic$peak)
        write.table(RPKM.7CellTypes.LinBased.1Mbwindow.bed,"RPKM.7CellTypes.LinBased.1Mbwindow.bed",sep="\t",quote=F,col.names=F,row.names=F)
        "
        bedtools intersect -a RPKM.7CellTypes.LinBased.1Mbwindow.bed -b ~/Genome/hg19/hg19.refFlat.TSS.bed -wa -wb | cut -f1-3,7 | awk '{split($4,a,"_"); print $1,$2,$3,$1"_"$2"_"$3"__"a[1]}' | sort -uk4,4 | sort -k1,1 -k2,2n > RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed
        bedtools intersect -a RPKM.7CellTypes.LinBased.1Mbwindow.bed -b ~/Genome/hg19/hg19.refFlat.TSS.bed -wa -wb | cut -f1-3,5,7 | awk '{split($5,a,"_");print $1,$2,$3,$4,a[1]}' OFS="\t" > Window.TSS.dic
        "
        Window.TSS.dic<-read.table("Window.TSS.dic")
        Window.TSS.dic$windows<-paste(Window.TSS.dic$V1,Window.TSS.dic$V2,Window.TSS.dic$V3,sep="_")
        Window.TSS.dic.list<-list()
        for(window in unique(Window.TSS.dic$windows)){
          tmp<-subset(Window.TSS.dic,windows==window)
          Window.TSS.dic.list<-c(Window.TSS.dic.list,list(tmp))
        }
        names(Window.TSS.dic.list)<-unique(Window.TSS.dic$windows)
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed<-read.table("RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed")
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$windows<-strsplit(as.character(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$V4),"__") %>% sapply(.,function(x){x[1]})
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$genes<-strsplit(as.character(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$V4),"__") %>% sapply(.,function(x){x[2]})
        ##Read in RNA aggregated expresion and calculate pearson's r
        Aggregate.7celltype.RNA.rpkm<-readRDS("mydir/Aggregate.7celltype.RNA.rpkm")
        Aggregate.7celltype.RNA.rpkm<-as.data.frame(Aggregate.7celltype.RNA.rpkm) %>% cbind(.,gene=row.names(.))
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed,genes %in% row.names(Aggregate.7celltype.RNA.rpkm))
        library(doParallel)
        cl <- makeCluster(12)
        doParallel::registerDoParallel(cl)
        pearsonR<-foreach(i=1:nrow(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed)) %dopar%
        {
          correlation<-cor(as.numeric(RPKM.7CellTypes.LinBased[Window2Peak.dic[RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed[i,"windows"],],1:7]),as.numeric(Aggregate.7celltype.RNA.rpkm[RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed[i,"genes"],1:7]))
          names(correlation)<-as.character(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed[i,"V4"])
          return(correlation)
        }
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$cor<-unlist(pearsonR)
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$peaks<-Window2Peak.dic[RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$windows,]
        # saveRDS(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed,"mydir/RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed")
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed<-readRDS("mydir/RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed")
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed,cor>0.7)
        ##Output a bed-like interact file with all links(correlation -1 to 1)
        # saveRDS(genepos.lst,"mydir/genepos.lst")
        TSS.chr<-sapply(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$gene,function(x){genepos.lst$chrs[[x]]})
        TSS.pos<-sapply(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$gene,function(x){as.integer(genepos.lst$medianTSSs[[x]])})
        peak.df<-strsplit(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$peaks,"_") %>% do.call(rbind,.) %>% as.data.frame()
        names(peak.df)<-c("Peak.chr","Peak.start","Peak.end")
        peak.df$Peak.start<-as.numeric(as.character(peak.df$Peak.start))
        peak.df$Peak.end<-as.numeric(as.character(peak.df$Peak.end))
        AllPossibleTSSPeaklink.bed<-data.frame(TSS.chr=TSS.chr,TSS.start=TSS.pos-1,TSS.end=TSS.pos,TSS.name=RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$gene,peak.df,peakName=RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed$peaks)
        write.table(AllPossibleTSSPeaklink.bed,"AllPossibleTSSPeaklink.bed",sep="\t",quote=F,col.names=F,row.names=F)
        data<-readRDS("AllPossibleTSSPeaklink.islet.alpha.beta.RDS")
        AllPossibleTSSPeaklink_HiC<-cbind(data,RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed[,"cor",drop=F])

        ##region Prepare for correlation-based pair UCSC track
        genepos<-read.table("~/Genome/hg19/hg19.refFlat.TSS")
        genenames<-list()
        medianTSSs<-list()
        chrs<-c()
        for(gene in unique(genepos$V1)){
          print(gene)
          tmp<-subset(genepos,V1==gene)
          if(length(unique(tmp$V3))>1){
            next
          }
          chrs<-c(chrs,list(as.character(unique(tmp$V3))))
          medianTSSs<-c(medianTSSs,list(median(tmp$V5)))
          genenames<-c(genenames,gene)
        }
        names(medianTSSs)<-genenames
        names(chrs)<-genenames
        genepos.lst<-list(chrs=chrs,medianTSSs=medianTSSs)
        # saveRDS(genepos.lst,"mydir/genepos.lst")
        genepos.lst<-readRDS("mydir/genepos.lst")
        chr<-RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$V1
        Peakstart<-strsplit(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$peaks,"_") %>% sapply(.,function(x){as.numeric(x[2])}) %>% as.integer
        Peakend<-strsplit(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$peaks,"_") %>% sapply(.,function(x){as.numeric(x[3])})  %>% as.integer
        PeakName<-RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$peaks
        GeneName<-RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$genes
        GeneTSS.end<-unlist(lapply(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$genes,function(x){medianTSSs[[x]]})) %>% as.integer
        GeneTSS.start<-GeneTSS.end-1
        Lower.start<-c()
        Lower.end<-c()
        Upper.start<-c()
        Upper.end<-c()
        Lower.name<-c()
        Upper.name<-c()
        for(i in 1:63326){
          print(i)
          if(Peakstart[i]<GeneTSS.start[i]){
            Lower.start<-c(Lower.start,Peakstart[i])
            Lower.end<-c(Lower.end,Peakend[i])
            Upper.start<-c(Upper.start,GeneTSS.start[i])
            Upper.end<-c(Upper.end,GeneTSS.end[i])
            Lower.name<-c(Lower.name,PeakName[i])
            Upper.name<-c(Upper.name,GeneName[i])
          }else{
            Lower.start<-c(Lower.start,GeneTSS.start[i])
            Lower.end<-c(Lower.end,GeneTSS.end[i])
            Upper.start<-c(Upper.start,Peakstart[i])
            Upper.end<-c(Upper.end,Peakend[i])
            Lower.name<-c(Lower.name,GeneName[i])
            Upper.name<-c(Upper.name,PeakName[i])
          }
        }
        UCSCtrack.link.0.7.bed<-data.frame(chr,all.start=Lower.start,all.end=Upper.end,Name=RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$V4,score=as.integer(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$cor*1000),doublevalue=0,exp=".",color="0,0,0",chr,Lower.start,Lower.end,Lower.name,Lower.string=".",chr,Upper.start,Upper.end,Upper.name,Upper.string=".")
        setwd("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track")
        write.table(UCSCtrack.link.0.7.bed,"UCSCtrack.link.0.7.bed",sep="\t",quote=F,col.names=F,row.names=F)
        ##endregion Prepare for correlation-based pair UCSC track

        ##region Summary the distance of the highly correlated pairs
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$peakSumit<-strsplit(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7$peaks,"_") %>% sapply(.,function(x){(as.numeric(x[2])+as.numeric(x[3]))/2}) %>% as.integer
        Link.details<-foreach(i=1:nrow(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7)) %dopar%
        {
          tmp<-Window.TSS.dic.list[[RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7[i,"windows"]]]
          tmp$distance<-abs(tmp$V4-RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7[i,"peakSumit"])
          tmp<-tmp[order(tmp$distance),]
          closestG<-as.character(tmp[1,"V5"])
          closestD<-as.character(tmp[1,"distance"])
          curG.rank<-which(tmp$V5==RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7[i,"genes"])[1]
          curG.D<-tmp[curG.rank,"distance"]
          c(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7[i,"peaks"],closestD,closestG,RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7[i,"genes"],RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7[i,"cor"],curG.rank,curG.D)
        }
        Link.details.df<-do.call(rbind,Link.details) %>% as.data.frame
        Link.details.df$V2<-as.numeric(as.character(Link.details.df$V2))
        Link.details.df$V5<-as.numeric(as.character(Link.details.df$V5))
        Link.details.df$V6<-as.numeric(as.character(Link.details.df$V6))
        Link.details.df$V7<-as.numeric(as.character(Link.details.df$V7))
        # saveRDS(Link.details.df,"mydir/Link.details.df")
        Link.details.df<-readRDS("mydir/Link.details.df")
        Link.details.df.variable<-subset(Link.details.df,V1 %in% row.names(subset(RPKM.7CellTypes.LinBased,group!="Common")))
        ##endregion Summary the distance of the highly correlated pairs

        ##region Discuss the variable genes (Starting from TSS)
        Endocrine.genes<-readRDS("mydir/Endocrine.genes")
        NonEndocrine.genes<-readRDS("mydir/NonEndocrine.genes")
        variables.link<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.7,genes %in% c(Endocrine.genes,NonEndocrine.genes))
        variables.link$genes<-factor(variables.link$genes,levels=c(Endocrine.genes,NonEndocrine.genes))
        variables.link.annotated<-Peakannotation.all[variables.link$peaks,c("Gene.Name","Region")] %>% cbind(variables.link,.)
        ##plot the histogram

        Peakannotation.all<-readRDS("mydir/Peakannotation.all")
        TSS.linkPeakToplot1<-table(variables.link$genes) %>% as.data.frame %>% merge(.,rbind(data.frame(gene=Endocrine.genes,cat="Endo"),data.frame(gene=NonEndocrine.genes,cat="Non")),by.x="Var1",by.y="gene")
        variableGene.TSS<-subset(variables.link.annotated, as.character(genes)==as.character(Gene.Name) & Region %in% c("promoter-TSS","5'")) %>% .[order(.$cor,decreasing=T),] %>% .$gene %>% unique
        TSS.linkPeakToplot1$annotation<-ifelse(TSS.linkPeakToplot1$Var1 %in% variableGene.TSS, "Promoter-TSS", "Other")

        p1<-ggplot(TSS.linkPeakToplot1)+aes(Freq,fill=annotation)+geom_histogram(binwidth=1,color="black")+theme_classic()+scale_fill_brewer(palette="Set3")+xlim(-1,25)
        ##Compute random cor for variable TSSs
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.variable<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed,genes %in% c(Endocrine.genes,NonEndocrine.genes))
        random1<-data.frame(genes=RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.variable$genes,peaks=sample(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.variable$peaks))
        library(doParallel)
        cl <- makeCluster(12)
        doParallel::registerDoParallel(cl)
        pearsonR<-foreach(i=1:nrow(random1)) %dopar%
        {
        cor(as.numeric(RPKM.7CellTypes.LinBased[random1[i,"peaks"],1:7]),as.numeric(Aggregate.7celltype.RNA.rpkm[random1[i,"genes"],1:7]))
        }
        random1$cor<-unlist(pearsonR)
        random1.df<-subset(random1,cor>0.7) %>% .$genes %>% table %>% as.data.frame
        p2<-ggplot(random1.df)+aes(Freq)+geom_density()+xlim(-1,25)

        ##Plot for link distances
        genepos.lst<-readRDS("mydir/genepos.lst")
        variables.link.annotated$geneTSS<-as.integer(unlist(genepos.lst$medianTSSs[as.character(variables.link.annotated$genes)]))
        variables.link.annotated$peaksummit<-strsplit(variables.link.annotated$peaks,"_") %>% sapply(.,function(x){(as.numeric(x[3])+as.numeric(x[2]))/2}) %>% as.integer
        variables.link.annotated$distance<-with(variables.link.annotated,abs(geneTSS-peaksummit))
        variables.link.annotated$effect<-with(variables.link.annotated,ifelse(as.character(genes)==as.character(Gene.Name) & Region %in% c("promoter-TSS","5'"),"Promoter-TSS","Other"))
        p3<-ggplot(variables.link.annotated)+aes(log10(distance))+geom_histogram(binwidth=0.05,fill="white",color="black")
        pdf("PeakGene.linkbycor.pdf",width=10)
        print(p1)
        print(p2)
        print(p3)
        dev.off()
        ##region Discuss the variable peaks (Starting from peaks)
        RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.5<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed,cor>=0.5)
        Variable.peaks<-subset(RPKM.7CellTypes.LinBased,group!="Common")[,8,drop=F] %>% data.frame(peaks=row.names(.))
        Variable.peaks$group<-mapvalues(Variable.peaks$group,from=c("C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13","Bimod"),to=c(rep("Endo",8),rep("Non",5),"Bimod"))

        Peak.variables.link<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed.0.5,peaks %in% as.character(Variable.peaks$peaks))
        Peak.variables.link$peaks<-factor(Peak.variables.link$peaks,levels=as.character(Variable.peaks$peaks))
        ##plot the histogram
        table(Peak.variables.link$peaks) %>% as.data.frame %>% merge(.,Variable.peaks,by.x="Var1",by.y="peaks") %>% ggplot(.)+aes(Freq,fill=group)+geom_histogram(binwidth=1,color="black")+theme_classic()
        ##Compute random cor for variable Peaks
        RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.variablePeaks<-subset(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.bed,peaks %in% row.names(Variable.peaks))
        Peak.random1<-data.frame(peaks=RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.variablePeaks$peaks,genes=sample(RPKM.7CellTypes.LinBased.1Mbwindow.Gene.link.variablePeaks$genes))
        library(doParallel)
        cl <- makeCluster(12)
        doParallel::registerDoParallel(cl)
        pearsonR<-foreach(i=1:nrow(Peak.random1)) %dopar%
        {
        cor(as.numeric(RPKM.7CellTypes.LinBased[Peak.random1[i,"peaks"],1:7]),as.numeric(Aggregate.7celltype.RNA.rpkm[Peak.random1[i,"genes"],1:7]))
        }
        Peak.random1$cor<-unlist(pearsonR)

        subset(Peak.random1,cor>0.5) %>% .$peaks %>% table %>% as.data.frame() %>% ggplot()+aes(Freq)+geom_histogram(binwidth=1)

  ##endregion Specific peaks VS RNA expression

    ##region Specific peaks VS DNA binding motif

    ##region X Generate length and GC matched random bed (random background is too sensitive)
'bedtools nuc -fi ~/Genome/hg19/hg19.fa -bed Islet12.ALL.totalPeak.TOP32K.noBlack.bed | cut -f1-3,5 > Islet12.ALL.totalPeak.TOP32K.noBlack.bed.GCcontent
for i in {1..10}
do
bedtools shuffle -i Islet12.ALL.totalPeak.TOP32K.noBlack.bed -g ~/Genome/hg19/hg19.chrom.sizes >tmp.random.$i
bedtools nuc -fi ~/Genome/hg19/hg19.fa -bed tmp.random.$i | cut -f1-3,5 >tmp.random.GCcontent.$i
done
'
Islet12.ALL.totalPeak.TOP32K.noBlack.bed.GCcontent<-read.table("Islet12.ALL.totalPeak.TOP32K.noBlack.bed.GCcontent")
randomCandidates<-list()
for(i in 1:10){
  tmp<-read.table(paste("tmp.random.GCcontent",i,sep="."))
  randomCandidates<-c(randomCandidates,list(tmp))
}
targets<-replicate(10,Islet12.ALL.totalPeak.TOP32K.noBlack.bed.GCcontent[,4])
GCmatrix<-lapply(randomCandidates,function(x){x[,4]}) %>% do.call(cbind,.)
optimal.index<-abs(GCmatrix-targets) %>% apply(.,1,which.min)
GCmatch.random.bed<-c()
for(i in 1: length(optimal.index)){
  print(i)
  GCmatch.random.bed<-rbind(GCmatch.random.bed,randomCandidates[[optimal.index[i]]][i,])
}
write.table(GCmatch.random.bed[,1:3],"GCmatch.random.bed",sep="\t",quote=F,col.names=F,row.names=F)
  ##endregion Generate length and GC matched random bed

    ##region run fimo for all Islet12.ALL.totalPeak.TOP32K peaks and GC-matched random control
"
less Islet12.ALL.totalPeak.TOP32K.noBlack.bed | awk '{print $1,$2,$3,$1"_"$2"_"$3}' OFS='\t' > Islet12.ALL.totalPeak.TOP32K.noBlack.named.bed
sort -k1,1 -k2,2n GCmatch.random.bed | awk '{print $1,$2,$3,$1"_"$2"_"$3}' OFS='\t' > GCmatch.random.named.bed

bedtools getfasta -fi ~/Genome/hg19/hg19.fa -bed Islet12.ALL.totalPeak.TOP32K.noBlack.named.bed -fo Islet12.ALL.totalPeak.TOP32K.noBlack.named.hg19.fa -name
bedtools getfasta -fi ~/Genome/hg19/hg19.fa -bed GCmatch.random.named.bed -fo GCmatch.random.named.hg19.fa -name

Tfmotif=~/google/mysoftware/MEME/meme_4.12.0/Database/motif_databases/HUMAN/
fimo --o Islet12.ALL.totalPeak.TOP32K.noBlack.fimo $Tfmotif/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme Islet12.ALL.totalPeak.TOP32K.noBlack.named.hg19.fa &
fimo --o Islet12.ALL.totalPeak.TOP32K.noBlack.extra.fimo ~/Chip-seq/ATAC/scATAC/MotifLibrary/20191219_Extra6_meme  Islet12.ALL.totalPeak.TOP32K.noBlack.named.hg19.fa

fimo --o GCmatch.random $Tfmotif/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme GCmatch.random.named.hg19.fa &
fimo --o GCmatch.random.extra.fimo ~/Chip-seq/ATAC/scATAC/MotifLibrary/20191219_Extra6_meme GCmatch.random.named.hg19.fa

## Run motif saperately
ln -s /mnt/rstor/genetics/JinLab/ssz20/zshanshan/improve_image/parameter/epoch_test/GM12878_phasing/motif/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme.separate

mkdir test_individual.islet
for file in `ls HOCOMOCOv11_full_HUMAN_mono_meme_format.meme.separate/*`;do
        fimo --oc test_individual.islet $file Islet12.ALL.totalPeak.TOP32K.noBlack.named.hg19.fa
        cat test_individual.islet/fimo.txt | grep -v sequence >> Islet12.ALL.totalPeak.TOP32K.HOCOMOCOv11_full.individual.merge
done

"
TF.name.dic<-read.delim("human_mono_motifs.tsv")
TF.name.dic$GENE<-strsplit(as.character(TF.name.dic$Transcription.factor),":") %>% sapply(.,function(x){x[2]})

RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased.group2")
islet.all.motif<-rbind(read.table("Islet12.ALL.totalPeak.TOP32K.noBlack.fimo/fimo.txt"),read.table("Islet12.ALL.totalPeak.TOP32K.noBlack.extra.fimo/fimo.txt"))
islet.all.motif.sig<-subset(islet.all.motif,V7<1e-6)
islet.all.motif.sig$V1<-factor(islet.all.motif.sig$V1,levels=unique(islet.all.motif.sig$V1))

## Input the fimo scan individually
islet.all.motif<-read.table("Islet12.ALL.totalPeak.TOP32K.HOCOMOCOv11_full.individual.merge")
islet.all.motif.sig<-subset(islet.all.motif,V8<0.2)
islet.all.motif.sig$V1<-factor(islet.all.motif.sig$V1,levels=unique(islet.all.motif.sig$V1))


    ##region use all peaks as background
Cl<-c(paste("C",1:13,sep=""),paste("Un_C",1:13,sep=""))
Common.MotifResults.binom<-Motifenrich.binom(subset(islet.all.motif.sig,V2 %in% row.names(subset(RPKM.7CellTypes.LinBased,group=="Common"))),islet.all.motif.sig)
qs.binom<-matrix(Common.MotifResults.binom[,"qvalue"])
Folds.binom<-matrix(Common.MotifResults.binom[,"FC"])
row.names(qs.binom)<-Common.MotifResults.binom$Var1
row.names(Folds.binom)<-Common.MotifResults.binom$Var1
for (i in Cl){
df<-Motifenrich.binom(subset(islet.all.motif.sig,V2 %in% row.names(subset(RPKM.7CellTypes.LinBased,group==i))),islet.all.motif.sig)
Folds.binom<-cbind(Folds.binom,df[,"FC"])
qs.binom<-cbind(qs.binom,df[,"qvalue"])
}
colnames(Folds.binom)<-c("Common",Cl)
colnames(qs.binom)<-c("Common",Cl)
##endregion use all peaks as background

    ##region 2020-10-15 Exploration , pick candiate motif that show specificity with consistent expression
pdf("SpecPeakMotif.pdf",height=10)
for (Cl in paste("C",1:13,sep="")){
qs.binom.top<-qs.binom[qs.binom[,Cl]<0.05,]
qs.binom.top<-ExtremeOrder(qs.binom.top,orderby=Cl) %>% .[,2:14] %>% head(.,n=50)
p<-melt(as.matrix(qs.binom.top)) %>% ggplot()+aes(Var2,Var1,fill=-log10(value))+geom_tile(color="black")+scale_fill_gradient(low="white",high="red",limits=c(1,5),oob=scales::squish)+theme_bw()+ggtitle(Cl)
print(p)
}
dev.off()

pdf("SpecPeakMotif.absorder.pdf",height=10)
for (Cl in paste("C",1:13,sep="")){
qs.binom.top<-qs.binom[qs.binom[,Cl]<0.05,]
qs.binom.top<-qs.binom.top[order(qs.binom.top[,Cl]),] %>% .[,2:14] %>% head(.,n=50)
p<-melt(as.matrix(qs.binom.top)) %>% ggplot()+aes(Var2,Var1,fill=-log10(value))+geom_tile(color="black")+scale_fill_gradient(low="white",high="red",limits=c(1,5),oob=scales::squish)+theme_bw()+ggtitle(Cl)
print(p)
}
dev.off()

## motif VS expression
TF.name.dic<-read.delim("human_mono_motifs.tsv")
TF.name.dic$GENE<-strsplit(as.character(TF.name.dic$Transcription.factor),":") %>% sapply(.,function(x){x[2]})
row.names(TF.name.dic)<-TF.name.dic$Model
Aggregate.7celltype.RNA.rpkm<-readRDS("mydir/Aggregate.7celltype.RNA.rpkm")
Aggregate.7celltype.RNA.rpkm<-as.data.frame(Aggregate.7celltype.RNA.rpkm) %>% cbind(.,gene=row.names(.))

pdf("SpecPeakMotif.geneExpr.pdf",height=10,width=10)
for (Cl in paste("C",1:13,sep="")){
qs.binom.top<-qs.binom[qs.binom[,Cl]<0.05,]
qs.binom.top<-ExtremeOrder(qs.binom.top,orderby=Cl) %>% .[,2:14] %>% head(.,n=50)
TestGene<-TF.name.dic[row.names(qs.binom.top),"GENE"]
datatoplot<-Aggregate.7celltype.RNA.rpkm[TestGene,] %>% .[complete.cases(.),] %>% melt(.,id.vars=c("gene"))
ps<-list()
for(g in unique(datatoplot$gene)){
p<-subset(datatoplot,gene==g) %>% ggplot()+aes(variable,value,fill=variable)+geom_bar(stat="identity")+theme_bw()+ggtitle(g)+theme(axis.text=element_text(size=10),legend.position="none")
ps<-c(ps,list(p))
}
grid.arrange(grobs=ps,top=Cl)
}
dev.off()

pdf("SpecPeakMotif.geneExpr.absorder.pdf",height=10,width=10)
for (Cl in paste("C",1:13,sep="")){
qs.binom.top<-qs.binom[qs.binom[,Cl]<0.05,]
qs.binom.top<-qs.binom.top[order(qs.binom.top[,Cl]),] %>% .[,2:14] %>% head(.,n=50)
TestGene<-TF.name.dic[row.names(qs.binom.top),"GENE"]
datatoplot<-Aggregate.7celltype.RNA.rpkm[TestGene,] %>% .[complete.cases(.),] %>% melt(.,id.vars=c("gene"))
ps<-list()
for(g in unique(datatoplot$gene)){
p<-subset(datatoplot,gene==g) %>% ggplot()+aes(variable,value,fill=variable)+geom_bar(stat="identity")+theme_bw()+ggtitle(g)+theme(axis.text=element_text(size=10),legend.position="none")
ps<-c(ps,list(p))
}
grid.arrange(grobs=ps,top=Cl)
}
dev.off()
##endregion Exploration: pick candiate motif that show specificity with consistent expression

    ##region 2020-10-15 Generate final motif plot
    ##region function ExtremeOrder
    ExtremeOrder<-function(df,orderby="Common"){
    index<-which(colnames(df)==orderby)
    rest<-setdiff(1:ncol(df),index)
    Specificity<-apply(df,1,function(x){log10(x[index])-sum(log10(x[rest]))})
    Rest.strenth<-apply(df,1,function(x){sum(log10(x[rest]))})
    df<-cbind(df,Specificity.rela=Specificity,Rest.strenth=Rest.strenth)
    df<-as.data.frame(df) %>% .[order(.$Specificity.rela,.$Rest.strenth),]
    }
    ##endregion
    ##region function Motifenrich
    Motifenrich<-function(queryP.motif,controlP.motif){
    require(qvalue)
    query.peaks.motif.summary<-table(queryP.motif$V1) %>% as.data.frame %>% .[order(.$Freq,decreasing=T),]
    all.motif.sig.summary<-table(controlP.motif$V1) %>% as.data.frame %>% .[order(.$Freq,decreasing=T),]
    query.peaks.motif.summary<-merge(all.motif.sig.summary,query.peaks.motif.summary,by="Var1")
    query.peaks.motif.summary<-subset(query.peaks.motif.summary,Freq.x>0)
    query.peaks.motif.summary$Freq.x<-query.peaks.motif.summary$Freq.x+1
    query.peaks.motif.summary$Freq.y<-query.peaks.motif.summary$Freq.y+1
    query.peaks.motif.summary<- cbind(query.peaks.motif.summary,ratio=query.peaks.motif.summary[,"Freq.y"]/query.peaks.motif.summary[,"Freq.x"])
    pvalues<-c()
    pvalues.fish<-c()
    for(i in 1:nrow(query.peaks.motif.summary)){
       # print(i)
    fish.test<-fisher.test(matrix(c(query.peaks.motif.summary[i,3],
    sum(query.peaks.motif.summary$Freq.y)-query.peaks.motif.summary[i,3],
    query.peaks.motif.summary[i,2],
    sum(query.peaks.motif.summary$Freq.x)-query.peaks.motif.summary[i,2]),2,2),alternative="greater")
    pvalues.fish<-c(pvalues.fish,fish.test$p.value)
    }
    fulllist<-cbind(query.peaks.motif.summary,FC=query.peaks.motif.summary$ratio/(sum(query.peaks.motif.summary$Freq.y)/sum(query.peaks.motif.summary$Freq.x)),pvalues.fish=pvalues.fish)
    fulllist$qvalue.fish<-qvalue(fulllist$pvalues.fish)$qvalues
    return(fulllist)
    }
    ##endregion function Motifenrich
    ##region function Motifenrich.binom
    Motifenrich.binom<-function(queryP.motif,controlP.motif,alt="greater"){
    require(qvalue)
    query.peaks.motif.summary<-table(queryP.motif$V1) %>% as.data.frame %>% .[order(.$Freq,decreasing=T),]
    all.motif.sig.summary<-table(controlP.motif$V1) %>% as.data.frame %>% .[order(.$Freq,decreasing=T),]
    query.peaks.motif.summary<-merge(all.motif.sig.summary,query.peaks.motif.summary,by="Var1")
    query.peaks.motif.summary<-subset(query.peaks.motif.summary,Freq.x>0)
    query.peaks.motif.summary$Freq.x<-query.peaks.motif.summary$Freq.x+1
    query.peaks.motif.summary$Freq.y<-query.peaks.motif.summary$Freq.y+1
    query.peaks.motif.summary<- cbind(query.peaks.motif.summary,ratio=query.peaks.motif.summary[,"Freq.y"]/query.peaks.motif.summary[,"Freq.x"])
    pvalues<-c()
    for(i in 1:nrow(query.peaks.motif.summary)){
       # print(i)
    binom.md<-binom.test(query.peaks.motif.summary[i,3],sum(query.peaks.motif.summary[,3]),query.peaks.motif.summary[i,2]/sum(query.peaks.motif.summary[,2]),alternative=alt)
    pvalues<-c(pvalues,binom.md$p.value)
    }
    fulllist<-cbind(query.peaks.motif.summary,FC=query.peaks.motif.summary$ratio/(sum(query.peaks.motif.summary$Freq.y)/sum(query.peaks.motif.summary$Freq.x)),pvalues=pvalues)
    fulllist$qvalue<-qvalue(fulllist$pvalues)$qvalues
    return(fulllist)
    }
    ##endregion function Motifenrich.binom
##Note: From exploration, picked motifs are curated in    /New_google-drive/Myjob/single_atac/Figures/Fig2. SpecificPeaks/Motif.enrich analysis.xlsx  "FinalMotiftoplot" : stored into finalmotifList
FinalMotif.present<-read.table("finalmotifList")
show<-as.character(FinalMotif.present[,1])
qs.binom.top<-qs.binom[show,2:14]
qs.binom.top.m<-melt(as.matrix(qs.binom.top))
qs.binom.top.m$Var1<-factor(qs.binom.top.m$Var1,levels=rev(levels(qs.binom.top.m$Var1)))
qs.binom.top.m$value[which(qs.binom.top.m$value>0.05)]<-1
pdf("FinalMotif.present.pdf",height=10)
ggplot(qs.binom.top.m)+aes(Var2,Var1,fill=-log10(value))+geom_tile(color="black")+scale_fill_gradient(low="white",high="purple",limits=c(0,5),oob=scales::squish)+theme_bw()+ggtitle(Cl)
dev.off()
##plot expression
TestGene<-TF.name.dic[row.names(qs.binom.top),"GENE"]
TestGene<-c(TestGene[1:2],"RFX6",TestGene[3:5],"ASCL2",TestGene[6:43])
TestGene[12]<-"ISL1"
Test.ori.m<-Aggregate.7celltype.RNA.rpkm[TestGene,]  %>% melt(.,id.vars=c("gene"))
Test.scale<-Aggregate.7celltype.RNA.rpkm[TestGene,1:7] %>% apply(.,1,scale) %>% t
colnames(Test.scale)<-colnames(Aggregate.7celltype.RNA.rpkm)[1:7]
TestGene.toplot<-cbind(Test.ori.m,zscore=melt(Test.scale)$value)
TestGene.toplot$gene<-factor(TestGene.toplot$gene,levels=rev(TestGene))
pdf("FinalMotif.present.Expr.pdf",height=6,width=4.2)
ggplot(TestGene.toplot)+aes(variable,gene,fill=zscore,size=log10(value+1))+geom_point(pch=21)+scale_fill_gradient2(low="steelblue",mid="white",high="red")+theme_classic()
dev.off()
## Draw motif logos
 library(universalmotif)
 library(ggseqlogo)
Hocomoco<-read_meme("~/google/mysoftware/MEME/meme_4.12.0/Database/motif_databases/HUMAN/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme")
motifs<-list()
for (drawM in Hocomoco[match(show,sapply(Hocomoco,function(x){x@name}))]){
motif<-drawM@name
p<-ggseqlogo(drawM@motif)+theme_void()
motifs<-c(motifs,list(p))
}
pdf("motiflogos.pdf",width=2.5,height=24)
grid.arrange(grobs=motifs,ncol=1)
dev.off()
  ##endregion 2020-10-15 Generate final motif plot

  ##endregion run fimo for all Islet12.ALL.totalPeak.TOP32K peaks and GC-matched random control

    ##region supervised motif analysis for celltype specific TFs
library(EZsinglecell)
duct.marker<-readRDS("duct.marker")
acinar.marker<-readRDS("acinar.marker")
psc.marker<-readRDS("psc.marker")
data(all.Beta.maker)
data(allAlpha.marker)
data(delta.markers)
data(pp.markers)
data(TFvector)

all.Beta.tf<-all.Beta.maker[row.names(all.Beta.maker) %in% TFvector,] %>% row.names %>% head(.,n=10)
all.Alpha.tf<-allAlpha.marker[row.names(allAlpha.marker) %in% TFvector,] %>% row.names %>% head(.,n=10)
delta.tf<-delta.markers[row.names(delta.markers) %in% TFvector,] %>% row.names %>% head(.,n=10)
pp.tf<-pp.markers[row.names(pp.markers) %in% TFvector,] %>% row.names %>% head(.,n=10)
acinar.tf<-c("MECOM","GATA4","PTF1A","CBFA2T3","BATF2")
duct.tf<-duct.marker[row.names(duct.marker) %in% TFvector,] %>% row.names %>% head(.,n=10)
psc.tf<-psc.marker[row.names(psc.marker) %in% TFvector,] %>% row.names %>% head(.,n=10)
delta.tf<- delta.tf[-c(7,10)]
pp.tf<-pp.tf[-c(8,9)]
TestGene<-c(all.Beta.tf,delta.tf,all.Alpha.tf,pp.tf,duct.tf,acinar.tf,psc.tf) %>% unique

Test.ori.m<-Aggregate.7celltype.RNA.rpkm[TestGene,]  %>% melt(.,id.vars=c("gene"))
Test.scale<-Aggregate.7celltype.RNA.rpkm[TestGene,1:7] %>% apply(.,1,scale) %>% t
colnames(Test.scale)<-colnames(Aggregate.7celltype.RNA.rpkm)[1:7]
TestGene.toplot<-cbind(Test.ori.m,zscore=melt(Test.scale)$value)
TestGene.toplot$gene<-factor(TestGene.toplot$gene,levels=rev(TestGene))
ggplot(TestGene.toplot)+aes(variable,gene,fill=zscore,size=log10(value+1))+geom_point(pch=21)+scale_fill_gradient2(low="steelblue",mid="white",high="red")+theme_classic()

# TestGene<-TF.name.dic[row.names(qs.binom.top),"GENE"]
show<-subset(TF.name.dic,GENE %in% TestGene)
show$GENE<-factor(show$GENE,levels=TestGene)
show<-row.names(show[order(show$GENE),])
show[10]<-"HHEX_UN0309.1"

qs.binom.top<-qs.binom[show[show %in% row.names(qs.binom)],2:14]
qs.binom.top.m<-melt(as.matrix(qs.binom.top))
qs.binom.top.m$Var1<-factor(qs.binom.top.m$Var1,levels=rev(levels(qs.binom.top.m$Var1)))
qs.binom.top.m$value[which(qs.binom.top.m$value>0.05)]<-1
qs.binom.top.m$Var1<-factor(qs.binom.top.m$Var1,levels=rev(show))
# pdf("FinalMotif.present.pdf",height=10)
ggplot(qs.binom.top.m)+aes(Var2,Var1,fill=-log10(value))+geom_tile(color="black")+scale_fill_gradient(low="white",high="purple",limits=c(0,5),oob=scales::squish)+theme_bw()+ggtitle(Cl)
# dev.off()

  ##endregion Specific peaks VS DNA binding motif
  ##endregion Specific peaks VS DNA binding motif

    ##region Specific peaks VS GWAS
  "
  cd /Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/PRSList
  cp ~/Chip-seq/ATAC/scATAC/scATAC19.10.19/Combined10islet/CelltypeSpec/DoGWASenrichment.V2.R ./
  cp ~/Chip-seq/ATAC/scATAC/scATAC19.10.19/Combined10islet/CelltypeSpec/DoGWASenrichment.V2.sh ./

  "
  ##endregion

  ##endregion Specific peaks VS RNA expression


##endregion Cell type Peak Study


##region Beta cell CArePACT

  ##region Step 1 generate single cell cell~Peak Matrix
  "
less Beta.SVM.KNN.filteredFinal_peaks.narrowPeak | awk '{print $1,$2,$3,$1"_"$2"_"$3}' OFS="\t" > Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed
bedtools intersect -a Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed -b wgEncodeHg19ConsensusSignalArtifactRegions.bed -v -wa > Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.bed
##Generate DAC
less ../source | ../GenerateDAC.pl Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.bed  Beta.SVM.KNN.filteredFinal.noblack
  "
# SVM.KNN.filtered<-readRDS("mydir/SVM.KNN.filtered")
p1<-readRDS("mydir/p1.svm") ## Unfiltered cell types
SVM.KNN.filtered.final<-readRDS("mydir/SVM.KNN.filtered.final")
Islet.scATAC.metadata<-read.table("~/Chip-seq/ATAC/scATAC/IsletscATAC/QC/Islet.scATAC.metadata")
row.names(Islet.scATAC.metadata)<-Islet.scATAC.metadata$Name
Islet.scATAC.metadata<-Islet.scATAC.metadata[,c("Fragments","PeakRatio","donor"),drop=F]
Beta.all.metadata<-Islet.scATAC.metadata[names(p1)[which(p1=="Beta")],]
Beta.filtered.metadata<-Islet.scATAC.metadata[row.names(subset(SVM.KNN.filtered.final,p1=="Beta")),]
# saveRDS(Beta.all.metadata,"mydir/Beta.all.metadata")
# saveRDS(Beta.filtered.metadata,"mydir/Beta.filtered.metadata")
Beta.all.metadata<-readRDS("mydir/Beta.all.metadata")
Beta.filtered.metadata<-readRDS("mydir/Beta.filtered.metadata")
library(Matrix.utils)
Beta.SVM.KNN.filteredFinal.noblack<-read.table("Islet.scATAC.dac.Beta.SVM.KNN.filteredFinal.noblack")
names(Beta.SVM.KNN.filteredFinal.noblack)<-c("Cell","Peak","Cts")
Beta.SVM.KNN.filteredFinal.noblack$Cts[which(Beta.SVM.KNN.filteredFinal.noblack$Cts>1)]<-1
Beta.SVM.KNN.filteredFinal.noblack.Mtx<-dMcast(Beta.SVM.KNN.filteredFinal.noblack,Peak~Cell)
colnames(Beta.SVM.KNN.filteredFinal.noblack.Mtx)<-gsub("Cell","",colnames(Beta.SVM.KNN.filteredFinal.noblack.Mtx))
ALL.Beta.ATAC.Mtx<-Beta.SVM.KNN.filteredFinal.noblack.Mtx[,row.names(Beta.all.metadata)]
Filtered.Beta.ATAC.Mtx<-Beta.SVM.KNN.filteredFinal.noblack.Mtx[,row.names(Beta.filtered.metadata)]

# saveRDS(ALL.Beta.ATAC.Mtx,"mydir/ALL.Beta.ATAC.Mtx")
# saveRDS(Filtered.Beta.ATAC.Mtx,"mydir/Filtered.Beta.ATAC.Mtx")
ALL.Beta.ATAC.Mtx<-readRDS("mydir/ALL.Beta.ATAC.Mtx")
Filtered.Beta.ATAC.Mtx<-readRDS("mydir/Filtered.Beta.ATAC.Mtx")
  ##endregion generate single cell cell~Peak Matrix

  ##region Step 2 Compute LSI
  Beta.all.metadata<-readRDS("mydir/Beta.all.metadata")
  Beta.filtered.metadata<-readRDS("mydir/Beta.filtered.metadata")
  ALL.Beta.ATAC.Mtx<-readRDS("mydir/ALL.Beta.ATAC.Mtx")
  Filtered.Beta.ATAC.Mtx<-readRDS("mydir/Filtered.Beta.ATAC.Mtx")
  beta.atac <- CreateSeuratObject(counts = ALL.Beta.ATAC.Mtx, assay = "ATAC", project = "beta.atac")
  beta.atac@meta.data<-Tomerge_v2(beta.atac@meta.data,Beta.all.metadata)
  DefaultAssay(beta.atac) <- "ATAC"
  VariableFeatures(beta.atac) <- names(which(Matrix::rowSums(beta.atac) > 100))
  beta.atac <- RunLSI(beta.atac, n = 50, scale.max = NULL)
  beta.atac <- RunUMAP(beta.atac, reduction = "lsi", dims = 1:50)
  ##endregion Step 2 Compute LSI

  ##region Step 3 Build caRePACT model (with Cell number balancing)
  names(beta.atac.LSI.withinfo)[51]<-"donor"
  beta.atac.LSI.withinfo<-beta.atac@reductions$lsi@cell.embeddings %>% Tomerge_v2(.,beta.atac@meta.data)
  beta.atac.LSI.withinfo$disease<-gsub("[0-9]$","",beta.atac.LSI.withinfo$donor)
  beta.atac.LSI.withinfo$donor<-mapvalues(beta.atac.LSI.withinfo$donor,from=c("HT1","HT2","HT3","HT4","HT5","HT6","HT7","HT8","T2D1","T2D3","T2D4","T2D5"),to=c("HT1",NA,"HT2","HT3","HT4","HT5","HT6","HT7","T2D1","T2D2","T2D3","T2D4"))
  beta.atac.LSI.withinfo<-beta.atac.LSI.withinfo[!is.na(beta.atac.LSI.withinfo$donor),]
  ## boxplot exploration, LSI_3,6,8 are the best
  ggplot(melt(beta.atac.LSI.withinfo[,c(1:20,57)]))+aes(variable,value,fill=disease)+geom_boxplot(outlier.shape=NA)+theme_classic()+scale_fill_manual(values=c("dodgerblue","firebrick1"))+theme(axis.title=element_blank(),axis.text.x=element_text(angle=45,vjust=0.75))
  ## 2d plot 3,6,8
  ggplot(beta.atac.LSI.withinfo)+aes(LSI_3,LSI_8,color=disease)+geom_point(size=1.5)+theme_classic()+scale_color_manual(values=c("grey","red"))+theme(axis.text=element_text(size=24,color="black"),axis.title=element_text(size=24,color="black"))+ guides(colour = guide_legend(override.aes = list(size=15)))
  adjustrange = seq(0, 180, length.out = 13)
  library(plot3D)
  pdf("CARePACTplot3D.pdf")
  scatter3D(beta.atac.LSI.withinfo[,"LSI_3"], beta.atac.LSI.withinfo[,"LSI_6"],beta.atac.LSI.withinfo[,"LSI_8"],ticktype = "detailed", pch = 20, theta = 90, phi = 30, colvar = ifelse(beta.atac.LSI.withinfo[,"disease"]=="T2D",1,0), bty = "b2", cex = 0.3, col = alpha.col(col = c("steelblue", "red"), 0.6))
  dev.off()

  ## Balancing the cell numbers and calculate pseudoindex
  beta.atac.LSI.withinfo.subs<-list()
  for(i in 1:100){
  beta.atac.LSI.withinfo.sub<-c()
  for (d in levels(beta.atac.LSI.withinfo$donor)){
    tmp<-subset(beta.atac.LSI.withinfo,donor==d)
    if(nrow(tmp)<=500){
      beta.atac.LSI.withinfo.sub<-rbind(beta.atac.LSI.withinfo.sub,tmp)
    }else{
      beta.atac.LSI.withinfo.sub<-rbind(beta.atac.LSI.withinfo.sub,tmp[sample(1:nrow(tmp),500),])
    }
  }
  beta.atac.LSI.withinfo.subs<-c(beta.atac.LSI.withinfo.subs,list(beta.atac.LSI.withinfo.sub))
  }
  pseudo.indexes<-list()
  for(i in 1:100){
  md<-GetRePACTmodel.cca(ccaWithinfo=beta.atac.LSI.withinfo.subs[[i]],prefix="LSI",pheno="disease",CCrange=c(1:10))
  trainingdata<-beta.atac.LSI.withinfo.subs[[i]]
  Restdata<-beta.atac.LSI.withinfo[setdiff(row.names(beta.atac.LSI.withinfo),row.names(beta.atac.LSI.withinfo.subs[[i]])),]
  Alldata<-beta.atac.LSI.withinfo
  beta.atac.LSI.withinfo.subs[[i]]$pseudo.index<-apply(trainingdata[,1:10],1,function(x){md$coefficients[[1]]+sum(x*md$coefficients[2:11])})
  Restdata$pseudo.index<-apply(Restdata[,1:10],1,function(x){md$coefficients[[1]]+sum(x*md$coefficients[2:11])})
  pseudo.indexes<-c(pseudo.indexes,list(apply(Alldata[,1:10],1,function(x){md$coefficients[[1]]+sum(x*md$coefficients[2:11])})))
  }
  ##region check how consistent, random 500 cell banlancing is(no worries, pretty consistent)
  ps<-list()
  for(i in 1:10){
  datatoplot<-cbind(beta.atac.LSI.withinfo[,c("donor","disease")],pseudo.index=pseudo.indexes[[i]])
  p<-ggplot(datatoplot)+aes(donor,pseudo.index,fill=disease)+geom_violin()+geom_boxplot(width=0.2,outlier.shape = NA,notch=F,coef = 0,fill="grey25",color="grey75")+coord_flip()+theme_classic()+scale_fill_manual(values=c("steelblue", "red"))+theme_bw()+theme(legend.position="none")
  ps<-c(ps,list(p))
  }
  ##endregion check how consistent, random 500 cell banlancing is(very consistent)
  md.all<-GetRePACTmodel.cca(ccaWithinfo=beta.atac.LSI.withinfo,prefix="LSI",pheno="disease",CCrange=c(1:10))
  beta.atac.LSI.withinfo$pseudo.index = md.all$linear.predictors
  beta.atac.LSI.withinfo$pseudo.index.balanced<-do.call(cbind,pseudo.indexes) %>% rowMeans()
  ## Plot violin pseudoindex
  p1<-ggplot(beta.atac.LSI.withinfo)+aes(donor,pseudo.index.balanced,fill=disease)+geom_violin()+geom_boxplot(width=0.2,outlier.shape = NA,notch=F,coef = 0,fill="grey25",color="grey75")+coord_flip()+theme_classic()+scale_fill_manual(values=c("steelblue", "red"))+theme_bw()+theme(legend.position="none")
  p2<-ggplot(beta.atac.LSI.withinfo)+aes(pseudo.index.balanced,fill=disease)+geom_density(alpha=0.75)+scale_fill_manual(values=c("steelblue","red"))+theme_classic()+theme(legend.position="none")
  pdf("CARePACT.violin.pdf",height=5)
  print(p1)
  print(p2)
  dev.off()

  ##endregion Step4 Build RePACT model

  ##region Step 4 Call diff peaks
  Beta.all.metadata<-readRDS("mydir/Beta.all.metadata")
  ALL.Beta.ATAC.Mtx<-readRDS("mydir/ALL.Beta.ATAC.Mtx")
  beta.atac.LSI.withinfo$rank<-rank(beta.atac.LSI.withinfo$pseudo.index.balanced)
  saveRDS(beta.atac.LSI.withinfo,"mydir/beta.atac.LSI.withinfo")
  beta.atac.LSI.withinfo<-readRDS("mydir/beta.atac.LSI.withinfo")
  ##region Test Bin number
  betT2D.diffPeaks<-list()
  for(BinN in c(10,20,30,40)){
    beta.ATAC.LSI.bin.ob<-MakeEvenBinBydepth(cellvsPeak.m=t(ALL.Beta.ATAC.Mtx),data.info=beta.atac.LSI.withinfo,binnumber=BinN)
    betaT2D.diffPeaks.bin.LSI<-CallT2Dpeak_qvalue(beta.ATAC.LSI.bin.ob$cellvsPeak.m.aggr,beta.ATAC.LSI.bin.ob$depths,beta.ATAC.LSI.bin.ob$index,qcut=0.01,slopecut1=0.5,slopecut2=-0.5,doscale=T)
    betT2D.diffPeaks<-c(betT2D.diffPeaks,list(betaT2D.diffPeaks.bin.LSI))
  }
  library(VennDiagram)

  bin10.p.up<-row.names(betT2D.diffPeaks[[1]]$UP)
  bin20.p.up<-row.names(betT2D.diffPeaks[[2]]$UP)
  bin30.p.up<-row.names(betT2D.diffPeaks[[3]]$UP)
  bin40.p.up<-row.names(betT2D.diffPeaks[[4]]$UP)

  bin10.p.dn<-row.names(betT2D.diffPeaks[[1]]$DN)
  bin20.p.dn<-row.names(betT2D.diffPeaks[[2]]$DN)
  bin30.p.dn<-row.names(betT2D.diffPeaks[[3]]$DN)
  bin40.p.dn<-row.names(betT2D.diffPeaks[[4]]$DN)
  venn.diagram(x=list(bin10=bin10.p.dn,bin20=bin20.p.dn[1:1000],bin30=bin30.p.dn,bin40=bin40.p.dn),filename="Beta.T2D.Peaktraj.DN.bins.tiff",category.names=c("bin10","bin20","bin30","bin40"),cat.col=c("skyblue","gold","red","green"),fill=c("skyblue","gold","red","green"),cex=4)
  venn.diagram(x=list(bin10=bin10.p.up,bin20=bin20.p.up,bin30=bin30.p.up,bin40=bin40.p.up),filename="Beta.T2D.Peaktraj.UP.bins.tiff",category.names=c("bin10","bin20","bin30","bin40"),cat.col=c("skyblue","gold","red","green"),fill=c("skyblue","gold","red","green"),cex=4)

  Beta.T2D.UP.Peaks.Overlapped<-intersect(bin10.p.up,bin20.p.up) %>% intersect(.,bin30.p.up) %>% intersect(.,bin40.p.up)
  Beta.T2D.DN.Peaks.Overlapped<-intersect(bin10.p.dn,bin20.p.dn) %>% intersect(.,bin30.p.dn) %>% intersect(.,bin40.p.dn)
  ##endregion Test Bin number
  beta.ATAC.LSI.20bin.ob<-MakeEvenBinBydepth(cellvsPeak.m=t(ALL.Beta.ATAC.Mtx),data.info=beta.atac.LSI.withinfo,binnumber=20)
  betaT2D.diffPeaks.20bin.LSI<-CallT2Dpeak_qvalue(beta.ATAC.LSI.20bin.ob$cellvsPeak.m.aggr,beta.ATAC.LSI.20bin.ob$depths,beta.ATAC.LSI.20bin.ob$index,qcut=0.01,slopecut1=0.5,slopecut2=-0.5,doscale=T)
  #Donor contribution plot 10/20/30/40 bins
   Evenbin.donorContribute<-beta.atac.LSI.20bin.ob$data.info.withbin %>% .[,c("donor","evenfragbin")] %>% table %>% as.matrix %>% apply(.,1,function(x){x/sum(x)}) %>% melt
   Evenbin.donorContribute<-cbind(Evenbin.donorContribute,disease=ifelse(grepl("T2D",Evenbin.donorContribute$donor),"T2D","ND"))
   ggplot(Evenbin.donorContribute)+aes(donor,value,fill=disease)+geom_bar(stat="identity",color="black")+facet_grid(~evenfragbin)+theme(axis.text=element_blank(),axis.ticks=element_blank())+scale_fill_manual(values=c("steelblue","red"))+theme_bw()
   ## Draw T2D diff peaks using simple heatmap
  library(qvalue)
  p1<-apply(betaT2D.diffpeak.40bin.LSI$UPDN.toplot,2,function(x){scale(x)}) %>% melt() %>% ggplot()+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red")+theme_classic()+theme(axis.text=element_blank())+ggtitle("LSI-20bins")+labs(x="T2D trajectory")
  # saveRDS(betaT2D.diffPeaks.20bin.LSI,"mydir/betaT2D.diffpeak.20bin.LSI.rds")
  betaT2D.diffPeaks.20bin.LSI<-readRDS("mydir/betaT2D.diffpeak.20bin.LSI.rds")  #This is the final version
  # betaT2D.diffpeak.20bin.LSI.old<-readRDS("mydir/betaT2D.diffpeak.20bin.LSI.rds")
  ## Overlap between old and new
  # library(VennDiagram)
  #  venn.diagram(x=list(Old.DN=row.names(betaT2D.diffpeak.20bin.LSI.old$DN),Old.UP=row.names(betaT2D.diffpeak.20bin.LSI.old$UP),New.DN=row.names(betaT2D.diffpeak.20bin.LSI$DN),New.UP=row.names(betaT2D.diffpeak.20bin.LSI$UP)),filename="Beta.T2D.traj.oldVSnew.tiff",category.names=c("Old.DN","Old.UP","New.DN","New.UP"),cat.col=c("skyblue","gold","red","green"),fill=c("skyblue","gold","red","green"),cex=4)
  ##endregion Call diff peaks

  ##region Call diff peaks on bulk level using DEseq
  Beta.all.metadata<-readRDS("mydir/Beta.all.metadata")
  ALL.Beta.ATAC.Mtx<-readRDS("mydir/ALL.Beta.ATAC.Mtx")
  Donors<-levels(Beta.all.metadata$donor)[c(1,3:12)]
  ALL.Beta.ATAC.bulk<-data.frame(HT1=rowSums(ALL.Beta.ATAC.Mtx[,row.names(subset(Beta.all.metadata,donor==Donors[1]))]))
  for(i in 2:length(Donors)){
    ALL.Beta.ATAC.bulk<-cbind(ALL.Beta.ATAC.bulk,rowSums(ALL.Beta.ATAC.Mtx[,row.names(subset(Beta.all.metadata,donor==Donors[i]))]))
  }
  names(ALL.Beta.ATAC.bulk)<-c(paste("HT",1:7,sep=""),paste("T2D",1:4,sep=""))
  Bulk.meta<-data.frame(row.names=names(ALL.Beta.ATAC.bulk),condition=c(rep("HT",7),rep("T2D",4)))
  library("DESeq2")
  dds <- DESeqDataSetFromMatrix(countData = ALL.Beta.ATAC.bulk,
                                colData = Bulk.meta,
                                design = ~ condition)
  dds <- DESeq(dds)
  res<-results(dds)
  summary(res)
  betaT2D.diffPeaks.repact.bulk<- Tomerge_v2(betaT2D.diffPeaks.20bin.LSI$pseudoregress.all[,c("slope","qvalue")],as.data.frame(results(dds))[,c("log2FoldChange","pvalue","padj")])
  caRePACTpeaks<-c()
  caRePACTpeaks[which(row.names(betaT2D.diffPeaks.repact.bulk) %in% row.names(betaT2D.diffPeaks.20bin.LSI$UP))]<-"UP"
  caRePACTpeaks[which(row.names(betaT2D.diffPeaks.repact.bulk) %in% row.names(betaT2D.diffPeaks.20bin.LSI$DN))]<-"DN"
  caRePACTpeaks[which(!row.names(betaT2D.diffPeaks.repact.bulk) %in% c(row.names(betaT2D.diffPeaks.20bin.LSI$UP),row.names(betaT2D.diffPeaks.20bin.LSI$DN)))]<-""
  betaT2D.diffPeaks.repact.bulk$caRePACTpeaks<-caRePACTpeaks
  deseq0.01<-c()
  deseq0.01[which(betaT2D.diffPeaks.repact.bulk$pvalue<0.01 &betaT2D.diffPeaks.repact.bulk$log2FoldChange>0)]<-"bulk.up"
  deseq0.01[which(betaT2D.diffPeaks.repact.bulk$pvalue<0.01 &betaT2D.diffPeaks.repact.bulk$log2FoldChange<0)]<-"bulk.dn"
  deseq0.01[which(betaT2D.diffPeaks.repact.bulk$pvalue>0.01)]<-""
  deseq0.05<-c()
  deseq0.05[which(betaT2D.diffPeaks.repact.bulk$pvalue<0.05 &betaT2D.diffPeaks.repact.bulk$log2FoldChange>0)]<-"bulk.up"
  deseq0.05[which(betaT2D.diffPeaks.repact.bulk$pvalue<0.05 &betaT2D.diffPeaks.repact.bulk$log2FoldChange<0)]<-"bulk.dn"
  deseq0.05[which(betaT2D.diffPeaks.repact.bulk$pvalue>0.05)]<-""
  betaT2D.diffPeaks.repact.bulk$deseq0.01<-deseq0.01
  betaT2D.diffPeaks.repact.bulk$deseq0.05<-deseq0.05
  # saveRDS(betaT2D.diffPeaks.repact.bulk,"mydir/betaT2D.diffPeaks.repact.bulk")
  betaT2D.diffPeaks.repact.bulk<-readRDS("mydir/betaT2D.diffPeaks.repact.bulk")

  ##endregion Call diff peaks on bulk level using DEseq

  ##region  Visulization of diff peaks (Chipseq signal intensity heatmap)

    ##region Generate bin1-bin10 monoclonal beds
  beta.ATAC.LSI.bin10.ob<-MakeEvenBinBydepth(cellvsPeak.m=t(ALL.Beta.ATAC.Mtx),data.info=beta.atac.LSI.withinfo,binnumber=10)
  beta.ATAC.LSI.bin10.dic<-beta.ATAC.LSI.bin10.ob$data.info.withbin[,c("evenfragbin"),drop=F]
  beta.ATAC.LSI.bin10.dic$evenfragbin<-paste("BetaT2D_",beta.ATAC.LSI.bin10.dic$evenfragbin,sep="")
  write.table(beta.ATAC.LSI.bin10.dic,"beta.ATAC.LSI.bin10.dic",col.names=F,row.names=T,quote=F,sep="\t")

    ##endregion Generate bin1-bin10 monoclonal beds

    ##region Generate summit windows to get WindowSumits.LR and WindowSumits.expandedALL
    setwd("~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track")
    Beta.SVM.KNN.filteredFinal_peaks<-read.table("Beta.SVM.KNN.filteredFinal_peaks.xls",head=T)
    chrom.sizes<-read.table("~/Genome/hg19/hg19.chrom.sizes",row.names=1) # Checked
    WindowSumits<-data.frame(row.names=with(Beta.SVM.KNN.filteredFinal_peaks,paste(chr,start-1,end,sep="_")),chr=Beta.SVM.KNN.filteredFinal_peaks$chr,abs_summit=Beta.SVM.KNN.filteredFinal_peaks$abs_summit)
    WindowSumits.LR<-data.frame(row.names=row.names(WindowSumits),chr=WindowSumits$chr,L=WindowSumits$abs_summit-1500,R=WindowSumits$abs_summit+1500,Window=paste("Window",1:nrow(WindowSumits),sep="_"))
    WindowSumits.LR<-subset(WindowSumits.LR, L>0)
    # saveRDS(WindowSumits.LR,"mydir/Beta.WindowSumits.LR")
    WindowSumits.LR<-readRDS("mydir/Beta.WindowSumits.LR")
    # WindowSumits.LR$limit<-chrom.sizes[as.character(WindowSumits.LR$chr),]  # Checked, no problem
      ##region function Expand
    Expand<-function(x,Bins=100,window=3000){
    stepsize<-window/Bins
    df<- data.frame(Chr=x[1],Start=c(x[2],seq(x[2],x[3],stepsize)[2:(Bins)]+1),end=c(seq(x[2],x[3],stepsize)[2:(Bins)],x[3]),Bin=1:Bins,Window=x[4])
    return(df)
    }
    ##endregion function Expand
    WindowSumits.expandedALL.lst<-apply(WindowSumits.LR,1,Expand)
    library(data.table)
    WindowSumits.expandedALL<-rbindlist(WindowSumits.expandedALL.lst)
    WindowSumits.expandedALL<-as.data.frame(WindowSumits.expandedALL)
    WindowSumits.expandedALL$Start<-as.numeric(as.character(WindowSumits.expandedALL$Start))
    WindowSumits.expandedALL$end<-as.numeric(as.character(WindowSumits.expandedALL$end))
    ##endregion Generate summit windows  to get WindowSumits.LR and WindowSumits.expandedALL

    ##region Count reads from monoclonal files
    write.table(WindowSumits.expandedALL,"BetaPeaks.WindowSumits.expandedAL.tb",quote=F,sep="\t",row.names=F,col.names=F)
    "
    rm -rf Number
    for file in `ls | ls | grep betaLSI.bin`
    do
    echo $file
    name=${file/.betaLSI.bin/}
    bedtools intersect -a BetaPeaks.WindowSumits.expandedAL.tb -b  $file -c > $name.WindowMonoclonal.LR.expanded
    Depth=`wc -l ./$file | cut -f1 -d' '`
    echo -e "$name\t$Depth" >>Number
    done
    "
    ##endregion Count reads from monoclonal files

    ##region Step4 Read data for ploting

    Numbers<-read.table("Number")
    Bins.lst<-list()
    for(bin in paste("BetaT2D_",1:10,".bed",sep="")){
      file<-paste(bin,".WindowMonoclonal.LR.expanded",sep="")
      tmp<-read.table(file)
      tmp$RPKM<-1e6*tmp$V6/Numbers[Numbers$V1==bin,2]
      Bins.lst<-c(Bins.lst,list(tmp))
    }
    names(Bins.lst)<-paste("BetaT2D",1:10,sep="_")
    WindowSumits.LR<-readRDS("mydir/Beta.WindowSumits.LR")
    betaT2D.diffpeak.40bin.LSI<-readRDS("mydir/betaT2D.diffpeak.40bin.LSI.rds")

  ##endregion

  ##endregion

  ##region output featured peaks
  RPKM.7CellTypes.LinBased<-readRDS("mydir/RPKM.7CellTypes.LinBased")
  betaT2D.diffpeak.40bin.LSI<-readRDS("mydir/betaT2D.diffpeak.40bin.LSI.rds")

  MakePeakBed<-function(names){
  bed<-strsplit(names,"_") %>% .[sapply(.,function(x){length(x)})==3] %>% do.call(rbind,.) %>% as.data.frame
  return(bed)
  }
betaT2D.diffpeak.UP.all<-MakePeakBed(row.names(betaT2D.diffpeak.40bin.LSI$UP))
betaT2D.diffpeak.DN.all<-MakePeakBed(row.names(betaT2D.diffpeak.40bin.LSI$DN))
Lin.Peakgroup.lst<-list()
for(g in levels(RPKM.7CellTypes.LinBased$group)){
  group<-row.names(subset(RPKM.7CellTypes.LinBased,group==g))
  groupbed<-MakePeakBed(group)
  Lin.Peakgroup.lst<-c(Lin.Peakgroup.lst,list(groupbed))
}
names(Lin.Peakgroup.lst)<-levels(RPKM.7CellTypes.LinBased$group)

  ##endregion

  ##region Step 6 Make track for even bins
  beta.atac.LSI.10bin.dic<-beta.atac.LSI.10bin.ob$data.info.withbin[,"evenfragbin",drop=F]
  beta.atac.LSI.10bin.dic$evenfragbin<-paste("T2DLSI",beta.atac.LSI.10bin.dic$evenfragbin,sep="_")
  write.table(as.data.frame(beta.atac.LSI.10bin.dic),"beta.atac.LSI.10bin.dic.v1.tab",quote=F,sep="\t",row.names=T,col.names=F)
  "
  ~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step1.pl beta.atac.LSI.10bin.dic.v1.tab  beta.atac.LSI.10bin.dic.v1

  ~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step2.sh `ls | grep beta.atac.LSI.10bin.dic.v1.bed | xargs`
  "
  BetacellvsPeak.m.filtered.downsample.pair$info
  row.names(beta.atac.LSI.10bin.dic)[grep("918CW1|p18CW2|CW1|CW2",row.names(beta.atac.LSI.10bin.dic))]
  ##endregion

  ##region Make track for each donor (Beta cell)
  beta.atac.LSI.donor.dic<-beta.atac.LSI.10bin.ob$data.info.withbin[,"donor",drop=F] %>% .[order(.$donor),,drop=F]
  write.table(as.data.frame(beta.atac.LSI.donor.dic),"beta.atac.LSI.donor.dic.tab",quote=F,sep="\t",row.names=T,col.names=F)
"
  ~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step1.pl beta.atac.LSI.donor.dic.tab  beta.atac.LSI.donor

  ~/Chip-seq/ATAC/scATAC/IsletscATAC/MakeTrack.Step2.sh `ls | grep beta.atac.LSI.donor.bed | xargs`
  "

  ##endregion Make track for each donor (Beta cell)

  ##region Step 7 Run RNA rePACT (with cell number balancing)
    ## Recluster beta cells
    Islet12.Endo.scRNA.seurat3.filtered<-readRDS("mydir/Islet12.Endo.scRNA.seurat3.filtered")
    Islet12.Beta.meta<-Islet12.Endo.scRNA.seurat3.filtered@meta.data %>% subset(.,Cell_type=="Beta") %>% .[,c("nCount_RNA","nFeature_RNA","Donor","Cell_type","DonorName")]
    Islet12.Beta.scRNA.seurat3<-docluster(Islet12.Endo.scRNA.seurat3.filtered@assays$RNA@counts[,row.names(Islet12.Beta.meta)],meta=Islet12.Beta.meta[,c("Donor","DonorName")],reso=0.6,nGene=2000,mincell=3,minfeature=200)
    # saveRDS(Islet12.Beta.scRNA.seurat3,"mydir/Islet12.Beta.scRNA.seurat3")
    Islet12.Beta.scRNA.seurat3<-readRDS("mydir/Islet12.Beta.scRNA.seurat3")
    BetaPCA<-Islet12.Beta.scRNA.seurat3@reductions$pca@cell.embeddings %>% Tomerge_v2(.,Islet12.Beta.scRNA.seurat3@meta.data)
    BetaPCA$Disease<-gsub("[0-9]$","",toplot$DonorName)
    BetaPCA<-subset(BetaPCA,DonorName!="T2D2")
    BetaPCA$DonorName<-mapvalues(BetaPCA$DonorName,from=c("HT1","HT2","HT3","HT4","HT5","HT6","HT7","HT8","T2D1","T2D3","T2D4","T2D5"),to=c("HT1",NA,"HT2","HT3","HT4","HT5","HT6","HT7","T2D1","T2D2","T2D3","T2D4"))
    ## L2 normalization for PCA
    BetaPCA<-BetaPCA[,1:50] %>% apply(.,2,function(x){x/sqrt(sum(x^2))}) %>% cbind(.,BetaPCA[,51:58])
    ## Balancing the cell numbers and calculate pseudoindex
    beta.rna.pca.withinfo.subs<-list()
    for(i in 1:100){
    beta.rna.pca.withinfo.sub<-c()
    for (d in levels(BetaPCA$DonorName)){
      tmp<-subset(BetaPCA,DonorName==d)
      if(nrow(tmp)<=200){
        beta.rna.pca.withinfo.sub<-rbind(beta.rna.pca.withinfo.sub,tmp)
      }else{
        beta.rna.pca.withinfo.sub<-rbind(beta.rna.pca.withinfo.sub,tmp[sample(1:nrow(tmp),200),])
      }
    }
    beta.rna.pca.withinfo.subs<-c(beta.rna.pca.withinfo.subs,list(beta.rna.pca.withinfo.sub))
    }
    pseudo.indexes<-list()
    for(i in 1:100){
    md<-GetRePACTmodel.cca(ccaWithinfo=beta.rna.pca.withinfo.subs[[i]],prefix="PC",pheno="Disease",CCrange=c(1:10))
    trainingdata<-beta.rna.pca.withinfo.subs[[i]]
    Restdata<-BetaPCA[setdiff(row.names(BetaPCA),row.names(beta.rna.pca.withinfo.subs[[i]])),]
    Alldata<-BetaPCA
    beta.rna.pca.withinfo.subs[[i]]$pseudo.index<-apply(trainingdata[,1:10],1,function(x){md$coefficients[[1]]+sum(x*md$coefficients[2:11])})
    Restdata$pseudo.index<-apply(Restdata[,1:10],1,function(x){md$coefficients[[1]]+sum(x*md$coefficients[2:11])})
    pseudo.indexes<-c(pseudo.indexes,list(apply(Alldata[,1:10],1,function(x){md$coefficients[[1]]+sum(x*md$coefficients[2:11])})))
    }
    ## Note: consistency betweeb random shuffles,good!
    BetaPCA$pseudo.index.balanced<-do.call(cbind,pseudo.indexes) %>% rowMeans()
    ##Plot 3D PCA plot
#     adjustrange = seq(0, 180, length.out = 13)
#     library(plot3D)
#     pdf("multiplot3D.pdf")
#               for (i in adjustrange) {
#                   for (j in adjustrange) {
#                     title <- paste("test", "theta=", i, "phi=",
#                       j)
#                     scatter3D(BetaPCA[,"PC_4"], BetaPCA[,"PC_5"],BetaPCA[,"PC_7"],ticktype = "detailed", pch = 20, theta = i, phi = j, colvar = ifelse(BetaPCA[,"Disease"]=="T2D",1,0), bty = "b2", cex = 0.6, col = alpha.col(col = c("blue", "brown"), 0.6))
#                   }
#               }
#       dev.off()
# pdf("RNA.RePACT.plot3D.pdf")
#   scatter3D(BetaPCA[,"PC_4"], BetaPCA[,"PC_5"],BetaPCA[,"PC_7"],ticktype = "detailed", pch = 20, theta = 150, phi = 180, colvar = ifelse(BetaPCA[,"Disease"]=="T2D",1,0), bty = "b2", cex = 0.6, col = alpha.col(col = c("blue", "brown"), 0.6))
# dev.off()
    ## Plot violin pseudoindex
    p1<-ggplot(BetaPCA)+aes(DonorName,pseudo.index.balanced,fill=Disease)+geom_violin()+geom_boxplot(width=0.2,outlier.shape = NA,notch=F,coef = 0,fill="grey25",color="grey75")+coord_flip()+theme_classic()+scale_fill_manual(values=c("blue", "brown"))+theme_bw()+theme(legend.position="none")
    p2<-ggplot(BetaPCA)+aes(pseudo.index.balanced,fill=Disease)+geom_density(alpha=0.75)+scale_fill_manual(values=c("blue","brown"))+theme_classic()+theme(legend.position="none")
    pdf("Beta.RNA.RePACT.violin.pdf",height=5)
    print(p1)
    print(p2)
    dev.off()
    ## Calculate p values
    ks.test(subset(BetaPCA,Disease=="HT")$pseudo.index.balanced,subset(BetaPCA,Disease=="T2D")$pseudo.index.balanced)
##endregion

  ##region Step 8 RNA diff gene analysis
    BetaPCA$rank<-rank(BetaPCA$pseudo.index.balanced)
    ##region  Test Bin numbers I will use /20 bin to keep consitent with before
      beta.RNA.PCA.20bin.ob<-MakeEvenBinBydepth(cellvsPeak.m=t(as.matrix(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)),data.info=BetaPCA[,51:ncol(BetaPCA)],binnumber=20)
      betaT2D.diffGene.20bin.PCA<-CallT2Dpeak_qvalue(beta.RNA.PCA.20bin.ob$cellvsPeak.m.aggr,beta.RNA.PCA.20bin.ob$depths,beta.RNA.PCA.20bin.ob$index,qcut=0.2,slopecut1=0.3,slopecut2=-0.3,doscale=T)
    library(VennDiagram)
    bin20.g.up<-row.names(subset(betaT2D.diffGene.20bin.PCA$UP,qvalue<0.005))
    bin20.g.dn<-row.names(subset(betaT2D.diffGene.20bin.PCA$DN,qvalue<0.005))
  venn.diagram(x=list(newup=bin20.g.up,newdn=bin20.g.dn,oldup=row.names(subset(Beta.T2D.trj.genes,feature=="UP")),olddn=row.names(subset(Beta.T2D.trj.genes,feature=="DOWN"))),filename="Beta.T2D.RNAtraj.NewVSold.toptop.tiff",category.names=c("up","dn","up.old","dn.old"),cat.col=c("skyblue","gold","red","green"),fill=c("skyblue","gold","red","green"),cex=4)
    # saveRDS(betaT2D.diffGene.20bin.PCA,"mydir/betT2D.diffGenes.20binNew")
  betT2D.diffGenes.20binNew<-readRDS("mydir/betT2D.diffGenes.20binNew")
  #Donor contribution plot 10/20/30/40 bins
   Evenbin.donorContribute<-beta.RNA.PCA.40bin.ob$data.info.withbin %>% .[,c("DonorName","evenfragbin")] %>% table %>% as.matrix %>% apply(.,1,function(x){x/sum(x)}) %>% melt
   Evenbin.donorContribute<-cbind(Evenbin.donorContribute,disease=ifelse(grepl("T2D",Evenbin.donorContribute$DonorName),"T2D","ND"))
   ggplot(Evenbin.donorContribute)+aes(DonorName,value,fill=disease)+geom_bar(stat="identity",color="black")+facet_grid(~evenfragbin)+theme(axis.text=element_blank(),axis.ticks=element_blank())+scale_fill_manual(values=c("steelblue","red"))+theme_bw()
    ##endregion  Test Bin numbers /40 is probably the best, I will take overlap between 20/30/40/
    ## Plot T2D significant genes
    betT2D.diffGenes.20binNew<-readRDS("mydir/betT2D.diffGenes.20binNew")
    Beta.T2Dgenes<-c(bin20.g.up,bin20.g.dn)
    betT2D.toplot<-betT2D.diffGenes[[2]]$UPDN.toplot
    betT2D.toplot.m<-apply(betT2D.toplot,2,function(x){(x-mean(x))/sd(x)}) %>% melt()
    pdf("RNA.RePACT.pdf")
    ggplot(betT2D.toplot.m)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient(low="white",high="orange2",limit=c(-1,2),oob=scales::squish)+theme_void()
    dev.off()
  ##endregion

  ##region Incorporate beta HiC with beta
  '
   less /mnt/rstor/genetics/JinLab/ssz20/zshanshan/human_islet/alpha_beta_1004/beta.top300k_loops.loc | awk '{split($1,a,":|-"); print a[1],a[2],a[3],$2}' OFS="\t" >beta.top300k_loops.bed
   less /mnt/rstor/genetics/JinLab/ssz20/zshanshan/human_islet/alpha_beta_1004/beta.top300k_loops.loc | awk '{split($2,a,":|-"); print a[1],a[2],a[3],$1}' OFS="\t" >>beta.top300k_loops.bed
   bedtools intersect -a Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed -b beta.top300k_loops.bed -wa -wb | cut -f1,2,3,4,8 > Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.top300k.bed
   awk '{split($5,a,":|-"); print a[1],a[2],a[3],$5}' OFS="\t" Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.top300k.bed | sort -k1,1 -k2,2n -u >TargetLoop.bed
   annotatePeaks.pl  TargetLoop.bed hg19> TargetLoop.bed.annotated
   '
  ##endregion

  ##region DiffPeaks VS diffGenes
    "
    annotatePeaks.pl  Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed hg19 > Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed.annotated
    "
    setwd("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track")
    # betaT2D.diffpeak.40bin.LSI<-readRDS("mydir/betaT2D.diffpeak.40bin.LSI.rds")
    betT2D.diffGenes.20binNew<-readRDS("mydir/betT2D.diffGenes.20binNew")
    bin20.g.up<-row.names(subset(betT2D.diffGenes.20binNew$UP,qvalue<0.005 & MaxRPKM>quantile(betT2D.diffGenes.20binNew$pseudoregress.all$MaxRPKM,0.25)))
    bin20.g.dn<-row.names(subset(betT2D.diffGenes.20binNew$DN,qvalue<0.005 & MaxRPKM>quantile(betT2D.diffGenes.20binNew$pseudoregress.all$MaxRPKM,0.25)))
    betaT2D.diffPeaks.20bin.LSI<-readRDS("mydir/betaT2D.diffpeak.20bin.LSI.rds")
    Beta.Peakannotation<-read.delim("Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed.annotated")
    row.names(Beta.Peakannotation)<-paste(Beta.Peakannotation[,"Chr"],(Beta.Peakannotation[,"Start"]-1),Beta.Peakannotation[,"End"],sep="_")
    Beta.Peakannotation<-Beta.Peakannotation[,c("Annotation","Distance.to.TSS","Gene.Name")]
    Beta.Peakannotation$Annotation<-strsplit(as.character(Beta.Peakannotation$Annotation)," (",fix=T) %>% sapply(.,function(x){x[[1]]})
    Beta.Peakannotation$Peak<-row.names(Beta.Peakannotation)
      ##region Add Hi-C loop infos,   Create Beta.Peakannotation.HiC; generate 6 gene list for overlap analysis
        TargetLoop.bed.annotated<-read.delim("TargetLoop.bed.annotated")[,c("PeakID..cmd.annotatePeaks.pl.TargetLoop.bed.hg19.","Annotation","Distance.to.TSS","Gene.Name")]
        names(TargetLoop.bed.annotated)[1]<-"V5"
        Beta.Peak.Targets<-read.table("Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.top300k.bed")[,c(4,5)]
        Beta.Peakannotation.HiC<-merge(Beta.Peakannotation,Beta.Peak.Targets,by.x="Peak",by.y="V4",all.x=T) %>% merge(.,TargetLoop.bed.annotated,by="V5",all.x=T)
        names(Beta.Peakannotation.HiC)<-c("Target","Peak","Annotate.near","Dis.to.Tss.near","Gene.near","Annotate.loop","Dis.to.Tss.loop","Gene.loop")
        Beta.Peakannotation.HiC<-Beta.Peakannotation.HiC[,c("Peak","Annotate.near","Dis.to.Tss.near","Gene.near","Target","Annotate.loop","Dis.to.Tss.loop","Gene.loop")] %>% .[order(.$Peak),]
        Beta.Peakannotation.HiC<-Beta.Peakannotation.HiC[!duplicated(Beta.Peakannotation.HiC),]
        # saveRDS(Beta.Peakannotation.HiC,"mydir/Beta.Peakannotation.HiC")
        Beta.Peakannotation.HiC<-readRDS("mydir/Beta.Peakannotation.HiC")
        Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$UP),] %>% subset(.,Annotation %in% c("5' UTR","promoter-TSS")| (Distance.to.TSS<=1000 & Distance.to.TSS>=0)) %>% .$Gene.Name %>% unique -> Beta.up.peak.g
        Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$DN),] %>% subset(.,Annotation %in% c("5' UTR","promoter-TSS")|(Distance.to.TSS<=1000 & Distance.to.TSS>=0)) %>% .$Gene.Name %>% unique -> Beta.dn.peak.g

        Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$UP),] %>% subset(.,!(Annotation %in% c("5' UTR","promoter-TSS")| (Distance.to.TSS<=1000 & Distance.to.TSS>=0))) %>% .$Gene.Name %>% unique -> Beta.up.peak.g.nonP
        Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$DN),] %>% subset(.,!(Annotation %in% c("5' UTR","promoter-TSS")|(Distance.to.TSS<=1000 & Distance.to.TSS>=0))) %>% .$Gene.Name %>% unique -> Beta.dn.peak.g.nonP

        subset(Beta.Peakannotation.HiC,Peak %in% row.names(betaT2D.diffPeaks.20bin.LSI$UP) & abs(Dis.to.Tss.loop) <=10000)  %>% .$Gene.loop %>% unique ->Beta.up.peak.g.loop
        subset(Beta.Peakannotation.HiC,Peak %in% row.names(betaT2D.diffPeaks.20bin.LSI$DN) & abs(Dis.to.Tss.loop) <=10000)  %>% .$Gene.loop %>% unique ->Beta.dn.peak.g.loop
      ##endregion Add Hi-C loop infos

      ##region Summarize the number of regulatory peaks for each T2D trajectory genes
Beta.Peakannotation.HiC.UP<-subset(Beta.Peakannotation.HiC,Peak %in% row.names(betaT2D.diffPeaks.20bin.LSI$UP))
UP.PeakN.summary<-data.frame()
for(gene in Beta.up.GENE){
P.promoter<-subset(Beta.Peakannotation.HiC.UP,Gene.near==gene) %>% subset(.,Annotate.near %in% c("5' UTR","promoter-TSS")| (Dis.to.Tss.near<=1000 & Dis.to.Tss.near>=0)) %>% .$Peak %>% unique
P.near<-subset(Beta.Peakannotation.HiC.UP,Gene.near==gene) %>% subset(.,!(Annotate.near %in% c("5' UTR","promoter-TSS")| (Dis.to.Tss.near<=1000 & Dis.to.Tss.near>=0))) %>% .$Peak %>% unique
P.loop<-subset(Beta.Peakannotation.HiC.UP,abs(Dis.to.Tss.loop)<10000 &Gene.loop==gene) %>% .$Peak %>% unique %>% .[!.%in% union(P.promoter,P.near)]
cts<-c(length(P.promoter),length(P.near),length(P.loop),sum(length(P.promoter),length(P.near),length(P.loop)))
UP.PeakN.summary<-rbind(UP.PeakN.summary,cts)
}
row.names(UP.PeakN.summary)<-Beta.up.GENE
colnames(UP.PeakN.summary)<-c("p.promoter","p.near","p.loop","sum")

Beta.Peakannotation.HiC.DN<-subset(Beta.Peakannotation.HiC,Peak %in% row.names(betaT2D.diffPeaks.20bin.LSI$DN))
DN.PeakN.summary<-data.frame()
for(gene in Beta.dn.GENE){
P.promoter<-subset(Beta.Peakannotation.HiC.DN,Gene.near==gene) %>% subset(.,Annotate.near %in% c("5' UTR","promoter-TSS")| (Dis.to.Tss.near<=1000 & Dis.to.Tss.near>=0)) %>% .$Peak %>% unique
P.near<-subset(Beta.Peakannotation.HiC.DN,Gene.near==gene) %>% subset(.,!(Annotate.near %in% c("5' UTR","promoter-TSS")| (Dis.to.Tss.near<=1000 & Dis.to.Tss.near>=0))) %>% .$Peak %>% unique
P.loop<-subset(Beta.Peakannotation.HiC.DN,abs(Dis.to.Tss.loop)<10000 &Gene.loop==gene) %>% .$Peak %>% unique %>% .[!.%in% union(P.promoter,P.near)]
cts<-c(length(P.promoter),length(P.near),length(P.loop),sum(length(P.promoter),length(P.near),length(P.loop)))
DN.PeakN.summary<-rbind(DN.PeakN.summary,cts)
}
row.names(DN.PeakN.summary)<-Beta.dn.GENE
colnames(DN.PeakN.summary)<-c("p.promoter","p.near","p.loop","sum")

pdf("UP.DNregulatoryPeaks.pdf",height=3,width=4)
rbind(UP.PeakN.summary,DN.PeakN.summary) %>% ggplot(.)+aes(sum)+aes(sum)+geom_histogram(color="black",binwidth=1,fill="grey")+ylim(0,160)+theme_bw()
rbind(UP.PeakN.summary,DN.PeakN.summary) %>% ggplot(.)+aes(sum)+aes(sum)+geom_histogram(color="black",binwidth=1,fill="grey")+theme_bw()
dev.off()
      ##endregion Summarize the number of regulatory peaks for each T2D trajectory genes

      ##region  Peak annotation summary (To be continured)
    Peak.summary<-data.frame(table(Beta.Peakannotation$Annotation))
    Peak.summary$Up<-as.data.frame(table(Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$UP),]$Annotation))$Freq
    Peak.summary$Dn<-as.data.frame(table(Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$DN),]$Annotation))$Freq
    Peak.summary[,2:4] %>% apply(.,2,function(x){x/sum(x)}) %>% data.frame(Peak.summary$Var1,.) %>% melt
    ##endregion  Peak annotation summary (To be continured)

      ##region Venn diagram analysis and fisher's exact test
      library(VennDiagram)
    Islet12.Beta.scRNA.seurat3<-readRDS("mydir/Islet12.Beta.scRNA.seurat3")
    Beta.up.peak.g<-Beta.up.peak.g[Beta.up.peak.g %in% rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)]
    Beta.dn.peak.g<-Beta.dn.peak.g[Beta.dn.peak.g %in% rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)]
    Beta.up.peak.g.nonP<-Beta.up.peak.g.nonP[Beta.up.peak.g.nonP %in% rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)]
    Beta.dn.peak.g.nonP<-Beta.dn.peak.g.nonP[Beta.dn.peak.g.nonP %in% rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)]
    Beta.up.GENE<-bin20.g.up
    Beta.dn.GENE<-bin20.g.dn
    venn.diagram(x=list(Beta.up.peak.g=Beta.up.peak.g,Beta.dn.peak.g=Beta.dn.peak.g,Beta.up.GENE=Beta.up.GENE,Beta.dn.GENE=Beta.dn.GENE),filename="PeakVGene.RPKMcut.tiff",category.names=c("up.pG","dn.pG","up.GENE","dn.GENE"),cat.col=c("skyblue","gold","red","green"),fill=c("skyblue","gold","red","green"),cex=4)

    venn.diagram(x=list(Beta.up.peak.g.loop=Beta.up.peak.g.loop,Beta.dn.peak.g.loop=Beta.dn.peak.g.loop,Beta.up.GENE=Beta.up.GENE,Beta.dn.GENE=Beta.dn.GENE),filename="PeakLoopVGene.RPKMcut.tiff",category.names=c("up.pLG","dn.pLG","up.GENE","dn.GENE"),cat.col=c("skyblue","gold","red","green"),fill=c("skyblue","gold","red","green"),cex=4)
    ## Below are the 4 small venndiageam in the figure 4
    venn.diagram(x=list(Beta.up.peak.g.loop=intersect(Beta.up.GENE,Beta.up.peak.g.loop),Beta.up.peak.g=intersect(Beta.up.GENE,Beta.up.peak.g),Beta.up.peak.g.nonP=intersect(Beta.up.GENE,Beta.up.peak.g.nonP)),filename="upgene.UPgenedist.loop.tiff",category.names=c("up.pLG","up.p.promoter","up.p.nonP"),cat.col=c("skyblue","gold","red"),fill=c("skyblue","gold","red"),cex=4)

    venn.diagram(x=list(Beta.up.peak.g.loop=intersect(Beta.dn.GENE,Beta.up.peak.g.loop),Beta.up.peak.g=intersect(Beta.dn.GENE,Beta.up.peak.g),Beta.up.peak.g.nonP=intersect(Beta.dn.GENE,Beta.up.peak.g.nonP)),filename="dngene.UPgenedist.loop.tiff",category.names=c("up.pLG","up.p.promoter","up.p.nonP"),cat.col=c("skyblue","gold","red"),fill=c("skyblue","gold","red"),cex=4)

    venn.diagram(x=list(Beta.up.peak.g.loop=intersect(Beta.up.GENE,Beta.dn.peak.g.loop),Beta.up.peak.g=intersect(Beta.up.GENE,Beta.dn.peak.g),Beta.up.peak.g.nonP=intersect(Beta.up.GENE,Beta.dn.peak.g.nonP)),filename="upgene.DNgenedist.loop.tiff",category.names=c("up.pLG","up.p.promoter","up.p.nonP"),cat.col=c("skyblue","gold","red"),fill=c("skyblue","gold","red"),cex=4)

    venn.diagram(x=list(Beta.up.peak.g.loop=intersect(Beta.dn.GENE,Beta.dn.peak.g.loop),Beta.up.peak.g=intersect(Beta.dn.GENE,Beta.dn.peak.g),Beta.up.peak.g.nonP=intersect(Beta.dn.GENE,Beta.dn.peak.g.nonP)),filename="dngene.DNgenedist.loop.tiff",category.names=c("up.pLG","up.p.promoter","up.p.nonP"),cat.col=c("skyblue","gold","red"),fill=c("skyblue","gold","red"),cex=4)

    #Generate Credible set and test supportive and counter evidence
    UP.credible<-union(Beta.up.peak.g.loop,Beta.up.peak.g) %>% union(.,Beta.up.peak.g.nonP) %>% intersect(.,Beta.up.GENE)
    UP.credible.evidence<-sapply(UP.credible,function(x){
    UPPeak<-subset(Beta.Peakannotation.HiC,Peaks %in% c(row.names(betaT2D.diffPeaks.20bin.LSI$UP))) %>% subset(.,Gene.near==x |(abs(Dis.to.Tss.loop)<10000 &Gene.loop==x)) %>% .$Peaks %>% unique %>% length
    DNPeak<-subset(Beta.Peakannotation.HiC,Peaks %in% c(row.names(betaT2D.diffPeaks.20bin.LSI$DN))) %>% subset(.,Gene.near==x |(abs(Dis.to.Tss.loop)<10000 &Gene.loop==x)) %>% .$Peaks %>% unique %>% length
    return(c(UPPeak,DNPeak))
  }) %>% t
    UP.credible<-data.frame(UP.credible,UP.credible.evidence)

    DN.credible<-union(Beta.dn.peak.g.loop,Beta.dn.peak.g) %>% union(.,Beta.dn.peak.g.nonP) %>% intersect(.,Beta.dn.GENE)
    DN.credible.evidence<-sapply(DN.credible,function(x){
    UPPeak<-subset(Beta.Peakannotation.HiC,Peaks %in% c(row.names(betaT2D.diffPeaks.20bin.LSI$UP))) %>% subset(.,Gene.near==x |(abs(Dis.to.Tss.loop)<10000 &Gene.loop==x)) %>% .$Peaks %>% unique %>% length
    DNPeak<-subset(Beta.Peakannotation.HiC,Peaks %in% c(row.names(betaT2D.diffPeaks.20bin.LSI$DN))) %>% subset(.,Gene.near==x |(abs(Dis.to.Tss.loop)<10000 &Gene.loop==x)) %>% .$Peaks %>% unique %>% length
    return(c(UPPeak,DNPeak))
  }) %>% t
    DN.credible<-data.frame(DN.credible,DN.credible.evidence)
    ggplot()+geom_density(aes(X1-X2),data=UP.credible,color="blue")+geom_density(aes(X1-X2),data=DN.credible,color="red")
    # saveRDS(UP.credible,"mydir/UP.credible")
    # saveRDS(DN.credible,"mydir/DN.credible")
    UP.credible<-readRDS("mydir/UP.credible")
    DN.credible<-readRDS("mydir/DN.credible")
    ##region test the influce of distance-to-TSS in Up-in-Up enrichemnt (Just take a look)
Beta.up.peak.g<-Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$UP),]
data.frame(Gene.Name=bin20.g.up,ExprChange="UP") %>% rbind(.,data.frame(Gene.Name=bin20.g.dn,ExprChange="DN")) %>% merge(.,Beta.up.peak.g,by="Gene.Name",all.y=T) -> upPeak.test
Beta.dn.peak.g<-Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$DN),]
data.frame(Gene.Name=bin20.g.up,ExprChange="UP") %>% rbind(.,data.frame(Gene.Name=bin20.g.dn,ExprChange="DN")) %>% merge(.,Beta.dn.peak.g,by="Gene.Name",all.y=T) -> dnPeak.test
upPeak.test$ExprChange<-as.character(upPeak.test$ExprChange)
upPeak.test$ExprChange[is.na(upPeak.test$ExprChange)]<-"NoChange"
dnPeak.test$ExprChange<-as.character(dnPeak.test$ExprChange)
dnPeak.test$ExprChange[is.na(dnPeak.test$ExprChange)]<-"NoChange"
distance.test<-data.frame(L=c(0,1000,5000,10000,15000,20000,25000,30000,35000,40000,50000,75000,85000,100000),R=c(1000,5000,10000,15000,20000,25000,30000,35000,40000,50000,75000,85000,100000,Inf))
Ratio.expect.up<-length(bin20.g.up)/length(rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts))
Ratio.expect.dn<-length(bin20.g.dn)/length(rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts))
distance.test<-distance.test[1:12,]
Ratio<-c()
for (i in 1:nrow(distance.test)){
L<-distance.test[i,"L"]
R<-distance.test[i,"R"]
tmp.df<-subset(dnPeak.test, abs(Distance.to.TSS)>L & abs(Distance.to.TSS)<R)
print(nrow(tmp.df))
tmp<-tmp.df$ExprChange %>% table %>% as.matrix
Ratio<-c(Ratio,tmp["DN",]/sum(tmp))
}
data.frame(distance.test,Ratio) %>% ggplot()+aes(L,Ratio,label=L)+geom_point()+geom_line()+geom_hline(yintercept=Ratio.expect.dn)+ylim(0,0.12)+geom_text_repel()+theme_bw()

##

v=c(1000,5000,10000,15000,20000,25000,30000,35000,40000,50000,75000,85000,100000,125000,150000,175000,200000,300000,400000,500000)

upPinupG<-PeakEnrichinGene(ChosenPeak=row.names(betaT2D.diffPeaks.20bin.LSI$UP),ExprEnrich="UP")
upPindnG<-PeakEnrichinGene(ChosenPeak=row.names(betaT2D.diffPeaks.20bin.LSI$UP),ExprEnrich="DN")


dnPinupG<-PeakEnrichinGene(ChosenPeak=row.names(betaT2D.diffPeaks.20bin.LSI$DN),ExprEnrich="UP")
dnPindnG<-PeakEnrichinGene(ChosenPeak=row.names(betaT2D.diffPeaks.20bin.LSI$DN),ExprEnrich="DN")

randominUP<-PeakEnrichinGene(ChosenPeak=row.names(betaT2D.diffPeaks.20bin.LSI$pseudoregress.all[sample(1:nrow(betaT2D.diffPeaks.20bin.LSI$pseudoregress.all),4623),]),ExprEnrich="UP")


grid.arrange(grobs=upPinupG[2:3])
grid.arrange(grobs=upPindnG[2:3])
grid.arrange(grobs=dnPindnG[2:3])
grid.arrange(grobs=dnPinupG[2:3])

PeakEnrichinGene<-function(ChosenPeak=row.names(betaT2D.diffPeaks.20bin.LSI$UP),distInUse=1:9,ExprEnrich="UP",v=c(1000,5000,10000,15000,20000,50000,100000,200000)){
Test.peak.g.hic<-subset(Beta.Peakannotation.HiC,Peak %in% ChosenPeak)
ExprChange.near<-data.frame(Gene.Name=bin20.g.up,ExprChange.near="UP") %>% rbind(.,data.frame(Gene.Name=bin20.g.dn,ExprChange.near="DN"))
ExprChange.loop<-data.frame(Gene.Name=bin20.g.up,ExprChange.loop="UP") %>% rbind(.,data.frame(Gene.Name=bin20.g.dn,ExprChange.loop="DN"))
merge(Test.peak.g.hic,ExprChange.near,by.x="Gene.near",by.y="Gene.Name",all.x=T)  %>% merge(.,ExprChange.loop,by.x="Gene.loop",by.y="Gene.Name",all.x=T)-> Peak.hic.test

Peak.hic.test$ExprChange.near<-as.character(Peak.hic.test$ExprChange.near)
Peak.hic.test$ExprChange.near[is.na(Peak.hic.test$ExprChange.near)]<-"NoChange"
Peak.hic.test$ExprChange.loop<-as.character(Peak.hic.test$ExprChange.loop)
Peak.hic.test$ExprChange.loop[is.na(Peak.hic.test$ExprChange.loop)]<-"NoChange"
distance.test<-data.frame(L=c(0,v),R=c(v,Inf))
EXP<-c(length(bin20.g.up)/length(rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)),length(bin20.g.dn)/length(rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts)))
names(EXP)<-c("UP","DN")
distance.test<-distance.test[distInUse,]
Ratio.near<-c()
Ratio.loop<-c()
Peak.hic.test$ExprChange.near<-as.factor(Peak.hic.test$ExprChange.near)
Peak.hic.test$ExprChange.loop<-as.factor(Peak.hic.test$ExprChange.loop)
for (i in 1:nrow(distance.test)){
L<-distance.test[i,"L"]
R<-distance.test[i,"R"]
tmp.near.df<-subset(Peak.hic.test, abs(Dis.to.Tss.near)>L & abs(Dis.to.Tss.near)<R) %>% .[,c("Gene.near","ExprChange.near")] %>% .[!duplicated(.),]
tmp.loop.df<-subset(Peak.hic.test, abs(Dis.to.Tss.loop)>L & abs(Dis.to.Tss.loop)<R) %>% .[,c("Gene.near","ExprChange.loop")] %>% .[!duplicated(.),]
print(paste(nrow(tmp.near.df),nrow(tmp.loop.df)))
tmp.near<-tmp.near.df$ExprChange.near %>% table %>% as.matrix
tmp.loop<-tmp.loop.df$ExprChange.loop %>% table %>% as.matrix
Ratio.near<-c(Ratio.near,tmp.near[ExprEnrich,]/sum(tmp.near))
Ratio.loop<-c(Ratio.loop,tmp.loop[ExprEnrich,]/sum(tmp.loop))
}
p.near<-data.frame(distance.test,Ratio.near) %>% ggplot()+aes(L,Ratio.near,label=L)+geom_point()+geom_line()+geom_hline(yintercept=EXP[ExprEnrich])+geom_text_repel()+theme_bw()
p.loop<-data.frame(distance.test,Ratio.loop) %>% ggplot()+aes(L,Ratio.loop,label=L)+geom_point()+geom_line()+geom_hline(yintercept=EXP[ExprEnrich])+geom_text_repel()+theme_bw()
return(list(Peak.hic.test=Peak.hic.test,p.near=p.near,p.loop=p.loop))
}
##endregion test the influce of distance-to-TSS in Up-in-Up enrichemnt (Just take a look)
    ## Fisher's exact test for all.
    N=length(rownames(Islet12.Beta.scRNA.seurat3@assays$RNA@counts))
    expGeneList<-list(bin20.g.up,bin20.g.dn)
    PeakGeneList<-list(Beta.up.peak.g,Beta.up.peak.g.nonP,Beta.up.peak.g.loop,Beta.dn.peak.g.loop,Beta.dn.peak.g.nonP,Beta.dn.peak.g)
    ps<-matrix(,2,length(PeakGeneList))
    odds<-matrix(,2,length(PeakGeneList))
    for ( i in 1:2){
      for(j in 1:length(PeakGeneList)){
        a<-length(intersect(expGeneList[[i]],PeakGeneList[[j]]))
        b<-length(expGeneList[[i]])-a
        c<-length(PeakGeneList[[j]])-a
        d<-N-c
        md<-fisher.test(matrix(c(a,b,c,d),2,2))
        ps[i,j]<-md$p.value
        odds[i,j]<-md$estimate
      }
    }
    row.names(ps)<-c("Up.gene","Dn.gene")
    colnames(ps)<-c("Up.pk.P","Up.pk.nonP","Up.pk.L","Dn.pk.L","Dn.pk.nonP","Dn.pk.P")
    row.names(odds)<-c("Up.gene","Dn.gene")
    colnames(odds)<-c("Up.pk.P","Up.pk.nonP","Up.pk.L","Dn.pk.L","Dn.pk.nonP","Dn.pk.P")
    toplot.m<-cbind(reshape2::melt(odds),pvalue=reshape2::melt(ps)[,3])
    toplot.m$Var1<-factor(toplot.m$Var1,levels=c("Dn.gene","Up.gene"))
    TagSig<-function(x){
    if(x<0.001){return("***")}else if(x>=0.001 &x<0.01){return("**")}else if(x>=0.01 &x<0.05){return("*")}else{return("")}}
    toplot.m$sig<-sapply(toplot.m$pvalue,TagSig)
    pdf("RePACT.ATAC.HiC.RNA.enrichment.pdf",height=2.6)
    ggplot(toplot.m)+aes(Var2,Var1,fill=log2(value),label=sig)+geom_tile(color="black",size=0.8)+scale_fill_gradient2(low="blue",high="red",mid="white")+geom_text(size=8)+theme_void()
    dev.off()
      ##endregion Venn diagram analysis and fisher's exact test

      ##region RNA and ATAC side-byside heatmap
    RNAATAC.genes.up.ordered<-data.frame(gene=Beta.up.peak.g,rank=(1:length(Beta.up.peak.g))/length(Beta.up.peak.g)) %>% merge(.,data.frame(gene=Beta.up.GENE,rank=(1:length(Beta.up.GENE)/length(Beta.up.GENE))),by="gene") %>% cbind(.,rank=.$rank.x*.$rank.y) %>% .[order(.$rank),]
    RNAATAC.genes.dn.ordered<-data.frame(gene=Beta.dn.peak.g,rank=(1:length(Beta.dn.peak.g))/length(Beta.dn.peak.g)) %>% merge(.,data.frame(gene=Beta.dn.GENE,rank=(1:length(Beta.dn.GENE)/length(Beta.dn.GENE))),by="gene") %>% cbind(.,rank=.$rank.x*.$rank.y) %>% .[order(.$rank),]
    ## draw RNA part
    betT2D.toplot<-betT2D.diffGenes.20binNew$UPDN.toplot[,c(as.character(RNAATAC.genes.up.ordered$gene)[1:40],rev(as.character(RNAATAC.genes.dn.ordered$gene)[1:20]))]
    betT2D.toplot.m<-apply(betT2D.toplot,2,function(x){(x-mean(x))/sd(x)}) %>% melt()
    p1<-ggplot(betT2D.toplot.m)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient(low="white",high="orange",limit=c(-1,2),oob=scales::squish)+theme_bw()
    ## draw ATAC part
    UpPeaks.plot<-Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$UP),] %>% subset(.,Annotation %in% c("5' UTR","promoter-TSS")| Distance.to.TSS<=1000 & Distance.to.TSS>=0) %>%  subset(.,Gene.Name %in% as.character(RNAATAC.genes.up.ordered$gene)[1:40])
    UpPeaks.plot$Gene.Name<-factor(UpPeaks.plot$Gene.Name,levels=as.character(RNAATAC.genes.up.ordered$gene)[1:40])

    DnPeaks.plot<-Beta.Peakannotation[row.names(betaT2D.diffPeaks.20bin.LSI$DN),] %>% subset(.,Annotation %in% c("5' UTR","promoter-TSS")| Distance.to.TSS<=1000 & Distance.to.TSS>=0) %>%  subset(.,Gene.Name %in% as.character(RNAATAC.genes.dn.ordered$gene)[1:20])
    DnPeaks.plot$Gene.Name<-factor(DnPeaks.plot$Gene.Name,levels=rev(as.character(RNAATAC.genes.dn.ordered$gene)[1:20]))
    Up.Dn.Peaks.ordered<-rbind(UpPeaks.plot,DnPeaks.plot) %>% .[order(.$Gene.Name),] %>% .[!duplicated(.$Gene.Name),]

    betT2D.ATAC.toplot<-apply(betaT2D.diffPeaks.20bin.LSI$UPDN.toplot,2,function(x){scale(x)})[,row.names(Up.Dn.Peaks.ordered)]
    betT2D.ATAC.toplot.m<-melt(betT2D.ATAC.toplot)  p2<-ggplot(betT2D.ATAC.toplot.m)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red")+theme_bw()
    pdf("topATATVSRNA.pdf",height=10)
    print(p1)
    print(p2)
    dev.off()

    ##Make a side-byside heatmap for Loop-mediated genes
    ##Summarize the regulatory distances; number of genes to regulate for loop mediating peaks
Loops.UPPeak.UPGenes<-subset(Beta.Peakannotation.HiC,Peak %in% row.names(betaT2D.diffPeaks.20bin.LSI$UP) & abs(Dis.to.Tss.loop) <=10000)  %>%  subset(.,Gene.loop %in% Beta.up.GENE) %>% .[order(.$Peak),]
Loops.UPPeak.UPGenes$TargetPOS<-strsplit(as.character(Loops.UPPeak.UPGenes$Target),":|-") %>% sapply(.,function(x){(as.numeric(x[3])+as.numeric(x[2]))/2})
Loops.UPPeak.UPGenes$PeakPOS<-strsplit(as.character(Loops.UPPeak.UPGenes$Peak),"_") %>% sapply(.,function(x){(as.numeric(x[3])+as.numeric(x[2]))/2})
Loops.DNPeak.DNGenes<-subset(Beta.Peakannotation.HiC,Peak %in% row.names(betaT2D.diffPeaks.20bin.LSI$DN) & abs(Dis.to.Tss.loop) <=10000)  %>%  subset(.,Gene.loop %in% Beta.dn.GENE) %>% .[order(.$Peak),]
Loops.DNPeak.DNGenes$TargetPOS<-strsplit(as.character(Loops.DNPeak.DNGenes$Target),":|-") %>% sapply(.,function(x){(as.numeric(x[3])+as.numeric(x[2]))/2})
Loops.DNPeak.DNGenes$PeakPOS<-strsplit(as.character(Loops.DNPeak.DNGenes$Peak),"_") %>% sapply(.,function(x){(as.numeric(x[3])+as.numeric(x[2]))/2})

LoopPeaks<-rbind(Loops.UPPeak.UPGenes,Loops.DNPeak.DNGenes)
LoopPeaks$LoopDistance<-abs(LoopPeaks$TargetPOS-LoopPeaks$PeakPOS)
PromoterPeaks<-Beta.Peakannotation[c(row.names(betaT2D.diffPeaks.20bin.LSI$UP),row.names(betaT2D.diffPeaks.20bin.LSI$DN)),] %>% subset(.,Annotation %in% c("5' UTR","promoter-TSS")| (Distance.to.TSS<=1000 & Distance.to.TSS>=0))
NearestPeaks<-Beta.Peakannotation[c(row.names(betaT2D.diffPeaks.20bin.LSI$UP),row.names(betaT2D.diffPeaks.20bin.LSI$DN)),] %>% subset(.,!(Annotation %in% c("5' UTR","promoter-TSS")| (Distance.to.TSS<=1000 & Distance.to.TSS>=0)))
pdf("regulatory.dist.pdf")
ggplot(LoopPeaks)+aes(log10(LoopDistance))+geom_density(fill="red2",alpha=0.6)+xlim(0,7)+geom_density(aes(log10(abs(Distance.to.TSS))),data=PromoterPeaks,fill="blue",alpha=0.6)+geom_density(aes(log10(abs(Distance.to.TSS))),data=NearestPeaks,fill="gold",alpha=0.6)+theme_classic()
dev.off()
#Rank
Loops.UPPeak.UPGenes$Peak<-factor(Loops.UPPeak.UPGenes$Peak,levels=row.names(betaT2D.diffPeaks.20bin.LSI$UP))
Loops.UPPeak.UPGenes$Gene.loop<-factor(Loops.UPPeak.UPGenes$Gene.loop,levels=Beta.up.GENE)
Loops.UPPeak.UPGenes.ordered<-Loops.UPPeak.UPGenes[order(rank(Loops.UPPeak.UPGenes$Peak)*rank(Loops.UPPeak.UPGenes$Gene.loop)),]
Loops.DNPeak.DNGenes$Peak<-factor(Loops.DNPeak.DNGenes$Peak,levels=row.names(betaT2D.diffPeaks.20bin.LSI$DN))
Loops.DNPeak.DNGenes$Gene.loop<-factor(Loops.DNPeak.DNGenes$Gene.loop,levels=Beta.dn.GENE)
Loops.DNPeak.DNGenes.ordered<-Loops.DNPeak.DNGenes[order(rank(Loops.DNPeak.DNGenes$Peak)*rank(Loops.DNPeak.DNGenes$Gene.loop)),]
## draw RNA part
    betT2D.toplot<-betT2D.diffGenes.20binNew$UPDN.toplot[,c(unique(as.character(Loops.UPPeak.UPGenes.ordered$Gene.loop)),unique(rev(as.character(Loops.DNPeak.DNGenes.ordered$Gene.loop))))]
    betT2D.toplot.m<-apply(betT2D.toplot,2,function(x){(x-mean(x))/sd(x)}) %>% melt()
    p1<-ggplot(betT2D.toplot.m)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient(low="white",high="orange",limit=c(-1,2),oob=scales::squish)+theme_bw()
    ## draw ATAC part
    betT2D.ATAC.toplot<-apply(betaT2D.diffPeaks.20bin.LSI$UPDN.toplot,2,function(x){scale(x)})[,c(unique(as.character(Loops.UPPeak.UPGenes.ordered$Peak)),unique(rev(as.character(Loops.DNPeak.DNGenes.ordered$Peak))))]
    betT2D.ATAC.toplot.m<-melt(betT2D.ATAC.toplot)
    p2<-ggplot(betT2D.ATAC.toplot.m)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red")+theme_bw()
    pdf("LoopMediate.ATAC.RNA.heatmap.pdf",height=12,width=6)
    print(p1)
    print(p2)
    dev.off()


    ## draw connections
    Loops.UPPeak.UPGenes.ordered$Dir<-"UP"
    Loops.DNPeak.DNGenes.ordered$Dir<-"DN"
    LoopPeaks.ordered<-rbind(Loops.UPPeak.UPGenes.ordered,Loops.DNPeak.DNGenes.ordered[nrow(Loops.DNPeak.DNGenes.ordered):1,])
    LoopPeaks.ordered$gene.index<-match(LoopPeaks.ordered$Gene.loop,unique((LoopPeaks.ordered$Gene.loop)))
    LoopPeaks.ordered$peak.index<-match(LoopPeaks.ordered$Peak,unique((LoopPeaks.ordered$Peak)))
    LoopPeaks.ordered$pair<-paste(LoopPeaks.ordered$Peak,LoopPeaks.ordered$Target,sep="")
    datatoplot<-data.frame(point=LoopPeaks.ordered$Peak,cat="Peak",pair=LoopPeaks.ordered$pair,index=0.64925*LoopPeaks.ordered$peak.index,Dir=LoopPeaks.ordered$Dir) %>% rbind(.,data.frame(point=LoopPeaks.ordered$Gene.loop,cat="Gene",pair=LoopPeaks.ordered$pair,index=LoopPeaks.ordered$gene.index,Dir=LoopPeaks.ordered$Dir))
    p3<-ggplot(datatoplot)+aes(cat,index,group=pair,color=Dir,label=point)+geom_point()+geom_line()
    ##draw distance
    LoopPeaks.ordered$TargetPOS<-strsplit(as.character(LoopPeaks.ordered$Target),":|-") %>% sapply(.,function(x){mean(c(as.numeric(x[2]),as.numeric(x[3])))})
    LoopPeaks.ordered$PeakPOS<-strsplit(as.character(LoopPeaks.ordered$Peak),"_") %>% sapply(.,function(x){mean(c(as.numeric(x[2]),as.numeric(x[3])))})
    LoopPeaks.ordered$Dist<-abs(LoopPeaks.ordered$TargetPOS-LoopPeaks.ordered$PeakPOS)
    LoopPeaks.ordered$Gene.loop<-factor(LoopPeaks.ordered$Gene.loop,levels=c(unique(as.character(Loops.UPPeak.UPGenes.ordered$Gene.loop)),unique(rev(as.character(Loops.DNPeak.DNGenes.ordered$Gene.loop)))))
    p4<-ggplot(LoopPeaks.ordered[nrow(LoopPeaks.ordered):1,])+aes(Gene.loop,log10(Dist))+geom_point(shape=3)+coord_flip()+ylim(4,6.5)
    pdf("LoopMediate.ATAC.RNA.heatmap_patch.p3p4.pdf",height=12,width=3.5)
    print(p3)
    print(p4)
    dev.off()
    ##draw extra info bar
    LoopUP.genes<-unique(as.character(Loops.UPPeak.UPGenes.ordered$Gene.loop))
    LoopDN.genes<-unique(rev(as.character(Loops.DNPeak.DNGenes.ordered$Gene.loop)))
    PromoterUP.tag<-c()
    NearestUP.tag<-c()
    PromoterDN.tag<-c()
    NearestDN.tag<-c()
    PromoterUP.tag[LoopUP.genes %in% Beta.up.peak.g]<-"On"
    PromoterUP.tag[!LoopUP.genes %in% Beta.up.peak.g]<-"Off"
    NearestUP.tag[LoopUP.genes %in% Beta.up.peak.g.nonP]<-"On"
    NearestUP.tag[!LoopUP.genes %in% Beta.up.peak.g.nonP]<-"Off"
    PromoterDN.tag[LoopDN.genes %in% Beta.dn.peak.g]<-"On"
    PromoterDN.tag[!LoopDN.genes %in% Beta.dn.peak.g]<-"Off"
    NearestDN.tag[LoopDN.genes %in% Beta.dn.peak.g.nonP]<-"On"
    NearestDN.tag[!LoopDN.genes %in% Beta.dn.peak.g.nonP]<-"Off"
    ExtraInfo.m<-rbind(data.frame(gene=LoopUP.genes,Promoter.tag=PromoterUP.tag,Nearest.tag=NearestUP.tag),data.frame(gene=LoopDN.genes,Promoter.tag=PromoterDN.tag,Nearest.tag=NearestDN.tag))  %>% melt(.,id.vars=("gene"))
    ExtraInfo.m$gene<-factor(ExtraInfo.m$gene,levels=c(LoopUP.genes,LoopDN.genes))
    p5<-ggplot(ExtraInfo.m)+aes(variable,gene,fill=value)+geom_tile(color="black")+scale_fill_manual(values=c("white","darkgreen"))
    pdf("LoopMediate.ATAC.RNA.heatmap_patch.p5.pdf",height=12,width=3.5)
    print(p5)
    dev.off()
    ##endregion RNA and ATAC side-byside heatmap

  ##endregion DiffPeaks VS diffGenes

  ##region Step 5 diff peaks motif analysis
  "
  bedtools getfasta -fi ~/Genome/hg19/hg19.fa -bed Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.bed -fo Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fa -name
  bedtools getfasta -fi ~/Genome/hg19/hg19.fa -bed Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.bed -fo Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fa -name

  Tfmotif=~/google/mysoftware/MEME/meme_4.12.0/Database/motif_databases/HUMAN/
  fimo --o Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fimo $Tfmotif/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fa

  fimo --o Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.extra.fimo ~/Chip-seq/ATAC/scATAC/MotifLibrary/20191219_Extra6_meme  Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fa

  ## Run motif saperately
  ln -s /mnt/rstor/genetics/JinLab/ssz20/zshanshan/improve_image/parameter/epoch_test/GM12878_phasing/motif/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme.separate

  mkdir test_individual.Beta
  for file in `ls HOCOMOCOv11_full_HUMAN_mono_meme_format.meme.separate/*`;do
          fimo --oc test_individual.Beta $file Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fa
          cat test_individual.Beta/fimo.txt | grep -v sequence >> Beta.SVM.KNN.filteredFinal.HOCOMOCOv11_full.individual.merge
  done
  "
  CtrlP<-read.table("Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.bed")
  betaT2D.diffPeaks.20bin.LSI<-readRDS("mydir/betaT2D.diffpeak.20bin.LSI.rds")
  beta.all.motif<-read.table("./Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.noblack.fimo/fimo.txt")
  beta.all.motif.sig<-subset(beta.all.motif,V7<1e-5)
  beta.all.motif.sig$V1<-factor(beta.all.motif.sig$V1,levels=unique(beta.all.motif.sig$V1))

  ## Saperate
  beta.all.motif.ind<-read.table("Beta.SVM.KNN.filteredFinal.HOCOMOCOv11_full.individual.merge")
  beta.all.motif.ind.sig<-subset(beta.all.motif.ind,V7<1e-5)
  beta.all.motif.ind.sig$V1<-factor(beta.all.motif.ind.sig$V1,levels=unique(beta.all.motif.ind.sig$V1))

  ##region test p value distribution
beta.all.motif.ind.sample<-beta.all.motif.ind[sample(1:nrow(beta.all.motif.ind),100000),]
beta.all.motif.ind.sample$length<-nchar(as.character(beta.all.motif.ind.sample$V9))
p1<-ggplot(beta.all.motif.ind.sample)+aes(length,-log10(V8),fill=as.factor(length))+geom_violin()+geom_boxplot(size=0.1,color="black")+geom_hline(yintercept=c(1,0.69,0.52))
p2<-ggplot(beta.all.motif.ind.sample)+aes(length,-log10(V7),fill=as.factor(length))+geom_violin()+geom_boxplot(size=0.1,color="black")+geom_hline(yintercept=c(4,5,6,7,8))
p3<-ggplot(beta.all.motif.ind.sample)+aes(length,fill=as.factor(length))+geom_histogram()
##endregion

  UP.MotifResults.quantiled<-Motifenrich.binom.quantile(queryP=row.names(betaT2D.diffPeaks.20bin.LSI$UP),controlP.motif=beta.all.motif.ind,ctrlsize=sum(CtrlP$V3-CtrlP$V2))
# saveRDS(UP.MotifResults.quantiled,"mydir/UP.MotifResults.quantiled")
  DN.MotifResults.quantiled<-Motifenrich.binom.quantile(queryP=row.names(betaT2D.diffPeaks.20bin.LSI$DN),controlP.motif=beta.all.motif.ind,ctrlsize=sum(CtrlP$V3-CtrlP$V2))
# saveRDS(DN.MotifResults.quantiled,"mydir/DN.MotifResults.quantiled")
  UP.MotifResults.quantiled<-readRDS("mydir/UP.MotifResults.quantiled")
  DN.MotifResults.quantiled<-readRDS("mydir/DN.MotifResults.quantiled")

  ##
  UP.MotifResults.binom<-Motifenrich.binom(subset(beta.all.motif.ind.sig,V2 %in% row.names(betaT2D.diffPeaks.20bin.LSI$UP)),beta.all.motif.ind.sig,alt="two.sided")
  DN.MotifResults.binom<-Motifenrich.binom(subset(beta.all.motif.ind.sig,V2 %in% row.names(betaT2D.diffPeaks.20bin.LSI$DN)),beta.all.motif.ind.sig,alt="two.sided")
  subset(UP.MotifResults.binom,qvalue<0.05 & FC>1.2) %>% .[order(.$FC,decreasing=T),] ->UP.toplot
  UP.toplot$Var1<-factor(UP.toplot$Var1,levels=rev(UP.toplot$Var1))
  subset(DN.MotifResults.binom,qvalue<0.05 & FC>1.2) %>% .[order(.$FC,decreasing=T),] ->DN.toplot
  DN.toplot$Var1<-factor(DN.toplot$Var1,levels=rev(DN.toplot$Var1))
##Save this version, motif pvalue cutoff=1e-5, binomtest adn FC cutoff is 0.05, 1.2 respectively
# saveRDS(UP.toplot,"mydir/UP.toplot")
# saveRDS(DN.toplot,"mydir/UP.toplot")
  UP.toplot<-readRDS("mydir/UP.toplot")
  DN.toplot<-readRDS("mydir/UP.toplot")
  ##endregion diff peaks motif analysis

  ##region caRePACT motif analysis using chromvar
  library(Matrix.utils)
  library(chromVAR)
  library(SummarizedExperiment)
  library(Matrix)
  library(universalmotif)
  library(TFBSTools)
  library(motifmatchr)
  library(BSgenome.Hsapiens.UCSC.hg19)
  Beta.all.metadata<-readRDS("mydir/Beta.all.metadata")
  ALL.Beta.ATAC.Mtx<-readRDS("mydir/ALL.Beta.ATAC.Mtx")
  hocomoco.motifsList<-readRDS("mydir/hocomoco.motifsList")
  beta.atac.LSI.withinfo<-readRDS("mydir/beta.atac.LSI.withinfo")
  UP.toplot<-readRDS("mydir/UP.toplot")
  DN.toplot<-readRDS("mydir/UP.toplot")
  beta.atac.LSI.withinfo<-beta.atac.LSI.withinfo[order(beta.atac.LSI.withinfo$pseudo.index.balanced),]
  ALL.Beta.ATAC.Mtx<-ALL.Beta.ATAC.Mtx[which(!row.names(ALL.Beta.ATAC.Mtx) %>% strsplit(.,"_") %>%  sapply(.,length)>3),]
  Chr<-strsplit(row.names(ALL.Beta.ATAC.Mtx),"_") %>% lapply(.,function(x){x[1]}) %>% unlist
  Start<-strsplit(row.names(ALL.Beta.ATAC.Mtx),"_") %>% lapply(.,function(x){x[2]}) %>% unlist %>% as.numeric
  End<-strsplit(row.names(ALL.Beta.ATAC.Mtx),"_") %>% lapply(.,function(x){x[3]}) %>% unlist %>% as.numeric
  peaks<-GRanges(Chr,strand="*",ranges=IRanges(start=Start,end=End))
  fragment_counts <- SummarizedExperiment(assays = list(counts = ALL.Beta.ATAC.Mtx),rowRanges = peaks)
  fragment_counts@colData<-DataFrame(Beta.all.metadata)
  names(fragment_counts@colData)[2]<-"depth"
  fragment_counts <- addGCBias(fragment_counts, genome = BSgenome.Hsapiens.UCSC.hg19)
  counts_filtered <- filterPeaks(fragment_counts)
  motif_ix <- matchMotifs(hocomoco.motifsList, counts_filtered, genome = BSgenome.Hsapiens.UCSC.hg19)
  bg <- getBackgroundPeaks(object = counts_filtered)
  dev <- computeDeviations(object = counts_filtered, annotations = motif_ix,background_peaks = bg)
  Motif.T2D.trj.toplot<-dev@assays@data$z %>% t() %>% Tomerge_v2(.,beta.atac.LSI.withinfo[,c("rank","donor","disease","pseudo.index.balanced")])
# saveRDS(Motif.T2D.trj.toplot,"mydir/Motif.T2D.trj.toplot")
  Motif.T2D.trj.toplot<-readRDS("mydir/Motif.T2D.trj.toplot")
  Motif.T2D.trj.toplot<-Motif.T2D.trj.toplot[complete.cases(Motif.T2D.trj.toplot),]
  BetaCellvsMotif<-Motif.T2D.trj.toplot[,1:775]
  BetaCellMotif.meta<-Motif.T2D.trj.toplot[,776:779]
  ##Check Z score by donor
  # ggplot(Motif.T2D.trj.toplot)+aes_string("donor","FOSL1_HUMAN.H11MO.0.A",fill="disease")+geom_boxplot()
  ##Identify differenal motifs
  ps<-c()
  slopes<-c()
  rsquares<-c()
  for(i in 1:775){
    md<-lm(Motif.T2D.trj.toplot[,i]~Motif.T2D.trj.toplot[,"pseudo.index.balanced"])
    ps<-c(ps,summary(md)$coefficients[2,4])
    slopes<-c(slopes,summary(md)$coefficients[2,1])
    rsquares<-c(rsquares,summary(md)$r.square)
  }
  mds<-data.frame(row.names=colnames(Motif.T2D.trj.toplot)[1:775],ps=ps,slopes=slopes,rsquare=rsquares)
  beta.T2D.motif.200bin<-MakeEvenBin(cellvsPeak.m=BetaCellvsMotif,data.info=BetaCellMotif.meta,binnumber=270)
  # Motif.T2D.trj.toplot[,c("P53_HUMAN.H11MO.0.A","P53_HUMAN.H11MO.1.A","HNF1A_HUMAN.H11MO.0.C","HNF1B_HUMAN.H11MO.0.A", "HNF1B_HUMAN.H11MO.1.A","NDF1_HUMAN.H11MO.0.A","NEUROD1.MA1109.1","NGN2_HUMAN.H11MO.0.D","NDF2_HUMAN.H11MO.0.B","ISL1_HUMAN.H11MO.0.A","pseudo.index.balanced","rank")] %>% melt(.,id.vars=c("rank","pseudo.index.balanced")) %>% ggplot()+aes(rank,variable,fill=value)+geom_tile()+scale_fill_gradient(low="slateblue4",high="gold",lim=c(0,1.5),oob=scales::squish)
  upmotif.confident<-row.names(head(mds[order(mds$slopes,decreasing=T),],50)) %>% .[order(.)] %>% .[. %in% UP.toplot$Var1]
  dnmotif.confident<-row.names(head(mds[order(mds$slopes,decreasing=F),],50)) %>% .[order(.)] %>% .[. %in% DN.toplot$Var1]
  # write.csv(upmotif.confident,"upmotif.confident.csv")
  # write.csv(dnmotif.confident,"dnmotif.confident.csv")
  upmotif.confident<-read.csv("upmotif.confident.sort.csv",header=F)$V1 %>% as.character
  dnmotif.confident<-rev(read.csv("dnmotif.confident.sort.csv",header=F)$V1)  %>% as.character
  #Plot motif chromVar heatmap
  motifheat.confident.toplot<-beta.T2D.motif.200bin[,c(upmotif.confident,dnmotif.confident,"bin")] %>% melt(.,id.vars=c("bin"))
  motifheat.confident.toplot$variable<-strsplit(as.character(motifheat.confident.toplot$variable),"\\.|_") %>% sapply(.,function(x){paste(x[1],x[4],x[5],sep=".")})
  motifheat.confident.toplot$variable<-factor(motifheat.confident.toplot$variable,levels=unique(motifheat.confident.toplot$variable))
  p.motifheat.confident<-ggplot(motifheat.confident.toplot)+aes(bin,variable,fill=value)+geom_tile()+scale_fill_gradient(low="slateblue4",high="gold",lim=c(-0.5,0.5),oob=scales::squish)+theme_bw()
  #Plot motif enrichment using my previous method
  UP.toplot.confident<-UP.toplot[match(upmotif.confident,UP.toplot$Var1),]
  UP.toplot.confident$Var1<-factor(UP.toplot.confident$Var1,levels=UP.toplot.confident$Var1)
  p.UP.toplot.confident<-ggplot(UP.toplot.confident)+aes(FC,Var1,fill=-log10(qvalue))+geom_bar(stat="identity",color="black")+scale_fill_gradient(low="white",high="red",lim=c(2,8),oob=scales::squish)+theme_bw()+theme(axis.text=element_text(size=12,color="black"))
  #Plot motif enrichment bargraph using my previous method
  DN.toplot.confident<-DN.toplot[match(dnmotif.confident,DN.toplot$Var1),]
  DN.toplot.confident$Var1<-factor(DN.toplot.confident$Var1,levels=DN.toplot.confident$Var1)
  p.DN.toplot.confident<-ggplot(DN.toplot.confident)+aes(FC,Var1,fill=-log10(qvalue))+geom_bar(stat="identity",color="black")+scale_fill_gradient(low="white",high="purple",lim=c(2,8),oob=scales::squish)+theme_bw()+theme(axis.text=element_text(size=12,color="black"))
  #Plot motif logos
  library(universalmotif)
  library(ggseqlogo)
  Hocomoco<-read_meme("~/google/mysoftware/MEME/meme_4.12.0/Database/motif_databases/HUMAN/HOCOMOCOv11_full_HUMAN_mono_meme_format.meme")
  motifs<-list()
  for (drawM in Hocomoco[match(rev(c(upmotif.confident,dnmotif.confident)),sapply(Hocomoco,function(x){x@name}))]){
    motif<-drawM@name
    p<-ggseqlogo(drawM@motif)+theme_void()
    motifs<-c(motifs,list(p))
  }
  #Plot out figures
  pdf("caRePCT.confi.motiflogos.pdf",width=2.5,height=24)
  grid.arrange(grobs=motifs,ncol=1)
  dev.off()
  pdf("caRePACT.Confi.motif.pdf")
  print(p.motifheat.confident)
  print(p.UP.toplot.confident)
  print(p.DN.toplot.confident)
  dev.off()
    ##region Double-check quantile results
    UP.MotifResults.quantiled<-readRDS("mydir/UP.MotifResults.quantiled")
    DN.MotifResults.quantiled<-readRDS("mydir/DN.MotifResults.quantiled")
      pdf("UP.MotifResults.quantiled.cnfdt.pdf")
        for(upmotif in upmotif.confident){
            p<-ggplot(UP.MotifResults.quantiled[[upmotif]])+aes(rank,FC,color=-log10(binom.pvalue),label=Motif.qval)+geom_point(size=4)+scale_color_gradient(low="white",high="red",lim=c(2,10),oob=scales::squish)+geom_hline(yintercept=c(1,1.2,1.5))+geom_text_repel(color="black")+ggtitle(upmotif)+theme_bw()
            p.ctrl<-ggplot(DN.MotifResults.quantiled[[upmotif]])+aes(rank,FC,color=-log10(binom.pvalue),label=Motif.qval)+geom_point(size=4)+scale_color_gradient(low="white",high="blue",lim=c(2,10),oob=scales::squish)+geom_hline(yintercept=c(1,1.2,1.5))+geom_text_repel(color="black")+ggtitle(paste("up motifs on DN-peaks_",upmotif,sep=""))+theme_bw()
        print(p)
        print(p.ctrl)
      }
      dev.off()

      pdf("DN.MotifResults.quantiled.cnfdt.pdf")
      for(dnmotif in dnmotif.confident){
        p<-ggplot(DN.MotifResults.quantiled[[dnmotif]])+aes(rank,FC,color=-log10(binom.pvalue),label=Motif.qval)+geom_point(size=4)+scale_color_gradient(low="white",high="blue",lim=c(2,10),oob=scales::squish)+geom_hline(yintercept=c(1,1.2,1.5))+geom_text_repel(color="black")+ggtitle(dnmotif)+theme_bw()
        p.ctrl<-ggplot(UP.MotifResults.quantiled[[dnmotif]])+aes(rank,FC,color=-log10(binom.pvalue),label=Motif.qval)+geom_point(size=4)+scale_color_gradient(low="white",high="red",lim=c(2,10),oob=scales::squish)+geom_hline(yintercept=c(1,1.2,1.5))+geom_text_repel(color="black")+ggtitle(dnmotif)+theme_bw()
        print(p)
        print(p.ctrl)
      }
      dev.off()
  ##endregion Double-check quantile results

  ##endregion

  ##region caRePACT motif network analysis
  #Load motif-Genename dictionary
  TF.name.dic<-read.delim("human_mono_motifs.tsv")
  TF.name.dic$GENE<-strsplit(as.character(TF.name.dic$Transcription.factor),":") %>% sapply(.,function(x){x[2]})
  row.names(TF.name.dic)<-TF.name.dic$Model
  #Load cinfident up/dn T2D motifs
  upmotif.confident<-read.csv("upmotif.confident.sort.csv",header=F)$V1 %>% as.character
  dnmotif.confident<-rev(read.csv("dnmotif.confident.sort.csv",header=F)$V1)  %>% as.character
  #Load RNA rePACT result
  betT2D.diffGenes.20binNew<-readRDS("mydir/betT2D.diffGenes.20binNew")
  up.dn.motif.genes<-rev(unique(TF.name.dic[c(upmotif.confident,dnmotif.confident),]$GENE))
  # write.csv(up.dn.motif.genes,"up.dn.motif.cnfdt.genes.csv")
  up.dn.motif.genes.curated<-read.csv("up.dn.motif.cnfdt.genes.curate.csv",header=F)
  row.names(up.dn.motif.genes.curated)<-up.dn.motif.genes.curated$V1
  up.dn.motif.genes.curated$V1<-factor(up.dn.motif.genes.curated$V1,levels=up.dn.motif.genes.curated$V1)
  RNArePCT.up.dn.motif.genes.curated<-Tomerge_v2(up.dn.motif.genes.curated,betT2D.diffGenes.20binNew$pseudoregress.all[,c("slope","qvalue","MaxRPKM")],leavex=T) %>% .[order(.$V1),]
  subset(RNArePCT.up.dn.motif.genes.curated,qvalue<=0.2)
  KeyVariableTFs<-rev(c("HNF1A","HNF1B","RFX6","ZBTB7A","MBD2","TCF4","CEBPD","STAT3","PPARD","NFIA","NFIC","NFYA","NFYC","TP53","MAFA","ISL1","OLIG3","NEUROD1"))
  KeyVariableTF.toplot<-betT2D.diffGenes.20binNew$UPDN.toplot[,KeyVariableTFs]
  KeyVariableTF.toplot.m<-apply(KeyVariableTF.toplot,2,function(x){(x-mean(x))/sd(x)}) %>% melt()
  pdf("KeyVariableTF.expr.pdf",height=4)
  ggplot(KeyVariableTF.toplot.m)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient(low="white",high="orange",limit=c(-1,2),oob=scales::squish)+theme_bw()
  dev.off()

  betaT2D.diffPeaks.20bin.LSI<-readRDS("mydir/betaT2D.diffpeak.20bin.LSI.rds")
  beta.all.motif.ind<-read.table("Beta.SVM.KNN.filteredFinal.HOCOMOCOv11_full.individual.merge")
  beta.all.motif.ind.sig<-subset(beta.all.motif.ind,V7<1e-5)
  #Load peak annotation with HiC
  # Beta.Peakannotation<-read.delim("Beta.SVM.KNN.filteredFinal_peaks.narrowPeak.bed.annotated")
  # row.names(Beta.Peakannotation)<-paste(Beta.Peakannotation[,"Chr"],(Beta.Peakannotation[,"Start"]-1),Beta.Peakannotation[,"End"],sep="_")
  # Beta.Peakannotation<-Beta.Peakannotation[,c("Annotation","Distance.to.TSS","Gene.Name")]
  # Beta.Peakannotation$Annotation<-strsplit(as.character(Beta.Peakannotation$Annotation)," (",fix=T) %>% sapply(.,function(x){x[[1]]})
  Beta.Peakannotation.HiC<-readRDS("mydir/Beta.Peakannotation.HiC")
  names(Beta.Peakannotation.HiC)[1]<-"Peaks"
  TF.keys<-c("HNF1A","RFX6","ZBTB7A","MBD2","TCF4","CEBPD","STAT3","PPARD","NFIA","NFYA","TP53","MAFA","ISL1","OLIG3","NEUROD1")
  motifs.lst=list(c("HNF1A_HUMAN.H11MO.0.C","HNF1B_HUMAN.H11MO.0.A","HNF1B_HUMAN.H11MO.1.A"),
  c("RFX1_HUMAN.H11MO.0.B","RFX2_HUMAN.H11MO.0.A","RFX1_HUMAN.H11MO.1.B","RFX2_HUMAN.H11MO.1.A","RFX3_HUMAN.H11MO.0.B","RFX4_HUMAN.H11MO.0.D"),c("ZBT7A_HUMAN.H11MO.0.A"),
  c("MBD2_HUMAN.H11MO.0.B"),
  c("ITF2_HUMAN.H11MO.0.C"),
  c("CEBPZ_HUMAN.H11MO.0.D"),
  c("STAT3_HUMAN.H11MO.0.A","STAT1_HUMAN.H11MO.0.A"),
  c("PPARA_HUMAN.H11MO.1.B"),
  c("NFIC_HUMAN.H11MO.1.A","NFIC_HUMAN.H11MO.0.A","NFIA_HUMAN.H11MO.0.C"),
  c("NFYA_HUMAN.H11MO.0.A","NFYB_HUMAN.H11MO.0.A","NFYC_HUMAN.H11MO.0.A"),
  c("MAF_HUMAN.H11MO.0.A","MAFA_HUMAN.H11MO.0.D","MAFB_HUMAN.H11MO.0.B","MAFG_HUMAN.H11MO.0.A"),
  c("ISL1_HUMAN.H11MO.0.A"),
  c("OLIG2_HUMAN.H11MO.1.B","OLIG2_HUMAN.H11MO.0.B"),
  c("NDF2_HUMAN.H11MO.0.B","NDF1_HUMAN.H11MO.0.A","NGN2_HUMAN.H11MO.0.D")
  )
  Directions<-c(rep("DN",4),rep("UP",10))

  Links.all<-c()
  Nodes.all<-c()
  for(i in 1:14){
  TF.cur<-TF.keys[i]
  PeakDir<-Directions[i]
  motifs<-motifs.lst[[i]]
  beta.all.motif.ind.sig.test<-subset(beta.all.motif.ind.sig,V1 %in% motifs)
  PeakMotifGene.tmp<-data.frame(slope=betaT2D.diffPeaks.20bin.LSI[[PeakDir]]$slope,Peaks=row.names(betaT2D.diffPeaks.20bin.LSI[[PeakDir]])) %>% merge(.,beta.all.motif.ind.sig.test[,c("V1","V2")],by.x="Peaks",by.y="V2") %>% merge(.,Beta.Peakannotation.HiC,by="Peaks")
  TopRePACT.genes<-subset(betT2D.diffGenes.20binNew$pseudoregress.all[!row.names(betT2D.diffGenes.20binNew$pseudoregress.all) %in% KeyVariableTFs,],qvalue<0.005) %>% rbind(.,subset(betT2D.diffGenes.20binNew$pseudoregress.all[KeyVariableTFs,],qvalue<=0.2))
  Gene.near.peaks<-subset(PeakMotifGene.tmp,Gene.near %in% row.names(TopRePACT.genes)) %>% .[,c("Peaks","Gene.near")] %>% .[!duplicated(.),] %>% cbind(.,slope=TopRePACT.genes[as.character(.$Gene.near),"slope"]) %>% .[order(.$Gene.near),]
  Gene.loop.peaks<-subset(PeakMotifGene.tmp,Gene.loop %in% row.names(TopRePACT.genes) & abs(Dis.to.Tss.loop)<10000) %>% .[,c("Peaks","Gene.loop")] %>% .[!duplicated(.),] %>% cbind(.,slope=TopRePACT.genes[as.character(.$Gene.loop),"slope"]) %>% .[order(.$Gene.loop),]
  Regulatee<-unique(c(as.character(Gene.near.peaks$Gene.near),as.character(Gene.loop.peaks$Gene.loop)))
  Regulatee.info<-data.frame(Regulatee,Local=sapply(Regulatee,function(x){length(which(Gene.near.peaks$Gene.near==x))}),Loop=sapply(Regulatee,function(x){length(which(Gene.loop.peaks$Gene.loop==x))}))
  Regulatee.info$Total<-Regulatee.info$Local+Regulatee.info$Loop
  Regulatee.info$Tag<-apply(Regulatee.info,1,function(x){if(x[2]>0 &x[3]==0){return("Local")}else if(x[2]==0 &x[3]>0){return("Loop")}else{return("Local_Loop")}})
  if(nrow(Regulatee.info)==0){next}
  link<-data.frame(Regulator=TF.cur,Regulatee.info,cat=PeakDir)
  Nodes<-data.frame(Nodes=c(TF.cur,row.names(Regulatee.info))) %>% cbind(.,TopRePACT.genes[as.character(.$Nodes),c("slope","qvalue")],cat=PeakDir)
  Links.all<-rbind(Links.all,link)
  Nodes.all<-rbind(Nodes.all,Nodes)
}

Nodes.all<-Nodes.all[!duplicated(Nodes.all),]
TFtag<-c()
TFtag[which(Nodes.all$Nodes %in% TFvector)]<-"TF"
TFtag[which(!Nodes.all$Nodes %in% TFvector)]<-"NTF"
Nodes.all$TFtag<-TFtag
# saveRDS(Links.all,"mydir/Links.all")
# saveRDS(Nodes.all,"mydir/Nodes.all")
Links.all<-readRDS("mydir/Links.all")
Nodes.all<-readRDS("mydir/Nodes.all")
  ##Make an igraph object
  ##Filter by credible evidence first
  UP.credible<-readRDS("mydir/UP.credible")
  DN.credible<-readRDS("mydir/DN.credible")

  DN.toRemove<-row.names(subset(Nodes.all,cat=="DN"))[row.names(subset(Nodes.all,cat=="DN")) %in% row.names(subset(UP.credible,(X1-X2)>=0))]
  DN.toRemove.2<-row.names(subset(Nodes.all,slope>=0))

  net.dn<- graph_from_data_frame(d=subset(Links.all,cat=="DN" & !Regulatee %in% DN.toRemove.2), vertices=subset(Nodes.all,cat=="DN" & !Nodes %in% DN.toRemove.2), directed=T)
  V(net.dn)$size <- 3
  tkid <- tkplot(net.dn) #tkid is the id of the tkplot that will open
  l.dn <- tkplot.getcoords(tkid)
  # saveRDS(tkid,"mydir/tkid.ldn")
  # saveRDS(l.dn,"mydir/l.dn")
  l.dn<-readRDS("mydir/l.dn")
  tk_close(tkid, window.close = T)
  V(net.dn)$shape<-c("circle","square")[as.numeric(mapvalues(V(net.dn)$TFtag,from=c("TF","NTF"),to=c(1,2)))]
  V(net.dn)$color<-ifelse(V(net.dn)$slope<0,"steelblue","gold")
  E(net.dn)$color<-mapvalues(E(net.dn)$Tag,from=c("Local","Loop","Local_Loop"),to=c("palegreen","orange","darkred"))
  # V(net.dn)$label.family<-"Arial"
  V(net.dn)$label.cex<-1.5
  # E(net.dn)$width<-2*E(net.dn)$Total
  pdf("T2D.Dn.network.2.pdf",height=10,width=20)
plot(net.dn,edge.arrow.size=0.5,vertex.label.size=0.5,edge.width=2.5,vertex.size=3,vertex.label.dist	 =1,vertex.label.color="black",dge.curved=0.5,layout=l.dn,asp=0.5,vertex.label.degree=-pi/2)
dev.off()
UP.toRemove<-c(row.names(subset(Nodes.all,cat=="UP"))[row.names(subset(Nodes.all,cat=="UP")) %in% row.names(subset(DN.credible,(X1-X2)<=0))],"RFX6")
UP.toRemove.2<-row.names(subset(Nodes.all,slope<0))
UP.toRemove.3<-subset(Nodes.all,slope>0) %>% subset(!Nodes %in% KeyVariableTFs) %>% subset(.,qvalue>0.0001) %>% row.names
net.up<- graph_from_data_frame(d=subset(Links.all,cat=="UP" & !Regulatee %in% c(UP.toRemove.2,UP.toRemove.3)), vertices=subset(Nodes.all,cat=="UP" & !Nodes %in% c(UP.toRemove.2,UP.toRemove.3)), directed=T)
V(net.up)$size <- 3
tkid <- tkplot(net.up) #tkid is the id of the tkplot that will open
l.up <- tkplot.getcoords(tkid)
tk_close(tkid, window.close = T)
V(net.up)$shape<-c("circle","square")[as.numeric(mapvalues(V(net.up)$TFtag,from=c("TF","NTF"),to=c(1,2)))]
V(net.up)$color<-ifelse(V(net.up)$slope<0,"steelblue","purple")
E(net.up)$color<-mapvalues(E(net.up)$Tag,from=c("Local","Loop","Local_Loop"),to=c("palegreen","orange","darkred"))
# V(net.up)$label.family<-"Arial"
V(net.up)$label.cex<-1.5
# E(net.up)$width<-2*E(net.up)$Total
pdf("T2D.up.network.2.pdf",height=10,width=20)
plot(net.up,edge.arrow.size=0.5,vertex.label.size=0.5,edge.width=2.5,vertex.size=3,vertex.label.dist	 =1,vertex.label.color="black",dge.curved=0.5,layout=l.up,asp=0.5,vertex.label.degree=-pi/2)
dev.off()

net.all<- graph_from_data_frame(d=subset(Links.all,cat=="DN" & !Regulatee %in% DN.toRemove), vertices=subset(Nodes.all,cat=="DN" & !Nodes %in% DN.toRemove), directed=T)
l <- layout_with_fr(net.all)
V(net.all)$shape<-c("circle","square")[as.numeric(mapvalues(V(net.all)$TFtag,from=c("TF","NTF"),to=c(1,2)))]
V(net.all)$color<-ifelse(V(net.all)$slope<0,"steelblue","purple")
E(net.all)$color<-mapvalues(E(net.all)$Tag,from=c("Local","Loop","Local_Loop"),to=c("palegreen","orange","darkred"))
# V(net.up)$label.family<-"Arial"
V(net.all)$label.cex<-0.8
plot(net.all,edge.arrow.size=0.5,edge.width=2.5,vertex.size=3,vertex.label.dist	 =1,vertex.label.color="black",dge.curved=0.5,layout=l,asp=0.5,vertex.label.degree=-pi/2)


  ##endregion caRePACT motif network analysis

  ##region Study T2D fine-mapping signals

    ##region Make tracks
    #Make a bed track for all up-peaks and all down peaks
  betaT2D.diffPeaks.20bin.LSI<-readRDS("mydir/betaT2D.diffpeak.20bin.LSI.rds")
  Up.Peaks<-betaT2D.diffPeaks.20bin.LSI$UP[sapply(strsplit(row.names(betaT2D.diffPeaks.20bin.LSI$UP),"_"),function(x){length(x)})==3,]
  Up.Peaks$Peak<-paste(paste("UP.Peak",1:nrow(Up.Peaks),sep=""),round(Up.Peaks$slope,digits=2),sep="_")
  Up.Peaks.bed<-as.data.frame(strsplit(row.names(Up.Peaks),"_") %>% do.call(rbind,.)) %>% cbind(.,Peak=Up.Peaks$Peak)
  Up.Peaks.bed$V2<-as.numeric(as.character(Up.Peaks.bed$V2))
  Up.Peaks.bed$V3<-as.numeric(as.character(Up.Peaks.bed$V3))
  Up.Peaks.bed<-Up.Peaks.bed[order(Up.Peaks.bed$V1,Up.Peaks.bed$V2),]
  DN.Peaks<-betaT2D.diffPeaks.20bin.LSI$DN[sapply(strsplit(row.names(betaT2D.diffPeaks.20bin.LSI$DN),"_"),function(x){length(x)})==3,]
  DN.Peaks$Peak<-paste(paste("DN.Peak",1:nrow(DN.Peaks),sep=""),abs(round(DN.Peaks$slope,digits=2)),sep="_")
  DN.Peaks.bed<-as.data.frame(strsplit(row.names(DN.Peaks),"_") %>% do.call(rbind,.)) %>% cbind(.,Peak=DN.Peaks$Peak)
  DN.Peaks.bed$V2<-as.numeric(as.character(DN.Peaks.bed$V2))
  DN.Peaks.bed$V3<-as.numeric(as.character(DN.Peaks.bed$V3))
  DN.Peaks.bed<-DN.Peaks.bed[order(DN.Peaks.bed$V1,DN.Peaks.bed$V2),]
  write.table(DN.Peaks.bed,"T2D.DN.peaks.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(Up.Peaks.bed,"T2D.UP.peaks.bed",sep="\t",quote=F,col.names=F,row.names=F)
    #Make a bed track for key TF motif putative peaks
  TF.keys<-c("HNF1A","RFX6","ZBTB7A","MBD2","TCF4","CEBPD","STAT3","PPARD","NFIA","NFYA","TP53","MAFA","ISL1","OLIG3","NEUROD1")
  motifs.lst=list(c("HNF1A_HUMAN.H11MO.0.C","HNF1B_HUMAN.H11MO.0.A","HNF1B_HUMAN.H11MO.1.A"),
  c("RFX1_HUMAN.H11MO.0.B","RFX2_HUMAN.H11MO.0.A","RFX1_HUMAN.H11MO.1.B","RFX2_HUMAN.H11MO.1.A","RFX3_HUMAN.H11MO.0.B","RFX4_HUMAN.H11MO.0.D"),c("ZBT7A_HUMAN.H11MO.0.A"),
  c("MBD2_HUMAN.H11MO.0.B"),
  c("ITF2_HUMAN.H11MO.0.C"),
  c("CEBPZ_HUMAN.H11MO.0.D"),
  c("STAT3_HUMAN.H11MO.0.A","STAT1_HUMAN.H11MO.0.A"),
  c("PPARA_HUMAN.H11MO.1.B"),
  c("NFIC_HUMAN.H11MO.1.A","NFIC_HUMAN.H11MO.0.A","NFIA_HUMAN.H11MO.0.C"),
  c("NFYA_HUMAN.H11MO.0.A","NFYB_HUMAN.H11MO.0.A","NFYC_HUMAN.H11MO.0.A"),
  c("MAF_HUMAN.H11MO.0.A","MAFA_HUMAN.H11MO.0.D","MAFB_HUMAN.H11MO.0.B","MAFG_HUMAN.H11MO.0.A"),
  c("ISL1_HUMAN.H11MO.0.A"),
  c("OLIG2_HUMAN.H11MO.1.B","OLIG2_HUMAN.H11MO.0.B"),
  c("NDF2_HUMAN.H11MO.0.B","NDF1_HUMAN.H11MO.0.A","NGN2_HUMAN.H11MO.0.D")
  )
  ##region function PeakName2Bed
  PeakName2Bed<-function(Name){
  Name<-as.character(Name)[sapply(strsplit(as.character(Name),"_"),function(x){length(x)})==3]
  bed<-as.data.frame(strsplit(as.character(Name),"_") %>% do.call(rbind,.))
  bed$V2<-as.numeric(as.character(bed$V2))
  bed$V3<-as.numeric(as.character(bed$V3))
  bed<-bed[order(bed$V1,bed$V2),]
  return(bed)
  }
  ##endregion
  Directions<-c(rep("DN",4),rep("UP",10))
  for(i in 1:14){
  TF.cur<-TF.keys[i]
  PeakDir<-Directions[i]
  motifs<-motifs.lst[[i]]
  beta.all.motif.ind.sig.test<-subset(beta.all.motif.ind.sig,V1 %in% motifs)
  cur.bed<-PeakName2Bed(unique(beta.all.motif.ind.sig.test$V2))
  write.table(cur.bed,paste(TF.cur,"Motifs.Peaks.bed",sep="."),sep="\t",quote=F,col.names=F,row.names=F)
  }
  ## Make interval bed for T2D trajectory genes
  betT2D.diffGenes.20binNew<-readRDS("mydir/betT2D.diffGenes.20binNew")
  brief.gene<-read.table("~/Genome/hg19/hg19.refFlat.extreme.110K_40K.bed")[,1:4]
  bin20.g.up<-subset(betT2D.diffGenes.20binNew$UP,qvalue<0.005 & MaxRPKM>quantile(betT2D.diffGenes.20binNew$pseudoregress.all$MaxRPKM,0.25))
  bin20.g.dn<-subset(betT2D.diffGenes.20binNew$DN,qvalue<0.005 & MaxRPKM>quantile(betT2D.diffGenes.20binNew$pseudoregress.all$MaxRPKM,0.25))
  upgene<-data.frame(gene=row.names(bin20.g.up),name=paste(row.names(bin20.g.up),1:nrow(bin20.g.up),round(bin20.g.up$slope,digit=2),sep="_"))
  dngene<-data.frame(gene=row.names(bin20.g.dn),name=paste(row.names(bin20.g.dn),1:nrow(bin20.g.dn),round(bin20.g.dn$slope,digit=2),sep="_"))
  upgene.bed<-merge(brief.gene,upgene,by.x="V4",by.y="gene")[,2:5] %>% .[order(.$V1,.$V2),]
  dngene.bed<-merge(brief.gene,dngene,by.x="V4",by.y="gene")[,2:5] %>% .[order(.$V1,.$V2),]
  write.table(upgene.bed,"T2D.UP.genes.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(dngene.bed,"T2D.DN.genes.bed",sep="\t",quote=F,col.names=F,row.names=F)
  "
      for bed in `ls | grep Motifs.Peaks`
      do
      bedToBigBed  $bed ~/Genome/hg19/hg19.chrom.sizes ${bed/.bed/.bb}
      done

      for bed in {T2D.DN.peaks.bed,T2D.UP.peaks.bed}
      do
      bedToBigBed  $bed ~/Genome/hg19/hg19.chrom.sizes ${bed/.bed/.bb}
      done

      for bed in {T2D.DN.genes.bed,T2D.UP.genes.bed}
      do
      bedToBigBed  $bed ~/Genome/hg19/hg19.chrom.sizes ${bed/.bed/.bb}
      done

for file in `ls |grep "Motifs.Peaks.bb\|T2D.**.peaks.bb"`;   # {T2D.UP.genes.bb,T2D.DN.genes.bb}
do
cp $file ~/../fxj45/WWW/CW/scATAC2019/
echo -ne "track type=bigBed name=$file description=$file visibility=dense bigDataUrl=http://intron.cwru.edu/~fxj45/CW/scATAC2019/$file\n" >> tract.info
done
  "

    ##endregion

    ##region Overlap analysis and enrichment
    files<-list.files()[grep("txt",list.files())]
    T2Dfinemap.bed.meta.full<-c()
    for (file in files){
      signal.Name<-strsplit(file,"_") %>% lapply(.,function(x){x[5:7]}) %>% unlist %>% paste(.,collapse="_") %>% gsub(".txt","",.)
      tmp<-read.table(file,header=T)
      bed.meta<-data.frame(chr=paste("chr",tmp$Chr,sep=""),begin=tmp$Pos-1,end=tmp$Pos,Name=paste(signal.Name,tmp$Pos,sep="."),PPAg=tmp$PPAg,signal=signal.Name)
      T2Dfinemap.bed.meta.full<-rbind(T2Dfinemap.bed.meta.full,bed.meta)
    }
  ALL.Beta.ATAC.Mtx<-readRDS("mydir/ALL.Beta.ATAC.Mtx")
  ALL.Beta.ATAC.peak.bed<-PeakName2Bed(row.names(ALL.Beta.ATAC.Mtx))
  ALL.Beta.ATAC.peak.bed$Peak<-paste(ALL.Beta.ATAC.peak.bed$V1,ALL.Beta.ATAC.peak.bed$V2,ALL.Beta.ATAC.peak.bed$V3,sep="_")
  setwd("~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track")
  write.table(T2Dfinemap.bed.meta.full[,1:4],"T2Dfinemap.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(ALL.Beta.ATAC.peak.bed,"ALL.Beta.ATAC.peak.bed",sep="\t",quote=F,col.names=F,row.names=F)
  #Write out the featured peaks for randomization
  setwd("~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/ALL.Beta.ATAC.peak.bed/RandomPeakforBeta")
  write.table(PeakName2Bed(UP.all.peaks),"Beta.atacpeak.UP.all.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(PeakName2Bed(UP.ov.bulk.peaks),"Beta.atacpeak.UP.ovBulk.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(PeakName2Bed(UP.RESTbulk.peaks),"Beta.atacpeak.UP.REST.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(PeakName2Bed(DN.all.peaks),"Beta.atacpeak.DN.all.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(PeakName2Bed(DN.ov.bulk.peaks),"Beta.atacpeak.DN.ovBulk.bed",sep="\t",quote=F,col.names=F,row.names=F)
  write.table(PeakName2Bed(DN.RESTbulk.peaks),"Beta.atacpeak.DN.REST.bed",sep="\t",quote=F,col.names=F,row.names=F)

  "
  bedtools intersect -a T2Dfinemap.bed -b ALL.Beta.ATAC.peak.bed -wa -wb -loj >T2Dfinemap.ALL.Beta.ATAC.peak
  ##Make a randome total peaks
  mkdir RandomPeakforBeta
  cd ~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/ALL.Beta.ATAC.peak.bed/RandomPeakforBeta
  for i in {1..1000}
  do
  echo $i
  bedtools shuffle -i ~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/ALL.Beta.ATAC.peak.bed -g ~/Genome/hg19/hg19.chrom.sizes | cut -f1-3> random.$i.forALL.Beta.ATAC.peak.bed
  bedtools intersect -a ~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/T2Dfinemap.bed -b random.$i.forALL.Beta.ATAC.peak.bed -wa -wb -loj >T2Dfinemap.random.$i
  done
  # Make random bed for feature(up/down etc) peaks
  for file in `ls | grep Beta.atacpeak`
  do
  echo $file
    for i in {1..1000}
    do
    echo $i
    bedtools shuffle -i $file -g ~/Genome/hg19/hg19.chrom.sizes | cut -f1-3> tmp.random
    wc -l tmp.random
    bedtools intersect -a ~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/T2Dfinemap.bed -b tmp.random -wa -wb -loj >$file.random.$i
    done
  done
  "
  ## Make random set under Unchanged beta peaks
  Unchange.peaks.bed<-PeakName2Bed(Unchange.peaks)
  peaklist<-list(UP.all.peaks,UP.ov.bulk.peaks,UP.RESTbulk.peaks,DN.all.peaks,DN.ov.bulk.peaks,DN.RESTbulk.peaks)
  catNames<-c("UP.all.peaks","UP.ov.bulk.peaks","UP.RESTbulk.peaks","DN.all.peaks","DN.ov.bulk.peaks","DN.RESTbulk.peaks")
for(catN in 1:6){
  rows<-length(peaklist[[catN]])
  for(i in 1:10000){
    print(i)
  Unchange.peaks.bed.sample<-Unchange.peaks.bed[sample(1:nrow(Unchange.peaks.bed),rows),]
  write.table(Unchange.peaks.bed.sample,paste(catNames[catN],"RandomUnchanged",i,sep="."),sep="\t",quote=F,col.names=F,row.names=F)
  }
}
"
for file in `ls | grep RandomUnchanged`
do
echo $file
  bedtools intersect -a ~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/T2Dfinemap.bed -b $file -wa -wb -loj >$file.T2Dfine
done
"

  ##Prepare dataframes needed for enrichment analysis
  setwd("/mnt/rstor/genetics/JinLab/cxw486/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track")
  T2Dfinemap.ALL.Beta.ATAC.peak<-read.table("T2Dfinemap.ALL.Beta.ATAC.peak")
  betaT2D.diffPeaks.repact.bulk<-readRDS("mydir/betaT2D.diffPeaks.repact.bulk")
  Beta.Peakannotation.HiC<-readRDS("mydir/Beta.Peakannotation.HiC")
  ## Collect different categories of peaks major
  ALLpeaks<-row.names(betaT2D.diffPeaks.repact.bulk)
  UP.all.peaks<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="UP") %>% row.names
  UP.ov.bulk.peaks<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="UP" & deseq0.05=="bulk.up") %>% row.names
  UP.RESTbulk.peaks<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="UP" & deseq0.05!="bulk.up") %>% row.names
  UP.ConcordGene.peaks<-unique(subset(Beta.Peakannotation.HiC,Gene.near %in% upgene$gene | Gene.loop %in% upgene$gene)$Peak) %>% intersect(.,UP.all.peaks)
  DN.all.peaks<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="DN") %>% row.names
  DN.ov.bulk.peaks<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="DN" & deseq0.05=="bulk.dn") %>% row.names
  DN.RESTbulk.peaks<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="DN" & deseq0.05!="bulk.dn") %>% row.names
  DN.ConcordGene.peaks<-unique(subset(Beta.Peakannotation.HiC,Gene.near %in% dngene$gene | Gene.loop %in% dngene$gene)$Peak) %>% intersect(.,DN.all.peaks)
  Unchange.peaks<-setdiff(ALLpeaks,c(UP.all.peaks,DN.all.peaks))
  P.collect<-list(ALLpeaks=ALLpeaks,Unchange.peaks=Unchange.peaks,UP.all.peaks=UP.all.peaks,UP.ov.bulk.peaks=UP.ov.bulk.peaks,UP.RESTbulk.peaks=UP.RESTbulk.peaks,UP.ConcordGene.peaks=UP.ConcordGene.peaks,DN.all.peaks=DN.all.peaks,DN.ov.bulk.peaks=DN.ov.bulk.peaks,DN.RESTbulk.peaks=DN.RESTbulk.peaks,DN.ConcordGene.peaks=DN.ConcordGene.peaks)
  ## Collect different categories of peaks(rank by peak q value)
  P.UP.rank.collect<-list()
  breaks<-as.integer(seq(1,length(UP.all.peaks),length.out=10))
  for (i in 1:9){
    peak.bin<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="UP") %>% .[order(.$qvalue),] %>% .[breaks[i]:breaks[(i+1)],] %>% row.names()
    P.UP.rank.collect<-c(P.UP.rank.collect,list(peak.bin))
  }
  names(P.UP.rank.collect)<-paste("UP.Top",1:9,sep="")
  P.DN.rank.collect<-list()
  breaks<-as.integer(seq(1,length(DN.all.peaks),length.out=10))
  for (i in 1:9){
    peak.bin<-subset(betaT2D.diffPeaks.repact.bulk,caRePACTpeaks=="DN") %>% .[order(.$qvalue),] %>% .[breaks[i]:breaks[(i+1)],] %>% row.names()
    P.DN.rank.collect<-c(P.DN.rank.collect,list(peak.bin))
  }
  names(P.DN.rank.collect)<-paste("DN.Top",1:9,sep="")

  ##Run overlap summary
  T2Dfinemap.peak.summary<-c()
  for(peak in P.collect){
    T2Dfinemap.peak.summary<-rbind(T2Dfinemap.peak.summary,T2DsignalSummary(peak))
  }
  row.names(T2Dfinemap.peak.summary)<-names(P.collect)
  T2Dfinemap.peak.summary$SNP.perKB<- with(T2Dfinemap.peak.summary,T2D.SNPs.hits/peak.all.span.kb)
  T2Dfinemap.peak.summary$signal.perKB<- with(T2Dfinemap.peak.summary,T2D.signal.hits/peak.all.span.kb)
  T2Dfinemap.peak.summary$SNP.perPeak<- with(T2Dfinemap.peak.summary,T2D.SNPs.hits/P.number)
  T2Dfinemap.peak.summary$signal.perPeak<- with(T2Dfinemap.peak.summary,T2D.signal.hits/P.number)
  T2Dfinemap.peak.summary$cat<-row.names(T2Dfinemap.peak.summary)
  T2Dfinemap.peak.summary.toplot<-T2Dfinemap.peak.summary[c(2,4,5,8,9),]
  T2Dfinemap.peak.summary.toplot$cat<-factor(T2Dfinemap.peak.summary.toplot$cat,levels=T2Dfinemap.peak.summary.toplot$cat)
  p1<-ggplot(T2Dfinemap.peak.summary.toplot)+aes(cat,SNP.perPeak)+geom_point(shape=1,size=4)+theme_classic()+ylim(0,0.15)+theme(axis.line.y=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.text.x=element_text(color="black"))
  p2<-ggplot(T2Dfinemap.peak.summary.toplot)+aes(cat,SNP.perKB)+geom_point(shape=1,size=4)+theme_classic()+ylim(0,0.15)+theme(axis.line.y=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.text.x=element_text(color="black"))
  p3<-ggplot(T2Dfinemap.peak.summary.toplot)+aes(cat,signal.perPeak)+geom_point(shape=1,size=4)+theme_classic()+ylim(0,0.03)+theme(axis.line.y=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.text.x=element_text(color="black"))
  p4<-ggplot(T2Dfinemap.peak.summary.toplot)+aes(cat,signal.perKB)+geom_point(shape=1,size=4)+theme_classic()+ylim(0,0.03)+theme(axis.line.y=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.text.x=element_text(color="black"))
  ##Calculate the random T2Dfinemap.peak.summary
  T2Dfinemap.randompeak.summary<-c()
  for(i in 1:1000){
    T2Dfinemap.random.peak<-read.table(paste("T2Dfinemap.random.",i,sep=""))
    tmp<-data.frame(P.number=T2Dfinemap.peak.summary["ALLpeaks","P.number"],peak.all.span.kb=T2Dfinemap.peak.summary["ALLpeaks","peak.all.span.kb"],T2D.SNPs.hits=nrow(subset(T2Dfinemap.random.peak,V7!=-1)),T2D.signal.hits=length(unique(sapply(strsplit(as.character(subset(T2Dfinemap.random.peak,V7!=-1)$V4),".",fixed=T),function(x){x[1]}))))
    T2Dfinemap.randompeak.summary<-rbind(T2Dfinemap.randompeak.summary,tmp)
  }

  ##Calculate the matched random
cats<-list(UP.all.peaks,UP.ov.bulk.peaks,UP.RESTbulk.peaks,DN.all.peaks,DN.ov.bulk.peaks,DN.RESTbulk.peaks)
names(cats)<-c("Beta.atacpeak.UP.all.bed","Beta.atacpeak.UP.ovBulk.bed","Beta.atacpeak.UP.REST.bed","Beta.atacpeak.DN.all.bed","Beta.atacpeak.DN.ovBulk.bed","Beta.atacpeak.DN.REST.bed")
T2Dfinemap.randompeak.match.summary<-list()
for (catN in 1:6){
  print(names(cats)[catN])
spanning<-strsplit(cats[[catN]],"_") %>% sapply(.,function(x){as.numeric(as.character(x[3]))-as.numeric(as.character(x[2]))}) %>% .[complete.cases(.)] %>% sum(.)/1000
Summary<-c()
for(i in 1:1000){
  print(i)
  T2Dfinemap.random.peak<-read.table(paste(names(cats)[catN],"random",i,sep="."))
  tmp<-data.frame(P.number=length(cats[[catN]]),peak.all.span.kb=spanning,T2D.SNPs.hits=nrow(subset(T2Dfinemap.random.peak,V7!=-1)),T2D.signal.hits=length(unique(sapply(strsplit(as.character(subset(T2Dfinemap.random.peak,V7!=-1)$V4),".",fixed=T),function(x){x[1]}))))
  Summary<-rbind(Summary,tmp)
}
T2Dfinemap.randompeak.match.summary<-c(T2Dfinemap.randompeak.match.summary,list(Summary))
}
names(T2Dfinemap.randompeak.match.summary)<-names(cats)
saveRDS(T2Dfinemap.randompeak.match.summary,"mydir/T2Dfinemap.randompeak.match.summary")
T2Dfinemap.randompeak.match.summary.rates<-list()
for(element in T2Dfinemap.randompeak.match.summary){
  element$SNP.perKB<-with(element,T2D.SNPs.hits/peak.all.span.kb)
  element$SNP.perPeak<-with(element,T2D.SNPs.hits/P.number)
  element$signal.perKB<-with(element,T2D.signal.hits/peak.all.span.kb)
  element$signal.perPeak<-with(element,T2D.signal.hits/P.number)
  T2Dfinemap.randompeak.match.summary.rates<-c(T2Dfinemap.randompeak.match.summary.rates,list(element))
}
names(T2Dfinemap.randompeak.match.summary.rates)<-c("UP.all.peaks","UP.ov.bulk.peaks","UP.RESTbulk.peaks","DN.all.peaks","DN.ov.bulk.peaks","DN.RESTbulk.peaks")

##Plot  T2Dfinemap.peak.summary
plots<-list()
for(i in 1:6){
  element<-T2Dfinemap.randompeak.match.summary.rates[[i]]
  for(type in c("SNP.perKB","SNP.perPeak","signal.perKB","signal.perPeak")){
    p<-ggplot(element)+aes_string(1,type)+geom_violin()+geom_hline(yintercept=T2Dfinemap.peak.summary[names(T2Dfinemap.randompeak.match.summary.rates)[i],type],linetype=2)+theme_classic()+ggtitle(names(T2Dfinemap.randompeak.match.summary.rates)[i])
    plots<-c(plots,list(p))
  }

}



  p1.random<-ggplot(T2Dfinemap.randompeak.summary)+aes(1,T2D.SNPs.hits/P.number)+geom_violin()+ylim(0,0.15)+theme_classic()
  p2.random<-ggplot(T2Dfinemap.randompeak.summary)+aes(1,T2D.SNPs.hits/peak.all.span.kb)+geom_violin()+ylim(0,0.15)+theme_classic()
  p3.random<-ggplot(T2Dfinemap.randompeak.summary)+aes(1,T2D.signal.hits/P.number)+geom_violin()+ylim(0,0.03)+theme_classic()
  p4.random<-ggplot(T2Dfinemap.randompeak.summary)+aes(1,T2D.signal.hits/peak.all.span.kb)+geom_violin()+ylim(0,0.03)+theme_classic()

  grid.arrange(p1.random,p1,layout_matrix=matrix(c(1,2,2,2,2),nrow=1))
  grid.arrange(p2.random,p2,layout_matrix=matrix(c(1,2,2,2,2),nrow=1))
  grid.arrange(p3.random,p3,layout_matrix=matrix(c(1,2,2,2,2),nrow=1))
  grid.arrange(p4.random,p4,layout_matrix=matrix(c(1,2,2,2,2),nrow=1))
  setwd("~/Chip-seq/ATAC/scATAC/IsletscATAC/Islet12.F.track/")
  pdf("T2Dfinemap.RePACT.peak.enrich.pdf")
  grid.arrange(p3.random,p3,layout_matrix=matrix(c(1,2,2,2,2),nrow=1))
  dev.off()


  ##Run up/down rank summary
  T2Dfinemap.peak.summary.uprank<-c()
  for(peak in P.UP.rank.collect){
    T2Dfinemap.peak.summary.uprank<-rbind(T2Dfinemap.peak.summary.uprank,T2DsignalSummary(peak))
  }
  row.names(T2Dfinemap.peak.summary.uprank)<-names(P.UP.rank.collect)

  T2Dfinemap.peak.summary.dnrank<-c()
  for(peak in P.DN.rank.collect){
    T2Dfinemap.peak.summary.dnrank<-rbind(T2Dfinemap.peak.summary.dnrank,T2DsignalSummary(peak))
  }
  row.names(T2Dfinemap.peak.summary.dnrank)<-names(P.DN.rank.collect)

  T2Dfinemap.peak.summary$T2DsnpsPerP<-T2Dfinemap.peak.summary$T2D.SNPs.hits/T2Dfinemap.peak.summary$P.number

  ##region function T2DsignalSummary
  T2DsignalSummary<-function(P){
    T2D.SNPs.hits<-subset(T2Dfinemap.ALL.Beta.ATAC.peak,V8 %in% P) %>%  nrow
    T2D.signal.hits<-strsplit(as.character(unique(subset(T2Dfinemap.ALL.Beta.ATAC.peak,V8 %in% P)$V4)),".",fixed=T) %>% sapply(.,function(x){x[1]}) %>% unique %>% length
    P.number<-length(P)
    peak.sizes<-sapply(strsplit(P,"_"),function(x){as.numeric(x[3])-as.numeric(x[2])})
    peak.all.span.kb<-sum(peak.sizes[complete.cases(peak.sizes)])/1000
    df<-data.frame(P.number,peak.all.span.kb,T2D.SNPs.hits,T2D.signal.hits)
    return(df)
  }
  ##endregion function T2DsignalSummary

    ##endregion


  ##endregion

##endregion Beta cell CArePACT


##region Overlap with RePACT plotting

Peakannotation<-read.delim("~/Chip-seq/ATAC/scATAC/scATAC19.10.19/Combined10islet/SVM.p1.filtered.bigGene.clusterallBeta_peaks.narrowPeak.bed.annotated")
row.names(Peakannotation)<-paste(Peakannotation[,"Chr"],(Peakannotation[,"Start"]-1),Peakannotation[,"End"],sep="_")
Peakannotation<-Peakannotation[,c("Annotation","Distance.to.TSS","Gene.Name")]


New.T2D.tjct.2nd.ob<-readRDS("mydir/New9.T2D.tjct.2nd.ob")
Beta.T2D.tjct.ob<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Dropseq/DGEanalysis/Islet412+511+919+T2D1+S4/workplaceLink/2017.9.21.revise/Beta.T2D.tjct.ob.RDS")
Beta.T2D.tjct.2nd.ob<-readRDS("/mnt/rstor/genetics/JinLab/cxw486/Dropseq/DGEanalysis/Islet412+511+919+T2D1+S4/workplaceLink/2017.9.21.revise/Beta.T2D.tjct.2nd.ob.RDS")
Overlap.info<-Peakannotation[colnames(betaT2D.diffpeak.20bin.LSI$UPDN.toplot),] %>% subset(.,Gene.Name %in% c(row.names(New.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP),row.names(New.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN)))

# Overlap.info<-strsplit(as.character(Overlap.info$Annotation)," ") %>% lapply(.,function(x){x[1]}) %>% unlist %>% paste(row.names(Overlap.info),Overlap.info$Gene.Name,.,sep="::") %>% data.frame(Region=row.names(Overlap.info),Gene=Overlap.info$Gene.Name,NAME=.)
Overlap.info<-strsplit(as.character(Overlap.info$Annotation)," ") %>% lapply(.,function(x){x[1]}) %>% unlist %>% paste(Overlap.info$Gene.Name,.,sep=", ") %>% data.frame(Region=row.names(Overlap.info),Gene=Overlap.info$Gene.Name,NAME=.)
Overlap.info<-rbind(betaT2D.diffpeak.20bin.LSI$UP,betaT2D.diffpeak.20bin.LSI$DN)  %>% .[order(.$cor,decreasing=T),] %>% cbind(.,Region=row.names(.),rank=rank(.$cor)) %>% .[,c("Region","rank","cor"),drop=F] %>% merge(.,Overlap.info,by="Region")
Overlap.info<-rbind(New.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP,New.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN) %>% .[,"feature",drop=F] %>% cbind(.,Gene=row.names(.)) %>% merge(.,Overlap.info,by="Gene")
Overlap.info<-rbind(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP,Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN) %>% .[,"feature",drop=F] %>% cbind(.,Gene=row.names(.)) %>% merge(.,Overlap.info,by="Gene") %>% subset(feature.x==feature.y)


Overlap.info<-Overlap.info[as.numeric(as.character(mapvalues(Overlap.info$feature.x,c("UP","DOWN"),c(1,-1))))*Overlap.info$cor>0,] %>% .[order(.$rank,decreasing=T),]
Overlap.info<-subset(Overlap.info,cor>0.50 | cor< -0.50)



bindata<-New.T2D.tjct.2nd.ob$bin.data[,c(as.character(Overlap.info$Gene),"tag")]
Calibrate<-data.frame(Peaks=Overlap.info$Region,dupli.genes=colnames(bindata)[1:ncol(bindata)-1])
Peak.order<-Calibrate$Peaks
Gene.order<-Calibrate$dupli.genes
Overlap.info<-merge(Overlap.info,Calibrate,by.x="Region",by.y="Peaks")
Overlap.info$Region<-factor(Overlap.info$Region,levels=Peak.order)

Overlap.info$dupli.genes<-factor(Overlap.info$dupli.genes,levels=Gene.order)



# bindata<-New.T2D.tjct.2nd.ob$bin.data[,c("RBP4","FFAR4","ID1","tag")]
#bindata<-Beta.T2D.tjct.2nd.ob$bin.data[,c("FOS","JUN","tag")]
bindata<-data.frame(apply(bindata[,-ncol(bindata)],2,normalize_01),bin=bindata[,ncol(bindata)])
bindata.m<-reshape2::melt(bindata,id.vars="bin")
names(bindata.m)<-paste(names(bindata.m),"RNA",sep=".")
# bindata.m<-reshape2::melt(bindata,id.vars="tag")
# strsplit(as.character(bindata.m$variable),".",fixed=T) %>% lapply(.,function(x){x[1]}) %>% unlist() %>% cbind(bindata.m,UniqueGene=.) ->bindata.m
bindata.m$variable.RNA<-factor(bindata.m$variable.RNA,levels=Gene.order)


p2<-merge(bindata.m,Overlap.info,by.x="variable.RNA",by.y="dupli.genes") %>% ggplot(.)+aes(bin.RNA,variable.RNA,fill=value.RNA)+geom_tile()+scale_fill_gradient2(low="white",high="red",mid="orange",midpoint=0.6)+labs(y="Variable genes") +theme_classic()+theme(legend.position="NULL",axis.title.y=element_blank())+labs(x="Chromatin accessibility")+scale_x_discrete(expand=c(0,0.1))

## #+facet_grid(feature.x~.,space="free",scales="free")+theme_classic()+theme(legend.position="NULL",axis.title.y=element_blank())+labs(x="Match RNA")


#Overlap.info<-Peakannotation[colnames(betaT2D.diffpeak.20bin.LSI$UPDN.toplot),] %>% subset(.,Gene.Name %in% colnames(New.T2D.tjct.2nd.ob$bin.data))

p1toplot<-apply(betaT2D.diffpeak.20bin.LSI$UPDN.toplot[,colnames(betaT2D.diffpeak.20bin.LSI$UPDN.toplot) %in% Overlap.info$Region],2,function(x){scale(x)})%>% melt()
p1toplot<-merge(p1toplot,Overlap.info,by.x="Var2",by.y="Region") %>% .[order(.$rank,decreasing=T),]
p1toplot$NAME<-factor(p1toplot$NAME,levels=unique(p1toplot$NAME))

# p1toplot<-merge(p1toplot,bindata.m,by.x="Gene",by.y="UniqueGene.RNA",all.x=T,all.y=F)
# p1toplot[,c("NAME","variable.RNA")] %>% .[!duplicated(.),] %>% .[!duplicated(.$NAME),] %>% .[order(.$NAME),] %>% .$variable.RNA -> gene.order
p1toplot$Var2<-factor(p1toplot$Var2,levels=Peak.order)
ylabel<-p1toplot[!duplicated(p1toplot$dupli.genes),] %>% .[order(.$dupli.genes),] %>% .$NAME
p1<-ggplot(p1toplot)+aes(Var1,Var2,fill=value)+geom_tile()+scale_fill_gradient2(low="steelblue",mid="white",high="red")+theme_classic()+labs(x="T2D trajectory")+scale_y_discrete(labels=ylabel)+theme_classic()+theme(legend.position="NULL",axis.title.y=element_blank())+labs(x="Chromatin accessibility") +scale_x_discrete(expand=c(0,0.1))
#+facet_grid(feature.x~.,space="free",scales="free")




pdf("RePACT.ATACwithRNA.pdf",height=10,width=14)
grid.arrange(p1,p2,nrow=1)
dev.off()
bindata.m$bin<-factor(bindata.m$bin,levels=1:20)
ggplot(bindata.m)+aes(bin,variable,fill=value)+geom_tile()+scale_fill_gradient2(low="white",high="red",mid="orange",midpoint=0.6)+labs(y="Variable genes")+facet_grid(feature.x~.,space="free",scales="free")+theme_classic()+theme(legend.position="NULL",axis.title.y=element_blank())+labs(x="Match RNA")

pdf("FOS.JUN.RePACT.pdf",width=10,height=2)
ggplot(bindata.m)+aes(bin,variable,fill=value)+geom_tile()+scale_fill_gradient2(low="white",high="red",mid="orange",midpoint=0.6)+theme_classic()
dev.off()


pdf("RePACT.example.pdf")
ggplot(bindata.m)+aes(bin,variable,fill=value)+geom_tile()+scale_fill_gradient2(low="white",high="red",mid="orange",midpoint=0.6)+labs(y="Variable genes")+theme_classic()
dev.off()

bindata<-Beta.T2D.tjct.2nd.ob$bin.data[,c(as.character(Overlap.info$Gene)[as.character(Overlap.info$Gene) %in% colnames(Beta.T2D.tjct.2nd.ob$bin.data)],"tag")]
bindata<-data.frame(apply(bindata[,-ncol(bindata)],2,normalize_01),bin=bindata[,ncol(bindata)])
bindata.m<-reshape2::melt(bindata,id.vars="bin")
p3<-merge(bindata.m,Overlap.info,by.x="variable",by.y="Gene") %>% ggplot(.)+aes(bin,variable,fill=value)+geom_tile()+scale_fill_gradient2(low="white",high="red",mid="orange",midpoint=0.6)+labs(y="Variable genes")+facet_grid(feature.x~.,space="free",scales="free")+theme_classic()+theme(legend.position="NULL",axis.title.y=element_blank())+labs(x="Old cohort RNA")
grid.arrange(p1,p2,p3,ncol=3)
##endregion Overlap with RePACT plotting


##region  simple overlap enrichment analysis


T2Dup.genes<-intersect(row.names(New.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP),row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP))
T2DDN.genes<- intersect(row.names(New.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN),row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN))
#For T2D UP peaks;
Exp<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$UP),3]) %>% intersect(.,row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10))) %>% length,All=length(row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10))))

T2D.UPgene<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$UP),3]) %>% intersect(.,T2Dup.genes) %>% length,All=length(T2Dup.genes))
T2D.DOWNgene<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$UP),3]) %>% intersect(.,T2DDN.genes) %>% length,All=length(T2DDN.genes))


Up.UPpeak.logP<- -log10(binom.test(T2D.UPgene[1],T2D.UPgene[2],p=Exp[1]/Exp[2],alternative="greater")$p.value)
Dn.UPpeak.logP<- -log10(binom.test(T2D.DOWNgene[1],T2D.DOWNgene[2],p=Exp[1]/Exp[2],alternative="greater")$p.value)

random.UPpeak<-c()
for (i in 1:100){
Random.gene1<-row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10)) %>% .[sample(1:length(.),1000)]
T2D.rd1<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$UP),3]) %>% intersect(.,Random.gene1) %>% length,All=length(Random.gene1))
pvalue<-binom.test(T2D.rd1[1],T2D.rd1[2],p=Exp[1]/Exp[2],alternative="greater")$p.value
random.UPpeak<-c(random.UPpeak,pvalue)
}
random.UPpeak<- -mean(log10(random.UPpeak))
UP.peaks<-data.frame(UP.peaks=c(Up.UPpeak.logP,Dn.UPpeak.logP,random.UPpeak))

#
 T2D.UPgene.old<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$UP),3]) %>% intersect(.,row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP)) %>% length,All=length(row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP)))
 T2D.DOWNgene.old<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$UP),3]) %>% intersect(.,row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN)) %>% length,All=length(row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN)))
#
 p1<-rbind(Exp,T2D.UPgene,T2D.UPgene.old,T2D.DOWNgene,T2D.DOWNgene.old) %>% cbind(.,ratio=.[,1]/.[,2]) %>% data.frame(.,group=row.names(.),FC=.[,3]/.[1,3]) %>% ggplot(.)+aes(group,FC,fill=group)+geom_bar(stat="identity",color="black")+theme_classic()+scale_fill_manual(values=c("grey","firebrick2","firebrick2","green3","green3"))+ggtitle("T2D UP peaks")+theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+scale_y_continuous(expand=c(0,0.05))

#For T2D DOWN peaks;
Exp<-c(Hit=unique(as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$DN),3])) %>% intersect(.,row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10))) %>% length,All=length(row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10))))

T2D.UPgene<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$DN),3]) %>% intersect(.,T2Dup.genes) %>% length,All=length(T2Dup.genes))
T2D.DOWNgene<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$DN),3]) %>% intersect(.,T2DDN.genes) %>% length,All=length(T2DDN.genes))


Up.DNpeak.logP<- -log10(binom.test(T2D.UPgene[1],T2D.UPgene[2],p=Exp[1]/Exp[2])$p.value)
Dn.DNpeak.logP<- -log10(binom.test(T2D.DOWNgene[1],T2D.DOWNgene[2],p=Exp[1]/Exp[2],alternative="greater")$p.value)

random.UPpeak<-c()
for (i in 1:100){
Random.gene1<-row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10)) %>% .[sample(1:length(.),1000)]
T2D.rd1<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$DN),3]) %>% intersect(.,Random.gene1) %>% length,All=length(Random.gene1))
pvalue<-binom.test(T2D.rd1[1],T2D.rd1[2],p=Exp[1]/Exp[2],alternative="greater")$p.value
random.UPpeak<-c(random.UPpeak,pvalue)
}
random.UPpeak<- -mean(log10(random.UPpeak))

DOWN.peaks<-data.frame(DOWN.peaks=c(Up.DNpeak.logP,Dn.DNpeak.logP,random.UPpeak))
# T2D.UPgene.old<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$DN),3]) %>% intersect(.,row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP)) %>% length,All=length(row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$UP)))
# T2D.DOWNgene.old<-c(Hit=as.character(Peakannotation[row.names(betaT2D.diffpeak.20bin.LSI$DN),3]) %>% intersect(.,row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN)) %>% length,All=length(row.names(Beta.T2D.tjct.2nd.ob$BINlinear.result.summarized$DOWN)))
#
 p2<-rbind(Exp,T2D.UPgene,T2D.UPgene.old,T2D.DOWNgene,T2D.DOWNgene.old) %>% cbind(.,ratio=.[,1]/.[,2]) %>% data.frame(.,group=row.names(.),FC=.[,3]/.[1,3]) %>% ggplot(.)+aes(group,FC,fill=group)+geom_bar(stat="identity",color="black")+theme_classic()+scale_fill_manual(values=c("grey","firebrick2","firebrick2","green3","green3"))+ggtitle("T2D DN peaks")+theme(plot.title = element_text(hjust = 0.5),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+scale_y_continuous(expand=c(0,0.05))



#For Random peaks
Exps<-c()
for (i in 1:1000){
Exp<-c(Hit=unique(as.character(Peakannotation[sample(1:nrow(Peakannotation),1000),3])) %>% intersect(.,row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10))) %>% length,All=length(row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10))))
Exps<-rbind(Exps,Exp)
}
Exp<-colMeans(Exps)

T2D.UPgenes<-c()
T2D.DOWNgenes<-c()
for (i in 1:1000){
T2D.UPgene<-c(Hit=as.character(Peakannotation[sample(1:nrow(Peakannotation),1000),3]) %>% intersect(.,T2Dup.genes) %>% length,All=length(T2Dup.genes))
T2D.DOWNgene<-c(Hit=as.character(Peakannotation[sample(1:nrow(Peakannotation),1000),3]) %>% intersect(.,T2DDN.genes) %>% length,All=length(T2DDN.genes))
T2D.UPgenes<-rbind(T2D.UPgenes,T2D.UPgene)
T2D.DOWNgenes<-rbind(T2D.DOWNgenes,T2D.DOWNgene)
}

T2D.UPgene<-c(as.integer(mean(T2D.UPgenes[,1])),T2D.UPgenes[1,2])
T2D.DOWNgene<-c(as.integer(mean(T2D.DOWNgenes[,1])),T2D.DOWNgenes[1,2])


random.UPpeak.logP<- -log10(binom.test(T2D.UPgene[1],T2D.UPgene[2],p=Exp[1]/Exp[2])$p.value)
random.DNpeak.logP<- -log10(binom.test(T2D.DOWNgene[1],T2D.DOWNgene[2],p=Exp[1]/Exp[2])$p.value)

random.randompeak<-c()
for (i in 1:100){
Random.gene1<-row.names(subset(New.T2D.tjct.2nd.ob$BINlinear.result,Transcripts>10)) %>% .[sample(1:length(.),1000)]
for (j in 1:100)
T2D.rd1<-c(Hit=as.character(Peakannotation[sample(1:nrow(Peakannotation),1000),3]) %>% intersect(.,Random.gene1) %>% length,All=length(Random.gene1))
pvalue<-binom.test(T2D.rd1[1],T2D.rd1[2],p=Exp[1]/Exp[2],alternative="greater")$p.value
random.randompeak<-c(random.randompeak,pvalue)
}
random.randompeak<- -mean(log10(random.randompeak))

Random.peaks<-data.frame(random.peaks=c(random.UPpeak.logP,random.DNpeak.logP,random.randompeak))

Enrichemnt<-cbind(UP.peaks,DOWN.peaks,Random.peaks)
row.names(Enrichemnt)<-c("UP.gene","DN.gene","random.gene")
Enrichemnt.m<-melt(as.matrix(Enrichemnt))
Enrichemnt.m$Var1<-factor(Enrichemnt.m$Var1,levels=c("random.gene","DN.gene","UP.gene"))

pdf("caRePACT.overlap.pdf")
ggplot(Enrichemnt.m)+aes(Var2,Var1,fill=value)+geom_tile(color="black")+theme_classic()+scale_fill_gradient2(low="black",mid="white",high="red",midpoint=0.5)
dev.off()
##endregion simple overlap enrichment analysis
